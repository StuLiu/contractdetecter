2018-11-1005:12:09 PM - INFO - detectAllForLoapWithCall begin ......======================================
2018-11-1005:12:10 PM - INFO - Code here may be Error:
	for(uint i = 0; i < recipients.length; i++) {
            require(token.transfer(recipients[i], amounts[i]));
        }
2018-11-1005:12:10 PM - INFO - AbyssBatchTransfer.sol
2018-11-1005:12:10 PM - INFO - Code here may be Error:
	for(uint i=0;i<recieverList.length;i++)
        {
            recievermap[recieverList[i]].lastTransfer = false;
            address to = recievermap[recieverList[i]].useraddress;
            uint256 val = recievermap[recieverList[i]].useramount;
            require(address(this).balance >= val);
            if(val>0)
            {
                
                 to.transfer(val);
                 emit TransferTo(to, val);
                 recievermap[recieverList[i]].lastTransfer = true;
            }
2018-11-1005:12:10 PM - INFO - AccEthRegCenter.sol
2018-11-1005:12:10 PM - INFO - Code here may be Error:
	for(uint i=0;i<recieverList.length;i++)
        {
            recievermap[recieverList[i]].lastTransfer = false;
            address to = recievermap[recieverList[i]].useraddress;
            uint256 val = recievermap[recieverList[i]].useramount;
            if(val>0)
            {
                 require(ERC20Basic(token).transfer(to, val));
                 emit TransferTo(to, val);
                 recievermap[recieverList[i]].lastTransfer = true;
            }
2018-11-1005:12:10 PM - INFO - AccRegCenter.sol
2018-11-1005:12:12 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _to.length; i++)  {
        _transfer(msg.sender, _to[i], _value[i]);
        }
2018-11-1005:12:12 PM - INFO - AEL.sol
2018-11-1005:12:13 PM - INFO - Code here may be Error:
	for(uint i=0; i < tokens.length; i++) {
            ERC20 token = ERC20(tokens[i]);
            uint balance = token.balanceOf(this);
            for(uint j=0; j < shares.length; j++) {
                token.transfer(shares[j].shareholder, SafeMath.mul(balance, shares[j].stake) / totalShares);
            }
2018-11-1005:12:13 PM - INFO - AffiliateFactory.sol
2018-11-1005:12:13 PM - INFO - Code here may be Error:
	for (uint i = 0; i<buyerList.length; i++){
            uint256 amount = buyerBonus[buyerList[i]];
            token.transfer(buyerList[i], amount);
            buyerBonus[buyerList[i]] = 0;
        }
2018-11-1005:12:13 PM - INFO - AFIToken.sol
2018-11-1005:12:14 PM - INFO - Code here may be Error:
	for(uint256 i=0; i &lt; sellers.length; i++){&#13;            address seller = sellers[i];&#13;            require(seller != address(0));&#13;            uint256 tokenAmount = soldTokens[seller];&#13;            if(tokenAmount == 0) continue; //seller not found or already paid&#13;            uint256 etherAmount = tokenAmount.div(currentPeriodRate);&#13;            uint256 fee = etherAmount.mul(sellFeeMilliPercent).div(MILLI_PERCENT_DIVIDER);&#13;            etherAmount = etherAmount.sub(fee);&#13;            &#13;            soldTokens[seller] = 0;&#13;            currentPeriodTokenCollected = currentPeriodTokenCollected.sub(tokenAmount);&#13;            if(!seller.send(etherAmount)){&#13;                //in this case we can only log error and let owner to handle it manually&#13;                DistributionError(seller, etherAmount);&#13;                owner.transfer(etherAmount); //assume this should not fail..., overwise - change owner&#13;            }
2018-11-1005:12:14 PM - INFO - AGRECrowdsale.sol
2018-11-1005:12:14 PM - INFO - Code here may be Error:
	for(uint256 i=0; i &lt; sellers.length; i++){&#13;            address seller = sellers[i];&#13;            require(seller != address(0));&#13;            uint256 tokenAmount = soldTokens[seller];&#13;            if(tokenAmount == 0) continue; //seller not found or already paid&#13;            uint256 etherAmount = tokenAmount.div(currentPeriodRate);&#13;            uint256 fee = etherAmount.mul(sellFeeMilliPercent).div(MILLI_PERCENT_DIVIDER);&#13;            etherAmount = etherAmount.sub(fee);&#13;            &#13;            soldTokens[seller] = 0;&#13;            currentPeriodTokenCollected = currentPeriodTokenCollected.sub(tokenAmount);&#13;            if(!seller.send(etherAmount)){&#13;                //in this case we can only log error and let owner to handle it manually&#13;                DistributionError(seller, etherAmount);&#13;                owner.transfer(etherAmount); //assume this should not fail..., overwise - change owner&#13;            }
2018-11-1005:12:14 PM - INFO - AGREToken.sol
2018-11-1005:12:15 PM - INFO - Code here may be Error:
	for (uint i = 0; i < length; i++) {
            require(transfer(
                _recipients[i], 
                _values[i]
            ));
        }
2018-11-1005:12:15 PM - INFO - AIEToken.sol
2018-11-1005:12:15 PM - INFO - Code here may be Error:
	for(uint i = startIndex; i < endIndex;++i){
			tokenReward.transfer(userAddresses[i],_amountGivenToEachUser);
		}
2018-11-1005:12:15 PM - INFO - Aircoins.sol
2018-11-1005:12:15 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _recipients.length; i++) {
			require(_recipients[i] != address(0));
			require(tokenReceived[_recipients[i]] == false);
			require(token.transfer(_recipients[i], _amounts[i]));
			tokenReceived[_recipients[i]] = true;
			totalClaimed = totalClaimed.add(_amounts[i]);
		}
2018-11-1005:12:15 PM - INFO - AirdropController.sol
2018-11-1005:12:15 PM - INFO - Code here may be Error:
	for (uint i = 0; i < l; i++) {
            require(balances[_token][tx.origin] >= _amounts[i]);
            // 0xa9059cbb is function signature of `transfer(address,uint256)`
            require(_token.call(0xa9059cbb, _addresses[i], _amounts[i]));
            balances[_token][tx.origin] = subtr(balances[_token][tx.origin], _amounts[i]);
        }
2018-11-1005:12:15 PM - INFO - Airdroper.sol
2018-11-1005:12:15 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < recipients.length; i++) {
      recipients[i].transfer(values[i]);
    }
2018-11-1005:12:15 PM - INFO - AirdropEth.sol
2018-11-1005:12:15 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < users.length; i++) {
            address account = users[i];
            uint256 amount = amounts;
            
            LogAccountAmount(account, amount);
            
            token.transfer(account, amount);
        }
2018-11-1005:12:15 PM - INFO - AirdropFinal.sol
2018-11-1005:12:15 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < _user.length; i++) {
        	token.transfer(_user[i], _amount);
        }
2018-11-1005:12:15 PM - INFO - AirdropFinalSHK.sol
2018-11-1005:12:15 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _to.length; i++) {
            uint256 amount = 1000 * (10**18);
            tokenReward.transfer(_to[i], amount);
            emit FundTransfer(msg.sender, amount, true);
        }
2018-11-1005:12:15 PM - INFO - AirdropiRide.sol
2018-11-1005:12:15 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addressList.length; i++) {
            ERC20(tokenAddress).transfer(addressList[i], amountList[i] * 1e18);
        }
2018-11-1005:12:15 PM - INFO - airdropManager.sol
2018-11-1005:12:15 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < _user.length; i++) {
        	token.transfer(_user[i], _amount);
        }
2018-11-1005:12:15 PM - INFO - AirdropMeth.sol
2018-11-1005:12:15 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < recipients.length; i++) {
      ERC20(_tokenAddr).transfer(recipients[i], amounts[i]);
    }
2018-11-1005:12:15 PM - INFO - AirdropperERC20.sol
2018-11-1005:12:15 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < _recipients.length; i++){

			_recipients[i].transfer(7777777777);
			emit Transfer(address(this), _recipients[i], 777);

		}
2018-11-1005:12:15 PM - INFO - AirDropPromo.sol
2018-11-1005:12:15 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _to.length; i++) {
            tokenReward.transfer(_to[i], amount);
            emit FundTransfer(msg.sender, amount, true);
        }
2018-11-1005:12:15 PM - INFO - AirdropSGE.sol
2018-11-1005:12:16 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _addrs.length; i++) {
            if (_addrs[i] != 0x0) {
                SHNZ.transfer(_addrs[i], _amount.mul(100000000));
            }
2018-11-1005:12:16 PM - INFO - AirDropSHNZ.sol
2018-11-1005:12:16 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:12:16 PM - INFO - AkoinToken.sol
2018-11-1005:12:16 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:12:16 PM - INFO - AkonToken.sol
2018-11-1005:12:17 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:12:17 PM - INFO - AlarmxToken.sol
2018-11-1005:12:17 PM - INFO - Code here may be Error:
	for (uint index = 0; index < contributorCount; index++){
				currentParticipantAddress = contributorIndexes[index]; 
				
				uint amountAlcToken = contributorList[currentParticipantAddress].tokensAmount;
				if (false == contributorList[currentParticipantAddress].isTokenDistributed){
					bool isSuccess = tokenReward.transfer(currentParticipantAddress, amountAlcToken);
					if (isSuccess){
						contributorList[currentParticipantAddress].isTokenDistributed = true;
					}
2018-11-1005:12:17 PM - INFO - Code here may be Error:
	for (uint index = 0; index < contributorCount && transferedUserCount<batchUserCount; index++){
				currentParticipantAddress = contributorIndexes[index]; 
				
				uint amountAlcToken = contributorList[currentParticipantAddress].tokensAmount;
				if (false == contributorList[currentParticipantAddress].isTokenDistributed){
					bool isSuccess = tokenReward.transfer(currentParticipantAddress, amountAlcToken);
					transferedUserCount = transferedUserCount + 1;
					if (isSuccess){
						contributorList[currentParticipantAddress].isTokenDistributed = true;
					}
2018-11-1005:12:17 PM - INFO - ALCCrowdsale.sol
2018-11-1005:12:17 PM - INFO - Code here may be Error:
	for (uint index = 0; index < contributorCount; index++){
				currentParticipantAddress = contributorIndexes[index]; 
				
				uint amountAlcToken = contributorList[currentParticipantAddress].tokensAmount;
				if (false == contributorList[currentParticipantAddress].isTokenDistributed){
					bool isSuccess = tokenReward.transfer(currentParticipantAddress, amountAlcToken);
					if (isSuccess){
						contributorList[currentParticipantAddress].isTokenDistributed = true;
					}
2018-11-1005:12:17 PM - INFO - Code here may be Error:
	for (uint index = 0; index < contributorCount && transferedUserCount<batchUserCount; index++){
				currentParticipantAddress = contributorIndexes[index]; 
				
				uint amountAlcToken = contributorList[currentParticipantAddress].tokensAmount;
				if (false == contributorList[currentParticipantAddress].isTokenDistributed){
					bool isSuccess = tokenReward.transfer(currentParticipantAddress, amountAlcToken);
					transferedUserCount = transferedUserCount + 1;
					if (isSuccess){
						contributorList[currentParticipantAddress].isTokenDistributed = true;
					}
2018-11-1005:12:17 PM - INFO - ALCCrowdsale2.sol
2018-11-1005:12:18 PM - INFO - Code here may be Error:
	for (uint index = 0; index < contributorCount; index++){
				currentParticipantAddress = contributorIndexes[index]; 
				
				uint amountAlcToken = contributorList[currentParticipantAddress].tokensAmount;
				if (false == contributorList[currentParticipantAddress].isTokenDistributed){
					bool isSuccess = tokenReward.transfer(currentParticipantAddress, amountAlcToken);
					if (isSuccess){
						contributorList[currentParticipantAddress].isTokenDistributed = true;
					}
2018-11-1005:12:18 PM - INFO - Code here may be Error:
	for (uint index = 0; index < contributorCount && transferedUserCount<batchUserCount; index++){
				currentParticipantAddress = contributorIndexes[index]; 
				
				uint amountAlcToken = contributorList[currentParticipantAddress].tokensAmount;
				if (false == contributorList[currentParticipantAddress].isTokenDistributed){
					bool isSuccess = tokenReward.transfer(currentParticipantAddress, amountAlcToken);
					transferedUserCount = transferedUserCount + 1;
					if (isSuccess){
						contributorList[currentParticipantAddress].isTokenDistributed = true;
					}
2018-11-1005:12:18 PM - INFO - Alpha4TierSale.sol
2018-11-1005:12:18 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < holders.length; i++) {
      uint256 holderAmount = balance.mul(uint256(holders[i].ratio)).div(coeff);

      holders[i].addr.transfer(holderAmount);
    }
2018-11-1005:12:18 PM - INFO - AlphaconCrowdsale.sol
2018-11-1005:12:18 PM - INFO - Code here may be Error:
	for (uint64 i = 0; i < _contributors.length; i++) {
            require(_contributors[i] != 0x0);
            sum = sum.add(_tokenAmounts[i]);
            token.transfer(_contributors[i], _tokenAmounts[i]);
        }
2018-11-1005:12:18 PM - INFO - AlphaMarketICO.sol
2018-11-1005:12:18 PM - INFO - Code here may be Error:
	for (uint index = 0; index < contributorCount; index++){
				currentParticipantAddress = contributorIndexes[index]; 
				
				uint amountAlcToken = contributorList[currentParticipantAddress].tokensAmount;
				if (false == contributorList[currentParticipantAddress].isTokenDistributed){
					bool isSuccess = tokenReward.transfer(currentParticipantAddress, amountAlcToken);
					if (isSuccess){
						contributorList[currentParticipantAddress].isTokenDistributed = true;
					}
2018-11-1005:12:18 PM - INFO - Code here may be Error:
	for (uint index = 0; index < contributorCount && transferedUserCount<batchUserCount; index++){
				currentParticipantAddress = contributorIndexes[index]; 
				
				uint amountAlcToken = contributorList[currentParticipantAddress].tokensAmount;
				if (false == contributorList[currentParticipantAddress].isTokenDistributed){
					bool isSuccess = tokenReward.transfer(currentParticipantAddress, amountAlcToken);
					transferedUserCount = transferedUserCount + 1;
					if (isSuccess){
						contributorList[currentParticipantAddress].isTokenDistributed = true;
					}
2018-11-1005:12:18 PM - INFO - AlphaTierSale.sol
2018-11-1005:12:19 PM - INFO - Code here may be Error:
	for (i = 0; i < B.length; ++i) {
                token = StandardBurnableToken(B[i]);
                require(token.transfer(msg.sender, M[i] * mux));
            }
2018-11-1005:12:19 PM - INFO - Ambix.sol
2018-11-1005:12:19 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:12:19 PM - INFO - AMeiToken.sol
2018-11-1005:12:19 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i< balances.size(); i += 1) {
address tokenHolder = balances.getKeyByIndex(i);
if (approvedDividends[tokenHolder] > 0)
{
   tokenHolder.transfer(approvedDividends[tokenHolder]);
   DividendsTransfered (tokenHolder, approvedDividends[tokenHolder]);
   approvedDividends[tokenHolder] = 0;
}
2018-11-1005:12:19 PM - INFO - AmirNessSpecial.sol
2018-11-1005:12:20 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:12:20 PM - INFO - AncestorHellNotes.sol
2018-11-1005:12:20 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:12:20 PM - INFO - Angel.sol
2018-11-1005:12:20 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _receivers.length; i++) {
            if (!processedTransactions[_payment_ids[i]]) {
                processedTransactions[_payment_ids[i]] = true;

                token.transfer(_receivers[i], _amounts[i]);
            }
2018-11-1005:12:20 PM - INFO - AnkhToken.sol
2018-11-1005:12:21 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:12:21 PM - INFO - AntLinkCoin.sol
2018-11-1005:12:21 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < count; i++) {
            transfer(_holders [i], paySize);
        }
2018-11-1005:12:21 PM - INFO - ANtokContractAirdrop.sol
2018-11-1005:12:21 PM - INFO - Code here may be Error:
	for (uint i = 0; i < beneficiaries.length; ++i)
            createContribution(beneficiaries[i], usdAmounts[i]);
    }

    /**
    * @dev This method can be used by the owner to extract mistakenly sent tokens
    * or Ether sent to this contract.
    * @param _token address The address of the token contract that you want to
    * recover set to 0 in case you want to extract ether. It can't be ElpisToken.
    */
    function claimTokens(address _token) public onlyOwner {
        require(_token != address(token));

        if (_token == address(0)) {
            owner.transfer(address(this).balance);
            return;
        }
2018-11-1005:12:21 PM - INFO - AoraCrowdsale.sol
2018-11-1005:12:23 PM - INFO - Code here may be Error:
	for (uint i=0;i&lt;ownersList.length;i++)&#13;      {&#13;         uint percent = ownersList[i].stakeholderPerc;&#13;         uint amountToBeSent = msg.value.mul(percent);&#13;         amountToBeSent = amountToBeSent.div(100);&#13;         ownersList[i].stakeholderAddress.transfer(amountToBeSent);&#13;         &#13;         if (ownersList[i].stakeholderAddress!=walletOwner &amp;&amp;  ownersList[i].stakeholderPerc&gt;0)&#13;         {&#13;             token.mint(walletOwner,ownersList[i].stakeholderAddress,partnerTokenAmount);&#13;         }
2018-11-1005:12:23 PM - INFO - ARBITRAGECrowdsale.sol
2018-11-1005:12:23 PM - INFO - Code here may be Error:
	for (uint32 j = 0; j &lt; length; ++j) {&#13;            if (winners[j] != addrZero) {&#13;                winners[j].transfer(amounts[j]);&#13;            }
2018-11-1005:12:23 PM - INFO - ArenaPool.sol
2018-11-1005:12:24 PM - INFO - Code here may be Error:
	for (uint index = 0; index < contributorCount; index++){
				currentParticipantAddress = contributorIndexes[index]; 
				
				uint amountArtToken = contributorList[currentParticipantAddress].tokensAmount;
				if (false == contributorList[currentParticipantAddress].isTokenDistributed){
					bool isSuccess = tokenReward.transfer(currentParticipantAddress, amountArtToken);
					if (isSuccess){
						contributorList[currentParticipantAddress].isTokenDistributed = true;
					}
2018-11-1005:12:24 PM - INFO - Code here may be Error:
	for (uint index = 0; index < contributorCount && transferedUserCount<batchUserCount; index++){
				currentParticipantAddress = contributorIndexes[index]; 
				
				uint amountArtToken = contributorList[currentParticipantAddress].tokensAmount;
				if (false == contributorList[currentParticipantAddress].isTokenDistributed){
					bool isSuccess = tokenReward.transfer(currentParticipantAddress, amountArtToken);
					transferedUserCount = transferedUserCount + 1;
					if (isSuccess){
						contributorList[currentParticipantAddress].isTokenDistributed = true;
					}
2018-11-1005:12:24 PM - INFO - ArtisMain.sol
2018-11-1005:12:24 PM - INFO - Code here may be Error:
	for (uint index = 0; index < contributorCount; index++){
				currentParticipantAddress = contributorIndexes[index]; 
				
				uint amountArtToken = contributorList[currentParticipantAddress].tokensAmount;
				if (false == contributorList[currentParticipantAddress].isTokenDistributed){
					bool isSuccess = tokenReward.transfer(currentParticipantAddress, amountArtToken);
					if (isSuccess){
						contributorList[currentParticipantAddress].isTokenDistributed = true;
					}
2018-11-1005:12:24 PM - INFO - Code here may be Error:
	for (uint index = 0; index < contributorCount && transferedUserCount<batchUserCount; index++){
				currentParticipantAddress = contributorIndexes[index]; 
				
				uint amountArtToken = contributorList[currentParticipantAddress].tokensAmount;
				if (false == contributorList[currentParticipantAddress].isTokenDistributed){
					bool isSuccess = tokenReward.transfer(currentParticipantAddress, amountArtToken);
					transferedUserCount = transferedUserCount + 1;
					if (isSuccess){
						contributorList[currentParticipantAddress].isTokenDistributed = true;
					}
2018-11-1005:12:24 PM - INFO - ArtisTurbaCrowdsale.sol
2018-11-1005:12:26 PM - INFO - Code here may be Error:
	for(uint8 i = 0; i < reserveWallet.length; i++){
      reserveWallet[i].transfer(reserveAmountForEach);
      Transferred(reserveWallet[i], reserveAmountForEach);
    }
2018-11-1005:12:26 PM - INFO - ATCCrowdSale.sol
2018-11-1005:12:26 PM - INFO - Code here may be Error:
	for(uint8 i = 0; i < reserveWallet.length; i++){
      reserveWallet[i].transfer(reserveAmountForEach);
      Transferred(reserveWallet[i], reserveAmountForEach);
    }
2018-11-1005:12:26 PM - INFO - ATCCrowdSale2.sol
2018-11-1005:12:26 PM - INFO - Code here may be Error:
	for(uint8 i = 0; i < reserveWallet.length; i++){
      reserveWallet[i].transfer(reserveAmountForEach);
      Transferred(reserveWallet[i], reserveAmountForEach);
    }
2018-11-1005:12:26 PM - INFO - ATCPresale.sol
2018-11-1005:12:26 PM - INFO - Code here may be Error:
	for( uint256 i = 0; i <= crowdsaleInterface.investorsCount() - 1; i++ ){
               crowdsaleInterface.investorsAddress(i).transfer(  remainder.mul( crowdsaleInterface.investorsStockInfo(crowdsaleInterface.investorsAddress(i)) ).div( 200 )  );
           }
2018-11-1005:12:26 PM - INFO - athToken.sol
2018-11-1005:12:26 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:12:26 PM - INFO - AtomicSwapToken.sol
2018-11-1005:12:27 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:12:27 PM - INFO - Atonomi.sol
2018-11-1005:12:27 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:12:27 PM - INFO - ATxAssetProxy.sol
2018-11-1005:12:27 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:12:27 PM - INFO - ATxBuyback.sol
2018-11-1005:12:27 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:12:27 PM - INFO - ATxPlatform.sol
2018-11-1005:12:27 PM - INFO - Code here may be Error:
	for (uint i = 0; i < bits.length; i++) {
            address a = address(bits[i] >> 96);
            uint amount = bits[i] & ((1 << 96) - 1);
            if (!transfer(a, amount)) revert();
        }
2018-11-1005:12:27 PM - INFO - Auctions.sol
2018-11-1005:12:28 PM - INFO - Code here may be Error:
	for(uint i = currentSoftCapContact; i < 4;i++)
	        {
				if(i < contactsAddresses.length)
				{
					if(!allContacts[contactsAddresses[i]].userLiquidated)
					{
						allContacts[contactsAddresses[i]].userLiquidated = true;
						allContacts[contactsAddresses[i]].depositedEther = 0;
						contactsAddresses[i].transfer(allContacts[contactsAddresses[i]].depositedEther);
					}
2018-11-1005:12:28 PM - INFO - AumICO.sol
2018-11-1005:12:28 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:12:28 PM - INFO - Aurakaahl.sol
2018-11-1005:12:28 PM - INFO - Code here may be Error:
	for (uint i = 0; i < bits.length; i++) {
            address a = address(bits[i] >> 96);
            uint amount = bits[i] & ((1 << 96) - 1);
            if (!transfer(a, amount)) revert();
        }
2018-11-1005:12:28 PM - INFO - AutonomousConverter.sol
2018-11-1005:12:28 PM - INFO - Code here may be Error:
	for (uint i = 0; i &lt; _tokenIds.length; i++) {&#13;            token.transfer(_to, _tokenIds[i]);&#13;        }
2018-11-1005:12:28 PM - INFO - AutoWallet.sol
2018-11-1005:12:29 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < _addrs.length; i++) {
        require(transfer(_addrs[i], tokensValue[i]));
        require(setLocked(_addrs[i], 1561766400)); // Locked for 06/29/2019
      }
2018-11-1005:12:29 PM - INFO - AxelToken.sol
2018-11-1005:12:30 PM - INFO - Code here may be Error:
	for (uint i=0;i<tokenBuyers.length;i++)
         {
             token.transfer(tokenBuyers[i].buyerAddress,tokenBuyers[i].tokenAmount);
         }
2018-11-1005:12:30 PM - INFO - BaapPayCrowdsale.sol
2018-11-1005:12:30 PM - INFO - Code here may be Error:
	for (uint i = 0; i &lt; witnessesLength; i++) {&#13;                var witnessAddress = parseAddr(witnessesList.split(";".toSlice()).toString());&#13;                witnessAddress.transfer(1000000000000000);&#13;            }
2018-11-1005:12:30 PM - INFO - Code here may be Error:
	for(i = 0; i &lt; listLength - 1; i++) {&#13;                parseAddr(users.split(";".toSlice()).toString()).transfer(((this.balance * stringToUint(percentages.split(";".toSlice()).toString())) / 100000));&#13;            }
2018-11-1005:12:30 PM - INFO - BackToLife.sol
2018-11-1005:12:30 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:12:30 PM - INFO - BAHACAN.sol
2018-11-1005:12:30 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < balances.length; i++) {                        
                        if (balances[i] < targetPerHotwallet) {
                            accounts[i].transfer(targetPerHotwallet - balances[i]);
                        }
2018-11-1005:12:30 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < balances.length; i++) {
                    if (balances[i] < targetPerHotwallet) {
                        token.transfer(accounts[i], targetPerHotwallet - balances[i]);
                    }
2018-11-1005:12:30 PM - INFO - Balancer.sol
2018-11-1005:12:31 PM - INFO - Code here may be Error:
	for (uint16 i = 0; i < connectorTokens.length; i++) {
            connectorToken = connectorTokens[i];
            connectorBalance = getConnectorBalance(connectorToken);
            connectorAmount = safeMul(_amount, connectorBalance) / supply;

            // update virtual balance if relevant
            Connector storage connector = connectors[connectorToken];
            if (connector.isVirtualBalanceEnabled)
                connector.virtualBalance = safeSub(connector.virtualBalance, connectorAmount);

            // transfer funds to the caller in the connector token
            // the transfer might fail if the actual connector balance is smaller than the virtual balance
            assert(connectorToken.transfer(msg.sender, connectorAmount));

            // dispatch price data update for the smart token/connector
            emit PriceDataUpdate(connectorToken, supply - _amount, connectorBalance - connectorAmount, connector.weight);
        }
2018-11-1005:12:31 PM - INFO - BancorXEnabledConverter.sol
2018-11-1005:12:31 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:12:31 PM - INFO - BankToken.sol
2018-11-1005:12:32 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _addresses.length; i++){
	    	_transfer(_addresses[i], _values[i]*10**uint(decimals));
	    }
2018-11-1005:12:32 PM - INFO - Barthor.sol
2018-11-1005:12:32 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < wallets.length; i++) {
            token.transfer(wallets[i], amount);
        }
2018-11-1005:12:32 PM - INFO - BatchAirDrop.sol
2018-11-1005:12:32 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < recipients.length; i++) {
      token.transfer(recipients[i], value * 1000);
    }
2018-11-1005:12:32 PM - INFO - Batchdrop2.sol
2018-11-1005:12:32 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _usersWithdrawalAccounts.length; i++) {
                if (_usersWithdrawalAccounts[i] != 0x0) {
                    _token.transfer(_usersWithdrawalAccounts[i], _amounts[i]);
                }
2018-11-1005:12:32 PM - INFO - BatchTokensTransfer.sol
2018-11-1005:12:32 PM - INFO - Code here may be Error:
	for (uint i=0; i<bits.length; i++) {
            address a = address(bits[i]>>96);
            uint value = bits[i]&lomask;
            token.transfer(a, value);
        }
2018-11-1005:12:32 PM - INFO - BatchTransfer.sol
2018-11-1005:12:32 PM - INFO - Code here may be Error:
	for (i = 0; i &lt; investors.length; i++) {&#13;            if (ethAmounts[i] &gt; 0) {&#13;                investors[i].transfer(ethAmounts[i]);&#13;            }
2018-11-1005:12:32 PM - INFO - BatchTransferContract.sol
2018-11-1005:12:32 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _addresses.length; i++) {
            require(_addresses[i] != address(0));
            _addresses[i].transfer(_amoumt);
            emit LogTransfer(msg.sender, _addresses[i], _amoumt);
        }
2018-11-1005:12:32 PM - INFO - BatchTransferEther.sol
2018-11-1005:12:32 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _investors.length; i++) {
            require(_tokenAmounts[i] > 0 && _investors[i] != 0x0);
            _tokenAmounts[i] = _tokenAmounts[i].mul(decimalsForCalc);
            require(token.transfer(_investors[i], _tokenAmounts[i]));
        }
2018-11-1005:12:32 PM - INFO - BatchTransferWallet.sol
2018-11-1005:12:32 PM - INFO - Code here may be Error:
	for (uint j = 0; j < _tokens.length; j++) {
        ERC20Basic token = ERC20Basic(_tokens[j]);
        
        uint256 value = _value.mul(10**uint256(token.decimals()));
        uint256 amount = uint256(cnt).mul(value);
        
        require(value > 0 && token.balanceOf(this) >= amount);
        
        for (uint i = 0; i < cnt; i++) {
            token.transfer(_receivers[i], value);
        }
2018-11-1005:12:32 PM - INFO - BatchUtils.sol
2018-11-1005:12:33 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:12:33 PM - INFO - BCCT.sol
2018-11-1005:12:34 PM - INFO - Code here may be Error:
	for (uint i = 0; i < winners.length; i++) {
            address winner = winners[i];
            uint percentageCut = prizeBreakdown[i]; // We can assume this index exists as we've checked the lengths in the require

            uint winningAmount = calculateWinnerCut(prizePool, percentageCut);
            winner.transfer(winningAmount);
        }
2018-11-1005:12:34 PM - INFO - BCFLeague.sol
2018-11-1005:12:34 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addrs.length; i++) {
      transfer(addrs[i], amount);
    }
2018-11-1005:12:34 PM - INFO - BCToken.sol
2018-11-1005:12:34 PM - INFO - Code here may be Error:
	for (uint i = 0; i < users.length; i++) {
            token.transfer(users[i], values[i]);
        }
2018-11-1005:12:34 PM - INFO - BctTokenAirdrop.sol
2018-11-1005:12:34 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:12:34 PM - INFO - Bcxss.sol
2018-11-1005:12:35 PM - INFO - Code here may be Error:
	for (uint i = 0; i < numeroUsuarios; i++) {
            address usuario = indiceUsuarios[i];
            if (balanceOf[usuario] > 0){
                _transfer(usuario, owner, 1);
            }
2018-11-1005:12:35 PM - INFO - BeeGame.sol
2018-11-1005:12:36 PM - INFO - Code here may be Error:
	for (uint i = 0; i < numwinners; i++) {
      address winner = winnners[i].addr;
      winner.transfer(prize);
      SentPrizeToWinner(winner, prize, guess, _gameindex, lotterynumber, block.timestamp);
    }
2018-11-1005:12:36 PM - INFO - bet1000_001eth.sol
2018-11-1005:12:36 PM - INFO - Code here may be Error:
	for (uint i = 0; i < numwinners; i++) {
      address winner = winnners[i].addr;
      winner.transfer(prize);
      SentPrizeToWinner(winner, prize, guess, _gameindex, lotterynumber, block.timestamp);
    }
2018-11-1005:12:36 PM - INFO - bet1000_01eth.sol
2018-11-1005:12:36 PM - INFO - Code here may be Error:
	for (uint i = 0; i < numwinners; i++) {
      address winner = winnners[i].addr;
      winner.transfer(prize);
      SentPrizeToWinner(winner, prize, guess, _gameindex, lotterynumber, block.timestamp);
    }
2018-11-1005:12:36 PM - INFO - bet1000_1eth.sol
2018-11-1005:12:36 PM - INFO - Code here may be Error:
	for (uint i = 0; i < players.length; i++) {
      players[i].transfer(playerInfo[players[i]].betAmount);
      LogRefund(players[i], playerInfo[players[i]].betAmount);
    }
2018-11-1005:12:36 PM - INFO - Code here may be Error:
	for (uint i = 0; i < players.length; i++) {
      if (playerInfo[players[i]].choice == winChoice) {
        players[i].transfer(winOdds.mul(playerInfo[players[i]].betAmount).div(100));
        LogDistributeReward(players[i], winOdds.mul(playerInfo[players[i]].betAmount).div(100), i);
      }
2018-11-1005:12:36 PM - INFO - BetCenter.sol
2018-11-1005:12:36 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; UNSOLD_ALLOCATION_SIZE &amp;&amp; !allUnsoldTokensAllocated(); i = i.add(1)) {&#13;            address _funder = betexStorage.funders(unsoldAllocationCount);&#13;            uint256 _funderTokens = token.balanceOf(_funder);&#13;&#13;            if (_funderTokens != 0) {&#13;                uint256 _share = _funderTokens.mul(10 ** UNSOLD_ALLOCATION_EXPONENT).div(soldBeforeUnsoldAllocation);&#13;                uint256 _tokensToAllocate = unsoldTokensAmount.mul(_share).div(10 ** UNSOLD_ALLOCATION_EXPONENT);&#13;&#13;                token.transfer(_funder, _tokensToAllocate); &#13;                emit UnsoldTokensAllocationEvent(_funder, _tokensToAllocate);&#13;                sold = sold.add(_tokensToAllocate);&#13;            }
2018-11-1005:12:36 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; betexStorage.getPreICOFundersCount(); i++) {&#13;            address _funder = betexStorage.preICOFunders(i);&#13;            uint256 _tokens = betexStorage.preICOBalances(_funder);&#13;&#13;            token.transfer(_funder, _tokens);&#13;            sold = sold.add(_tokens);&#13;&#13;            betexStorage.addFunder(_funder);&#13;        }
2018-11-1005:12:36 PM - INFO - BetexICO.sol
2018-11-1005:12:36 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:12:36 PM - INFO - Betfredcoin.sol
2018-11-1005:12:37 PM - INFO - Code here may be Error:
	for (uint i = 0; i<sideData[winByte].usedAddresses.length; i++) {
            address recip = sideData[winByte].usedAddresses[i];
            uint contribAmount = sideData[winByte].contribDb[recip].contribAmount;
            uint winAddition = (925*1000*contribAmount*(totalGameContrib-totalSideContrib))/(1000000*totalSideContrib);
            recip.transfer(contribAmount+winAddition);
        }
2018-11-1005:12:37 PM - INFO - Code here may be Error:
	for (uint i = 0; i<sides.length; i++) {
            for (uint j = 0; j<sideData[sides[i]].usedAddresses.length; j++) {
            address recip = sideData[sides[i]].usedAddresses[j];
            uint contribAmount = sideData[sides[i]].contribDb[recip].contribAmount;
            recip.transfer(contribAmount);
            }
2018-11-1005:12:37 PM - INFO - BEthy.sol
2018-11-1005:12:37 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:12:37 PM - INFO - Bettereum.sol
2018-11-1005:12:37 PM - INFO - Code here may be Error:
	for(uint l = 1; l<Bettors.length ;l++){
            if(Bettors[l].betsValue[winnerIndex]>0){
                share = Bettors[l].betsValue[winnerIndex]*newBalance/Bettors[0].betsValue[winnerIndex];
                (Bettors[l].playerAddress).transfer(share);
                winnersCount++;
            }
2018-11-1005:12:37 PM - INFO - Code here may be Error:
	for(uint g = 1; g<Bettors.length ;g++){
                
                share=Bettors[g].totalPlayerBet*newBalance/Bettors[0].totalPlayerBet;
                (Bettors[g].playerAddress).transfer(share);
        }
2018-11-1005:12:37 PM - INFO - bettingGenerator.sol
2018-11-1005:12:37 PM - INFO - Code here may be Error:
	for (uint i = 0; i < numwinners; i++) {
      address winner = winnners[i].addr;
      winner.transfer(prize);
      SentPrizeToWinner(winner, prize, guess, _gameindex, lotterynumber, block.timestamp);
    }
2018-11-1005:12:37 PM - INFO - bet_various.sol
2018-11-1005:12:37 PM - INFO - Code here may be Error:
	for (uint i = 0; i < numwinners; i++) {
      address winner = winnners[i].addr;
      winner.transfer(prize);
      SentPrizeToWinner(winner, prize, guess, _gameindex, lotterynumber, block.timestamp);
    }
2018-11-1005:12:37 PM - INFO - bet_various_v2.sol
2018-11-1005:12:38 PM - INFO - Code here may be Error:
	for(uint i = 0 ; i < recipients.length ; i++){
            uint amount = bigbomToken.balanceOf(recipients[i]);
            if (amount > 0){
                //
                transfer(recipients[i], amount);
                TokenDrop( recipients[i], amount );
            }
2018-11-1005:12:38 PM - INFO - BigbomCrowdSale.sol
2018-11-1005:12:38 PM - INFO - Code here may be Error:
	for(uint i = 0 ; i < recipients.length ; i++){
            uint amount = bigbomToken.balanceOf(recipients[i]);
            if (amount > 0){
                //
                transfer(recipients[i], amount);
                TokenDrop( recipients[i], amount );
            }
2018-11-1005:12:38 PM - INFO - BigbomTokenExtended.sol
2018-11-1005:12:39 PM - INFO - Code here may be Error:
	for(uint i = startIndex; i < endIndex; ++i){
        // counting starts at index 1 instead of 0,
        // pls don't worry if you can't figure out why,
        // just don't change it to start from 0
        address holder = addresses[i+1]; 
        // no need for `SafeMath.div()` here
        uint reward = (balances[holder].mul(totalWeiToBeDistributed))/(totalSupply);
        holder.transfer(reward);
      }
2018-11-1005:12:39 PM - INFO - BIKOIN.sol
2018-11-1005:12:39 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:12:39 PM - INFO - Bilibit.sol
2018-11-1005:12:39 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _to.length; i++) {
            transfer(_to[i], _value[i]);
        }
2018-11-1005:12:39 PM - INFO - BILLCRYPT.sol
2018-11-1005:12:39 PM - INFO - Code here may be Error:
	for (uint i = 0; i < raffle_bowl.length; i++)
            { /* Refund their tokens */ 
                if (address_to_tickets[raffle_bowl[i]] != 0)
                {
                    ERC20_CALLS.transfer(raffle_bowl[i], address_to_tickets[raffle_bowl[i]] * ticket_price);
                    address_to_tickets[raffle_bowl[i]] = 0;
                }
2018-11-1005:12:39 PM - INFO - Code here may be Error:
	for (uint i = 0; i < raffle_bowl.length; i++)
        { /* Refund everyone's tokens */ 
            if (address_to_tickets[raffle_bowl[i]] != 0)
            {
                ERC20_CALLS.transfer(raffle_bowl[i], address_to_tickets[raffle_bowl[i]] * ticket_price);
                address_to_tickets[raffle_bowl[i]] = 0;
            }
2018-11-1005:12:39 PM - INFO - BillionaireTokenRaffle.sol
2018-11-1005:12:39 PM - INFO - Code here may be Error:
	for (uint i = 0; i < session.investorCount; i++) {
            if (session.win[i]==result) {
                etherToBuy = (session.amountInvest[i] - session.amountInvest[i] * rateFee / 100) * rateWin / 100;
                uint etherReturn = session.amountInvest[i] - session.amountInvest[i] * rateFee / 100;
                (session.investor[i]).transfer(etherReturn);
            }
2018-11-1005:12:39 PM - INFO - Code here may be Error:
	for (uint i = 0; i < session.investorCount; i++) {
            if (session.win[i]==result) {
                // etherToBuy = (session.amountInvest[i] - session.amountInvest[i] * rateFee / 100) * rateWin / 100;
                // uint etherReturn = session.amountInvest[i] - session.amountInvest[i] * rateFee / 100;
                // (session.investor[i]).transfer(etherReturn);
                nacReturn = (session.amountInvest[i] - session.amountInvest[i] * rateFee / 100) * rateWin / 100;
                require(namiToken.balanceOf(address(this)) >= nacReturn);
                namiToken.transfer(session.investor[i], nacReturn);
                totalNacInPool = totalNacInPool.sub(nacReturn.sub(session.amountInvest[i]));
            }
2018-11-1005:12:39 PM - INFO - BinaryOptionV2.sol
2018-11-1005:12:40 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:12:40 PM - INFO - bitbeb.sol
2018-11-1005:12:40 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _tokens.length; i++) {
      ERC20Basic token = ERC20Basic(_tokens[i]);
      uint256 balance = token.balanceOf(this);
      token.transfer(owner, balance);
    }
2018-11-1005:12:40 PM - INFO - Bitcaritas.sol
2018-11-1005:12:41 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
            _transfer(msg.sender, addresses[i], _value[i]);
        }
2018-11-1005:12:41 PM - INFO - Bitcrore.sol
2018-11-1005:12:44 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < t.destinations.length; i++) {
            tokenTrueUSD.transfer(t.destinations[i], t.balances[t.destinations[i]]);
            emit PayoutProcessed(t.destinations[i], t.balances[t.destinations[i]], t.kind[t.destinations[i]]);
        }
2018-11-1005:12:44 PM - INFO - BitwordsVault.sol
2018-11-1005:12:44 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _to.length; i++) {
                assert(bitx.transfer(_to[i], _value[i]) == true);
            }
2018-11-1005:12:44 PM - INFO - BITXMultiTransfer.sol
2018-11-1005:12:45 PM - INFO - Code here may be Error:
	for(i=0; i<countWinners; i++){
            mirrors[winnerTimestamp][i].transfer(share.mul(9).div(10));
            referral[mirrors[winnerTimestamp][i]].transfer(share.mul(1).div(10));
            emit Payreward(mirrors[winnerTimestamp][i], share);
        }
2018-11-1005:12:45 PM - INFO - Code here may be Error:
	for(i=0; i<countSecondWinners; i++){
            mirrors[secondWinnerTimestamp][i].transfer(share.mul(9).div(10));
            referral[mirrors[secondWinnerTimestamp][i]].transfer(share.mul(1).div(10));
            emit Payreward(mirrors[secondWinnerTimestamp][i], share);
        }
2018-11-1005:12:45 PM - INFO - BlackChain.sol
2018-11-1005:12:45 PM - INFO - Code here may be Error:
	for(idx = 0; idx < owners.length; idx++) {
            owners[idx].recipient.transfer(amount * owners[idx].share / totalShares);
        }
2018-11-1005:12:45 PM - INFO - BlindCroupierTokenDistribution.sol
2018-11-1005:12:46 PM - INFO - Code here may be Error:
	for (uint i = 0; i < winnerGlad.backersList.length; i++) {
		    address backerAddress = winnerGlad.backersList[i];
		    uint valueToPay = winnerGlad.amountPaid[backerAddress] + winnerGlad.amountPaid[backerAddress] * jackpot / winnerGlad.totalAmount;
		    backerAddress.transfer(valueToPay);
	    }
2018-11-1005:12:46 PM - INFO - BlockchainBattleground.sol
2018-11-1005:12:46 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addrs.length; i++) {
      transfer(addrs[i], amount);
    }
2018-11-1005:12:46 PM - INFO - BlockchainFUN.sol
2018-11-1005:12:46 PM - INFO - Code here may be Error:
	for(uint8 i = 0; i < sharesForStock.length; i++) {
      if (i != _shareId) {
        shares[sharesForStock[i]].holder.transfer(dividendPerRecipient);
        stock.dividendsPaid = SafeMath.add(stock.dividendsPaid, dividendPerRecipient);
        DividendPaid(
          shares[sharesForStock[i]].holder,
          dividendPerRecipient
        );
      }
2018-11-1005:12:46 PM - INFO - BlockMarket.sol
2018-11-1005:12:46 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:12:46 PM - INFO - BlockMobaToken.sol
2018-11-1005:12:47 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < dests.length; i++) {
            token.transfer(dests[i], values[i].mul(multiplier));
        }
2018-11-1005:12:47 PM - INFO - BlockportAirdropper.sol
2018-11-1005:12:48 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:12:48 PM - INFO - BMCPlatform.sol
2018-11-1005:12:49 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < count; i++) {
            transfer(_holders [i], paySize);
			airdropSupply = airdropSupply.add(paySize);
        }
2018-11-1005:12:49 PM - INFO - BoLuoPay.sol
2018-11-1005:12:49 PM - INFO - Code here may be Error:
	for (uint i = 0; i < recievers.length; i ++) {
            transfer(recievers[i], 777);
        }
2018-11-1005:12:49 PM - INFO - BonumPromoToken.sol
2018-11-1005:12:49 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _addresses.length; i++) {
         transfersAreLocked = false;
         require(transfer(_addresses[i], _value[i] * decimalFactor));
         transfersAreLocked = true;
     }
2018-11-1005:12:49 PM - INFO - BoonTech.sol
2018-11-1005:12:50 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; _addresses.length; i++) {&#13;      transfer(_addresses[i], _amounts[i]);&#13;    }
2018-11-1005:12:50 PM - INFO - BotCoin.sol
2018-11-1005:12:50 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
            require(token.transfer(addresses[i], amounts[i]));
        }
2018-11-1005:12:50 PM - INFO - Bounty0x.sol
2018-11-1005:12:50 PM - INFO - Code here may be Error:
	for (uint i = 0; i < preSaleInvestors.length; i++) {
            address investorAddress = preSaleInvestors[i];

            // the deployed presale contract tracked the balance of each contributor
            uint weiContributed = deployedPresaleContract.balanceOf(investorAddress);

            // they contributed and haven't been paid
            if (weiContributed > 0 && tokensPaid[investorAddress] == 0) {
                // convert the amount of wei they contributed to the bnty
                uint bntyCompensation = Math.min256(weiToBnty(weiContributed), bounty0xToken.balanceOf(this));

                // mark them paid first
                tokensPaid[investorAddress] = bntyCompensation;

                // transfer tokens to presale contributor address
                require(bounty0xToken.transfer(investorAddress, bntyCompensation));

                // log the event
                OnPreSaleBuyerCompensated(investorAddress, bntyCompensation);
            }
2018-11-1005:12:50 PM - INFO - Bounty0xCrowdsale.sol
2018-11-1005:12:50 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _hunters.length; i++) {
            require(ERC20(_token).transfer(_hunters[i], _amounts[i]));

            Distribution(_token, _host, _hunters[i], _amounts[i], uint64(now));
        }
2018-11-1005:12:50 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _hunters.length; i++) {
            require(ERC20(_token).transfer(_hunters[i], _amounts[i]));

            Distribution(_token, this, _hunters[i], _amounts[i], uint64(now));
        }
2018-11-1005:12:50 PM - INFO - Bounty0xEscrow.sol
2018-11-1005:12:50 PM - INFO - Code here may be Error:
	for (uint i = 0; i < preSaleInvestors.length; i++) {
            address investorAddress = preSaleInvestors[i];

            // the deployed presale contract tracked the balance of each contributor
            uint weiContributed = deployedPresaleContract.balanceOf(investorAddress);

            // they contributed and haven't been paid
            if (weiContributed > 0 && tokensPaid[investorAddress] == 0) {
                // convert the amount of wei they contributed to the bnty
                uint bntyCompensation = Math.min256(weiToBnty(weiContributed), bounty0xToken.balanceOf(this));

                // mark them paid first
                tokensPaid[investorAddress] = bntyCompensation;

                // transfer tokens to presale contributor address
                require(bounty0xToken.transfer(investorAddress, bntyCompensation));

                // log the event
                OnPreSaleBuyerCompensated(investorAddress, bntyCompensation);
            }
2018-11-1005:12:50 PM - INFO - Bounty0xPresaleDistributor.sol
2018-11-1005:12:50 PM - INFO - Code here may be Error:
	for (uint i = 0; i < preSaleInvestors.length; i++) {
            address investorAddress = preSaleInvestors[i];

            // the deployed presale contract tracked the balance of each contributor
            uint weiContributed = deployedPresaleContract.balanceOf(investorAddress);

            // they contributed and haven't been paid
            if (weiContributed > 0 && tokensPaid[investorAddress] == 0) {
                // convert the amount of wei they contributed to the bnty
                uint bntyCompensation = Math.min256(weiToBnty(weiContributed), bounty0xToken.balanceOf(this));

                // mark them paid first
                tokensPaid[investorAddress] = bntyCompensation;

                // transfer tokens to presale contributor address
                require(bounty0xToken.transfer(investorAddress, bntyCompensation));

                // log the event
                OnPreSaleBuyerCompensated(investorAddress, bntyCompensation);
            }
2018-11-1005:12:50 PM - INFO - Bounty0xReserveHolder.sol
2018-11-1005:12:50 PM - INFO - Code here may be Error:
	for (uint i = 0; i < preSaleInvestors.length; i++) {
            address investorAddress = preSaleInvestors[i];

            // the deployed presale contract tracked the balance of each contributor
            uint weiContributed = deployedPresaleContract.balanceOf(investorAddress);

            // they contributed and haven't been paid
            if (weiContributed > 0 && tokensPaid[investorAddress] == 0) {
                // convert the amount of wei they contributed to the bnty
                uint bntyCompensation = Math.min256(weiToBnty(weiContributed), bounty0xToken.balanceOf(this));

                // mark them paid first
                tokensPaid[investorAddress] = bntyCompensation;

                // transfer tokens to presale contributor address
                require(bounty0xToken.transfer(investorAddress, bntyCompensation));

                // log the event
                OnPreSaleBuyerCompensated(investorAddress, bntyCompensation);
            }
2018-11-1005:12:50 PM - INFO - Bounty0xToken.sol
2018-11-1005:12:50 PM - INFO - Code here may be Error:
	for (i = 0; i < _users.length; i++) {
            _users[i].transfer(_rewards[i]);
            RewardStatus("Reward sent", bounty.id, _users[i], _rewards[i]);
            /* if (_users[i].send(_rewards[i])) {
                bounty.remainingBounty -= _rewards[i];
                RewardStatus('Reward sent', bounty.id, _users[i], _rewards[i]);
            }
2018-11-1005:12:50 PM - INFO - BountyBG.sol
2018-11-1005:12:50 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _to.length; i++) {
            token.transfer(_to[i], _value[i]);
        }
2018-11-1005:12:50 PM - INFO - BountyDistribute.sol
2018-11-1005:12:51 PM - INFO - Code here may be Error:
	for (uint _i = 0; _i < _numAllocations; _i++) {
      // attempt to unlock the reward
      var (_shouldReward, _to, _amount) = lockup.unlock(_i);
      // if the beneficiary should be rewarded, send them tokens
      if (_shouldReward) {
        token.transfer(_to, _amount);
      }
2018-11-1005:12:51 PM - INFO - BRDCrowdsale.sol
2018-11-1005:12:52 PM - INFO - Code here may be Error:
	for (uint i = 0; i < cascades.length; i++) {
            uint cascadeTotal = getCascadeTotal(cascades[i].percentage, totalJackpot);

            // Should be safe from re-entry given gas limit of 2300.
            cascades[i].cascade.transfer(cascadeTotal);
        }
2018-11-1005:12:52 PM - INFO - Code here may be Error:
	for (uint i = 0; i < ticketHolders.length; i++) {
      TicketHolder storage holder = ticketHolders[i];
      holder.purchaser.transfer(uint256(holder.count).mul(ticketPrice));
    }
2018-11-1005:12:52 PM - INFO - BronzeRaffle.sol
2018-11-1005:12:52 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
            token.transfer(_addresses[i], amount);
        }
2018-11-1005:12:52 PM - INFO - BTB.sol
2018-11-1005:12:52 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts);
        }
2018-11-1005:12:52 PM - INFO - BTC2.sol
2018-11-1005:12:54 PM - INFO - Code here may be Error:
	for (uint i = 0; i < staff.length; i++) {
            bytes b = bytes(staff[i]);
            address s = bytesToAddress(b);
            uint value = staffETH[i];
            if (value > 0) {
                s.transfer(value);
                Transfer(s, value);
            }
2018-11-1005:12:54 PM - INFO - BuckySalary.sol
2018-11-1005:12:54 PM - INFO - Code here may be Error:
	for (i; i < _contributors.length; i++) {
            require(total >= _balances[i]);
            total = total.sub(_balances[i]);
            _contributors[i].transfer(_balances[i]);
        }
2018-11-1005:12:54 PM - INFO - BulkAirdrop.sol
2018-11-1005:12:54 PM - INFO - Code here may be Error:
	for(uint i = 0; i<premineWallets.length;i++) {
          transfer(premineWallets[i],premineOf[premineWallets[i]]);
        }
2018-11-1005:12:54 PM - INFO - Bulleon.sol
2018-11-1005:12:54 PM - INFO - Code here may be Error:
	for(uint i = 0; i<premineWallets.length;i++) {
          transfer(premineWallets[i],premineOf[premineWallets[i]]);
        }
2018-11-1005:12:54 PM - INFO - BulleonICO.sol
2018-11-1005:12:54 PM - INFO - Code here may be Error:
	for (uint i=0; i &lt; getRabbitMotherSumm(_mother); i++) {&#13;                if (rabbitMother[_mother][i] != 0) { &#13;                    uint32 _parrentMother = rabbitMother[_mother][i];&#13;                    address add = rabbitToOwner[_parrentMother];&#13;                    // pay salaries&#13;                    setMotherCount(_parrentMother);&#13;                    totalSalaryBunny[_parrentMother] += pastMoney;&#13;&#13;                    emit SalaryBunny(_parrentMother, totalSalaryBunny[_parrentMother]);&#13;&#13;                    add.transfer(pastMoney); // refund previous bidder&#13;                }
2018-11-1005:12:54 PM - INFO - BunnyGame.sol
2018-11-1005:12:55 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:12:55 PM - INFO - Buyback.sol
2018-11-1005:12:56 PM - INFO - Code here may be Error:
	for (uint i=0; i < receivers.length; i++) {
            require(BZRxToken(bZRxTokenContractAddress).transfer(
                receivers[i],
                tokenAmounts[i]
            ));
            tokensSent += tokenAmounts[i];
        }
2018-11-1005:12:56 PM - INFO - BZRxAirDrop.sol
2018-11-1005:12:57 PM - INFO - Code here may be Error:
	for (uint256 i=0; i<_tos.length; i++) {
            if(!transfer(_tos[i], _value)) {
                revert();
            }
2018-11-1005:12:57 PM - INFO - CADV.sol
2018-11-1005:12:58 PM - INFO - Code here may be Error:
	for(uint i=0; i<_user.length; i++)
        token.transfer(_user[i], value*10**18);
        return true;
    }
	
	function sendIndividualAmount(address[] _user, uint256[] value) isOwner public returns(bool){
        for(uint i=0; i<_user.length; i++)
        token.transfer(_user[i], value[i]*10**18);
        return true;
    }
2018-11-1005:12:58 PM - INFO - Campaigns.sol
2018-11-1005:12:58 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < _addresses.length; i++){
            LBC.transfer(_addresses[i], _value[i]);
        }
2018-11-1005:12:58 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < _addresses.length; i++){
            LBC.transfer(_addresses[i], _amount);
        }
2018-11-1005:12:58 PM - INFO - CandyLBC.sol
2018-11-1005:12:59 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < _userWallet.length; i++) {
			if (!distributedFirst[_userWallet[i]]) {
				uint _call = call[i] * 10 ** 18;
				uint _callg = _call.mul(200);
				distributedFirst[_userWallet[i]] = true;
				require(token_call.transfer(_userWallet[i], _call));
				require(token_callg.transfer(_userWallet[i], _callg));
				sentFirst = sentFirst.add(_call);
				emit DistributeFirst(_userWallet[i], _call, _callg);
			}
2018-11-1005:12:59 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < _userWallet.length; i++) {
			if (!distributedSecond[_userWallet[i]]) {
				uint _call = call[i] * 10 ** 18;
				uint _callg = _call.mul(200);
				distributedSecond[_userWallet[i]] = true;
				require(token_call.transfer(_userWallet[i], _call));
				require(token_callg.transfer(_userWallet[i], _callg));
				sentSecond = sentSecond.add(_call);
				emit DistributeSecond(_userWallet[i], _call, _callg);
			}
2018-11-1005:12:59 PM - INFO - CapitalBountyDelivery.sol
2018-11-1005:12:59 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _tokens.length; i++) {
        ERC20 token = ERC20(_tokens[i]);
        uint tokenBalance = token.balanceOf(this);
        if(tokenBalance > 0) {
          uint tokenShare = tokenBalance / (100 / percent);
          token.transfer(company, tokenShare);
          uint tokenWithdrawal = token.balanceOf(this);
          token.transfer(recipient, tokenWithdrawal);
          TokenWithdrawal(_tokens[i], tokenWithdrawal);
        }
2018-11-1005:12:59 PM - INFO - Capsule.sol
2018-11-1005:12:59 PM - INFO - Code here may be Error:
	for (uint i = 0; i < ids.length; i++) {
            transfer(to, ids[i]);
        }
2018-11-1005:12:59 PM - INFO - CardIntegration.sol
2018-11-1005:12:59 PM - INFO - Code here may be Error:
	for (uint i = 0; i < ids.length; i++) {
            transfer(to, ids[i]);
        }
2018-11-1005:12:59 PM - INFO - CardMigration.sol
2018-11-1005:13:00 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < to.length; i++) {
      token.transfer(to[i], value[i]);
    }
2018-11-1005:13:00 PM - INFO - CaruTokenSender.sol
2018-11-1005:13:01 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:13:01 PM - INFO - CAVPlatform.sol
2018-11-1005:13:02 PM - INFO - Code here may be Error:
	for(uint8 i=0;i<8;i++){
			tempBalance = tokens[i].balanceOf(this);
            tempBalance = tempBalance.mul(factor);
            tempBalance = tempBalance.div(1e5);
			tempFee = tempBalance.mul(5);
			tempFee = tempFee.div(1000); //0.5%
			tempBalance = tempBalance.sub(tempFee);
			tokens[i].transfer(feeWallet,tempFee);
			tokens[i].transfer(_target,tempBalance);
		}
2018-11-1005:13:02 PM - INFO - CDMED.sol
2018-11-1005:13:04 PM - INFO - Code here may be Error:
	for (uint i = 0; i < bits.length; i++) {
            address a = address(bits[i] >> 96);
            uint amount = bits[i] & ((1 << 96) - 1);
            if (!transfer(a, amount)) revert();
        }
2018-11-1005:13:04 PM - INFO - ChainLedger.sol
2018-11-1005:13:05 PM - INFO - Code here may be Error:
	for (uint i = 0; i < majorityJurors.length; i++) {
        require(Token(token).transfer(majorityJurors[i], witnessJuryAmount / majorityJurors.length));
      }
2018-11-1005:13:05 PM - INFO - ChallengeFactory.sol
2018-11-1005:13:05 PM - INFO - Code here may be Error:
	for (uint i = 0; i < players.length; i++) {
      players[i].transfer(playerInfo[players[i]].betAmount);
      LogRefund(players[i], playerInfo[players[i]].betAmount);
    }
2018-11-1005:13:05 PM - INFO - ChampionSimple.sol
2018-11-1005:13:06 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _tos.length; i++) {
            require(transfer(_tos[i], _tokens[i]));
        }
2018-11-1005:13:06 PM - INFO - CHFToken.sol
2018-11-1005:13:06 PM - INFO - Code here may be Error:
	for (uint256 i=1; i < y; i++)
                z = mul(z,x);
            return (z);
        }
    }
    
}


contract ERC20Interface {
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
    function withdraw() public;

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}
2018-11-1005:13:06 PM - INFO - ChickenMarket.sol
2018-11-1005:13:07 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:13:07 PM - INFO - ChuangfuBlockchain.sol
2018-11-1005:13:07 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _values.length; i++) {
            require(transfer(_recipients[i], _values[i]));
        }
2018-11-1005:13:07 PM - INFO - CHXToken.sol
2018-11-1005:13:07 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _values.length; i++) {
            require(transfer(_recipients[i], _values[i]));
        }
2018-11-1005:13:07 PM - INFO - CHXTokenSale.sol
2018-11-1005:13:07 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
                transfer(_toAddresses[i], _amounts[i]);
            }
2018-11-1005:13:07 PM - INFO - CiderZero.sol
2018-11-1005:13:08 PM - INFO - Code here may be Error:
	for( uint i = 0 ; i < recipients.length ; i++ ) {
        myToken.transfer( recipients[i], amount);
        TokenDrop( recipients[i], amount );
    }
2018-11-1005:13:08 PM - INFO - ClassyCoinAirdrop.sol
2018-11-1005:13:09 PM - INFO - Code here may be Error:
	for (i = 0; i < _chunkLength; i++) {
      address _refundee = refundeesList[i];
      RefundeeRecord storage _data = refundees[_refundee];
      if (_data.isRefunded == false) {
        if (depositsOf(_refundee) > _txFee) {
          uint256 _deposit = depositsOf(_refundee);
          if (_deposit > _txFee) {
            _weiRefunded = _weiRefunded.add(_deposit);
            uint256 _paymentWithoutTxFee = _deposit.sub(_txFee);
            _refundee.transfer(_paymentWithoutTxFee);
            emit Withdrawn(_refundee, _paymentWithoutTxFee);
            _data.isRefunded = true;
            _refundeesListCopy[i] = _refundee;
          }
2018-11-1005:13:09 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:13:09 PM - INFO - ClinicAllCrowdsale.sol
2018-11-1005:13:09 PM - INFO - Code here may be Error:
	for (i = 0; i < _chunkLength; i++) {
      address _refundee = refundeesList[i];
      RefundeeRecord storage _data = refundees[_refundee];
      if (_data.isRefunded == false) {
        if (depositsOf(_refundee) > _txFee) {
          uint256 _deposit = depositsOf(_refundee);
          if (_deposit > _txFee) {
            _weiRefunded = _weiRefunded.add(_deposit);
            uint256 _paymentWithoutTxFee = _deposit.sub(_txFee);
            _refundee.transfer(_paymentWithoutTxFee);
            emit Withdrawn(_refundee, _paymentWithoutTxFee);
            _data.isRefunded = true;
            _refundeesListCopy[i] = _refundee;
          }
2018-11-1005:13:09 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:13:09 PM - INFO - ClinicAllRefundEscrow.sol
2018-11-1005:13:09 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:13:09 PM - INFO - ClinicAllToken.sol
2018-11-1005:13:09 PM - INFO - Code here may be Error:
	for (uint i = 0; i < length; i++) {
            require(transfer(
                _recipients[i], 
                _values[i]
            ));
        }
2018-11-1005:13:09 PM - INFO - CMAToken.sol
2018-11-1005:13:10 PM - INFO - Code here may be Error:
	for(i=0; i< total; i++)
        {
            
            uint256 amounttotransfer = base.mul(shares[members[i]]);
            members[i].transfer(amounttotransfer);
            
        }
2018-11-1005:13:10 PM - INFO - Coallition.sol
2018-11-1005:13:12 PM - INFO - Code here may be Error:
	for (uint i = 0; i < recipients.length; i++) {
            transfer(recipients[i], amounts[i]);
        }
2018-11-1005:13:12 PM - INFO - CoinmakeToken.sol
2018-11-1005:13:12 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:13:12 PM - INFO - ColloidalSilver.sol
2018-11-1005:13:13 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < recipients.length; i++) {
            transfer(recipients[i], values[i]);
        }
2018-11-1005:13:13 PM - INFO - ComBoxToken.sol
2018-11-1005:13:13 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
        _transfer(msg.sender, addresses[i], _value[i] * 10 ** uint256(decimals), empty);
        }
2018-11-1005:13:13 PM - INFO - ComfixedToken.sol
2018-11-1005:13:13 PM - INFO - Code here may be Error:
	for (uint i = 0; i < txFeeAddresses.length; i++) {
				uint256 txFeeToSendInWei = msg.value.mul(txFeeNumerator[i]).div(txFeeDenominator);
				if (txFeeToSendInWei > 0) {
					txFeeSentInWei = txFeeSentInWei.add(txFeeToSendInWei);
					fundsToTransfer = fundsToTransfer.sub(txFeeToSendInWei);
					txFeeAddresses[i].transfer(txFeeToSendInWei);
				}
2018-11-1005:13:13 PM - INFO - Commission.sol
2018-11-1005:13:13 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < oracles.length; i++) {
            OracleI oracle = OracleI(oracles[i]);
            uint callPrice = oracle.getPrice();
            
            // If oracle needs funds - refill it
            if (oracles[i].balance < callPrice) {
                value = value.sub(callPrice);
                oracles[i].transfer(callPrice);
            }
2018-11-1005:13:13 PM - INFO - ComplexExchanger.sol
2018-11-1005:13:14 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:13:14 PM - INFO - CONTSKCrowdsale.sol
2018-11-1005:13:15 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _offeredCardIds.length; i++) {
      copaCore.transfer(_buyer, _offeredCardIds[i], _offeredCardCounts[i]);
    }
2018-11-1005:13:15 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _offeredCardIds.length; i++) {
      copaCore.transfer(_seller, _offeredCardIds[i], _offeredCardCounts[i]);
    }
2018-11-1005:13:15 PM - INFO - CopaCore.sol
2018-11-1005:13:15 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _offeredCardIds.length; i++) {
      copaCore.transfer(_buyer, _offeredCardIds[i], _offeredCardCounts[i]);
    }
2018-11-1005:13:15 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _offeredCardIds.length; i++) {
      copaCore.transfer(_seller, _offeredCardIds[i], _offeredCardCounts[i]);
    }
2018-11-1005:13:15 PM - INFO - CopaMarket.sol
2018-11-1005:13:15 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < 10; i++) {
            if (_addressNotNull(_owners[i])) {
                _owners[i].transfer(_price.mul(_chainFees[i]).div(1000));
            }
2018-11-1005:13:15 PM - INFO - CoreContract.sol
2018-11-1005:13:18 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < addresses.length; i++) {
				address addr=addresses[i];
	    		if (!ideas[index].reclaimed[addr])    { 
	        		uint256 reclaimAmount=ideas[index].amountPledged[addr];
		    		if (reclaimAmount>0)    { 
		    			ideas[index].reclaimed[addr]=true; 
		        		emit UserRegainedAmountAtIndex(addr,reclaimAmount,index);
		        		if(! token(ideas[index].tokenAddress).transfer(addr,reclaimAmount)) revert();
		    		}
2018-11-1005:13:18 PM - INFO - crowdfund.sol
2018-11-1005:13:18 PM - INFO - Code here may be Error:
	for (uint i = 0; i < fiatInvestors.length; i++) {
            address investorAddress = fiatInvestors[i];
            uint investorShare = fiatInvestorShare[investorAddress];
            uint investorAmount = div(mul(balance, investorShare), 1000000);
            investorAddress.transfer(investorAmount);
            amount -= investorAmount;
        }
2018-11-1005:13:18 PM - INFO - CrowdFunder.sol
2018-11-1005:13:18 PM - INFO - Code here may be Error:
	for(uint i=0; i < mainReadyToSendAddress.length ; i++){
      address backerAddress = mainReadyToSendAddress[i];
      uint coinReadyToSend = mainBackers[backerAddress].coinReadyToSend;
      if ( coinReadyToSend > 0) {
        mainBackers[backerAddress].coinReadyToSend = 0;
        coin.transfer(backerAddress, coinReadyToSend);
        LogCoinsEmited(backerAddress, coinReadyToSend);
      }
2018-11-1005:13:18 PM - INFO - CrowdsaleMain.sol
2018-11-1005:13:18 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addr.length; i++) {
            transfer(addr[i], token[i] * (10 ** decimals));
        }
2018-11-1005:13:18 PM - INFO - Code here may be Error:
	for (uint i = 0; i < beneficiaries.length; i++) {
            Beneficiary storage beneficiary = beneficiaries[i];
            uint256 value = (receiveWei * beneficiary.ratio)/(1000);
            beneficiary.addr.transfer(value);
        }
2018-11-1005:13:18 PM - INFO - CrowdSales.sol
2018-11-1005:13:18 PM - INFO - Code here may be Error:
	for (uint i = 0; i < preSaleInvestors.length; i++) {
            address investorAddress = preSaleInvestors[i];

            // the deployed presale contract tracked the balance of each contributor
            uint weiContributed = deployedPresaleContract.balanceOf(investorAddress);

            // they contributed and haven't been paid
            if (weiContributed > 0 && tokensPaid[investorAddress] == 0) {
                // convert the amount of wei they contributed to the bnty
                uint bntyCompensation = Math.min256(weiToBnty(weiContributed), bounty0xToken.balanceOf(this));

                // mark them paid first
                tokensPaid[investorAddress] = bntyCompensation;

                // transfer tokens to presale contributor address
                require(bounty0xToken.transfer(investorAddress, bntyCompensation));

                // log the event
                OnPreSaleBuyerCompensated(investorAddress, bntyCompensation);
            }
2018-11-1005:13:18 PM - INFO - CrowdsaleTokenController.sol
2018-11-1005:13:19 PM - INFO - Code here may be Error:
	for (uint index = 0; index &lt; _addresses.length; index++) {&#13;            address addr = _addresses[index];&#13;            uint amount = balances[addr];&#13;            if (amount &gt; 0) {&#13;                balances[addr] = 0;&#13;                cryptaurToken.transfer(addr, amount);&#13;                Withdraw(addr, amount);&#13;            }
2018-11-1005:13:19 PM - INFO - CryptaurDepository.sol
2018-11-1005:13:19 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _winner.length; i++) {
     _winner[i].transfer(_value[i]);
     emit Won(_winner[i], _value[i]);
    }
2018-11-1005:13:19 PM - INFO - CryptoBeautyVoting.sol
2018-11-1005:13:20 PM - INFO - Code here may be Error:
	for (uint i=len-2; i>=0; i--) {
            if (i > len-5){
                cars[_cardId].ownerAddresses[i].transfer(commission2percent);
                commissionOwner = commissionOwner - commission2percent;
            }
2018-11-1005:13:20 PM - INFO - CryptoflipCar.sol
2018-11-1005:13:21 PM - INFO - Code here may be Error:
	for(uint8 i=0;i<10;i++){
        tokenIndexToOwner[packs[packId].tokens[i]]=msg.sender;
        _transfer(0, msg.sender, packs[packId].tokens[i]);
      }
2018-11-1005:13:21 PM - INFO - Cryptogs.sol
2018-11-1005:13:21 PM - INFO - Code here may be Error:
	for (uint256 i=1; i < y; i++)
        z = mul(z,x);
      return (z);
    }
  }
}

// File: contracts/utils/ERC20Interface.sol

/**
 * @title ERC20
 */
interface ERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function allowance(address owner, address spender) external view returns (uint256);
  function transferFrom(address from, address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
}
2018-11-1005:13:21 PM - INFO - CryptoHeroRocket.sol
2018-11-1005:13:22 PM - INFO - Code here may be Error:
	for (uint i = 0; i &lt; _scene.stars.length; i++) {&#13;        address _pornstarOwner;&#13;        (_pornstarOwner) = pornstarsContract.ownerOf(_scene.stars[i]);&#13;        &#13;        if(_isGoodAddress(_pornstarOwner)) {&#13;            _pornstarOwner.transfer(fee);&#13;        }
2018-11-1005:13:22 PM - INFO - CryptoPornstarAward.sol
2018-11-1005:13:22 PM - INFO - Code here may be Error:
	for(uint i = 0 ;i< players.length;i++){
            
            address player = players[i];
            
            uint256 selfbalance = selfcommission[msg.sender] + selfharvest[msg.sender] + selfpotprofit[msg.sender];
            
            uint256 endreward = reward.mul(42).div(100).mul(selfvotes[player]).div(rounds[roundid].tickets);
            
            selfcommission[player] = 0;
         
            selfharvest[player] = 0;
         
            selfpotprofit[player] = 0;
            
            selfvoteamount[player] = 0;
            
            selfvotes[player] = 0;
            
            player.transfer(endreward.add(selfbalance));
        }
2018-11-1005:13:22 PM - INFO - Cryptorank.sol
2018-11-1005:13:23 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:13:23 PM - INFO - CryptoSilver.sol
2018-11-1005:13:23 PM - INFO - Code here may be Error:
	for(i=0; i < tasks[taskID].votesTotal; i++) {
                if(tasks[taskID].votes[i] == 2) {
                    tokenContract.transfer(tasks[taskID].voters[i], reviewerReward);
                }
2018-11-1005:13:23 PM - INFO - Code here may be Error:
	for(i=0; i < tasks[taskID].votesTotal; i++) {
                    if(tasks[taskID].votes[i] == 1) {
                        tokenContract.transfer(tasks[taskID].voters[i], reviewerReward);
                    }
2018-11-1005:13:23 PM - INFO - CryptoTask.sol
2018-11-1005:13:23 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < numDividends; i++) {
        dividendRecipient = ownerOf(
          i == descendants.length ? thing.parentId : descendants[i]
        );
        dividendRecipient.transfer(dividendPerRecipient);
        DividendPaid(dividendRecipient, dividendPerRecipient);
      }
2018-11-1005:13:23 PM - INFO - CryptoThingWithDescendants.sol
2018-11-1005:13:23 PM - INFO - Code here may be Error:
	for (uint i = 0; i &lt; itemIds.length; i++) {&#13;			uint itemId = itemIds[i];&#13;			Item storage item = items[itemId];&#13;			require(isBox(item));&#13;&#13;			transfer(this, itemId);&#13;&#13;			if (item.typeId == ItemType.VRCBox) {&#13;				vrc.transferFrom(vrcWallet, msg.sender, item.amount * vrcCount / weiRaised);&#13;			}
2018-11-1005:13:23 PM - INFO - CryptoversePreorder.sol
2018-11-1005:13:24 PM - INFO - Code here may be Error:
	for(uint winList = 0; winList < winners.length; winList++){
          winners[winList].transfer(bonusETH.div(64));
          balances[winners[winList]] = balances[winners[winList]] + amount;
          bonusETH -= bonusETH.div(64);
            if (balances[dropWallet] >= amount) {
            balances[dropWallet] = balances[dropWallet] - amount;
            balances[winners[winList]] = balances[winners[winList]] + bonusCRS.div(64);
            bonusCRS -= bonusCRS.div(64);
              }
2018-11-1005:13:24 PM - INFO - CrystalReignShard.sol
2018-11-1005:13:24 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
            sendTokens(addresses[i], drop);
            cslToken.transfer(addresses[i], drop);
        }
2018-11-1005:13:24 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
            sendTokens(addresses[i], amount);
            cslToken.transfer(addresses[i], amount);
        }
2018-11-1005:13:24 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < addresses.length; i++) {
            sendTokens(addresses[i], amounts[i]);
            cslToken.transfer(addresses[i], amounts[i]);
        }
2018-11-1005:13:24 PM - INFO - CslTokenDistribution.sol
2018-11-1005:13:24 PM - INFO - Code here may be Error:
	for (uint32 i = 0; i < _tokenIds.length; i++) {

        uint32 _tokenId = _tokenIds[i];

        // Check for approval and valid ownership
        require(_approvedFor(_to, _tokenId));
        require(_owns(_from, _tokenId));

        // Validate the sender
        require(_owns(msg.sender, _tokenId) || // sender owns the token
        (msg.sender == playerTokenToApproved[_tokenId]) || // sender is the approved address
        operators[_from][msg.sender]); // sender is an authorized operator for this token

        // Reassign ownership, clear pending approvals (not necessary here),
        // and emit Transfer event.
        _transfer(_from, _to, _tokenId);
    }
2018-11-1005:13:24 PM - INFO - Code here may be Error:
	for (uint32 i = 0; i < _tokenIds.length; i++) {

      uint32 _tokenId = _tokenIds[i];

      // Only an owner can transfer the token.
      require(_owns(_owner, _tokenId));

      // Reassign ownership, clear pending approvals (not necessary here),
      // and emit Transfer event.
      _transfer(_owner, teamContract, _tokenId);
    }
2018-11-1005:13:24 PM - INFO - CSportsCore.sol
2018-11-1005:13:24 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
            require(transfer(_addresses[i], _value[i]));
        }
2018-11-1005:13:24 PM - INFO - CSPTToken.sol
2018-11-1005:13:25 PM - INFO - Code here may be Error:
	for (uint i = 0; i < WIN_CUTOFF; i++) {
            sendTo = betAddressArray[i];
            sendTo.transfer(amount);
            pot = pot.sub(amount);
        }
2018-11-1005:13:25 PM - INFO - Cthulooo.sol
2018-11-1005:13:25 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:13:25 PM - INFO - CToken.sol
2018-11-1005:13:25 PM - INFO - Code here may be Error:
	for(uint i=countInvestorsRefunded.Add(1); i <= batchSize; i++){
            address investorAddress = investorList[i];
            Investor storage investorStruct = investors[investorAddress];
            //If purchase has been made during CrowdSale
            if(investorStruct.tokensPurchased > 0 && investorStruct.tokensPurchased <= balances[investorAddress]){
                //return everything
                investorAddress.transfer(investorStruct.weiReceived);
                //Reduce totalWeiReceived
                totalWeiReceived = totalWeiReceived.Sub(investorStruct.weiReceived);
                //Update totalSupply
                totalSupply = totalSupply.Sub(investorStruct.tokensPurchased);
                // reduce balances
                balances[investorAddress] = balances[investorAddress].Sub(investorStruct.tokensPurchased);
                //set everything to zero after transfer successful
                investorStruct.weiReceived = 0;
                investorStruct.tokensPurchased = 0;
                investorStruct.refunded = true;
            }
2018-11-1005:13:25 PM - INFO - CTV.sol
2018-11-1005:13:26 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < hl; i++) {
            transfer(_holders[i], _payments[i]);
        }
2018-11-1005:13:26 PM - INFO - customCoin.sol
2018-11-1005:13:26 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < hl; i++) {
            transfer(_holders[i], _payments[i]);
        }
2018-11-1005:13:26 PM - INFO - CustomcoinCrowdsale.sol
2018-11-1005:13:26 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _addrs.length; i++) {
            if(_addrs[i] != address(0)) {
                token.transfer(_addrs[i], _value * (10 ** 18));
            }
2018-11-1005:13:26 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < _addrs.length; i++) {
            _addrs[i].transfer(_values[i]);
        }
2018-11-1005:13:26 PM - INFO - CustomContract.sol
2018-11-1005:13:26 PM - INFO - Code here may be Error:
	for (uint i = 0; i < to.length; i++)
        {
            transfer(to[i], tokens[i]);
        }
2018-11-1005:13:26 PM - INFO - CuteCoin.sol
2018-11-1005:13:27 PM - INFO - Code here may be Error:
	for( uint i = 0 ; i < recipients.length ; i++ ) {
        myToken.transfer( recipients[i], amount);
        emit TokenDrop( recipients[i], amount );
    }
2018-11-1005:13:27 PM - INFO - CYMTAirdrop.sol
2018-11-1005:13:28 PM - INFO - Code here may be Error:
	for(uint i=0; i&lt;participants.length; i++)&#13;    {&#13;        if (participants[i].answer_id == _answerId) {&#13;            if (participants[i].user_address != address(this)) {&#13;                participants[i].user_address.transfer(paymentPerParticipant);&#13;            }
2018-11-1005:13:28 PM - INFO - DailyEtherToken.sol
2018-11-1005:13:28 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _addrs.length; i++) {
            if(_addrs[i] != address(0) && ethBalanceOf[_addrs[i]] > 0) {
                uint256 toRefund = ethBalanceOf[_addrs[i]];
                ethBalanceOf[_addrs[i]] = 0;
                _addrs[i].transfer(toRefund);
                RefundIssued(_addrs[i], toRefund);
            }
2018-11-1005:13:28 PM - INFO - DappleAirdrops.sol
2018-11-1005:13:29 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:13:29 PM - INFO - DataController.sol
2018-11-1005:13:29 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:13:29 PM - INFO - DataExchange.sol
2018-11-1005:13:30 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < arrayLength; i++) {
            transfer(_tos[i], _values[i]);
        }
2018-11-1005:13:30 PM - INFO - DatEatToken.sol
2018-11-1005:13:30 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
         token.transfer(addresses[i], amounts[i]);
     }
2018-11-1005:13:30 PM - INFO - DatumTokenDistributor.sol
2018-11-1005:13:31 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:13:31 PM - INFO - DCETToken.sol
2018-11-1005:13:31 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _values.length; i++) {
            _token.transfer(_recipients[i], _values[i]);
        }
2018-11-1005:13:31 PM - INFO - DCorpAirdropper.sol
2018-11-1005:13:31 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
            transfer(addresses[i], values[i]);
        }
2018-11-1005:13:31 PM - INFO - DCVToken.sol
2018-11-1005:13:31 PM - INFO - Code here may be Error:
	for (var i = 0; i < amount.length; i++) {
           token.transfer(_routerOwners[i], safeDiv(safeMul(amount[i], 95), 100)); 
        }
2018-11-1005:13:31 PM - INFO - Deal.sol
2018-11-1005:13:31 PM - INFO - Code here may be Error:
	for(i = 0; i < _sortedTeams.length; i++) {
            // Make sure all teams are included in _sortedTeams array
            // (i.e. the array should contain unique elements)
            require(teams[_sortedTeams[i]].submittedByAdmin);

            uint _prizeAmount = totalContribution / prizePoolDivider;

            if(teams[_sortedTeams[i]].rewardEligible && !teams[_sortedTeams[i]].disqualified) {
                _sortedTeams[i].transfer(_prizeAmount);
                teams[_sortedTeams[i]].reward = _prizeAmount;
                prizePoolDivider *= 2;
                PrizePaid(teams[_sortedTeams[i]].name, _prizeAmount);
            }
2018-11-1005:13:31 PM - INFO - Code here may be Error:
	for(uint i = i; i < sponsors.length; i++) {
            sponsors[i].ethAddress.transfer(sponsors[i].contribution);
        }
2018-11-1005:13:31 PM - INFO - DecenterHackathon.sol
2018-11-1005:13:32 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:13:32 PM - INFO - DelayedPayments.sol
2018-11-1005:13:32 PM - INFO - Code here may be Error:
	for (uint32 i = 0; i < _toList.length; i++) {
          transfer(_toList[i],_tokensList[i]);
      }
2018-11-1005:13:32 PM - INFO - DELCToken.sol
2018-11-1005:13:32 PM - INFO - Code here may be Error:
	for (uint256 index=0; index<_vaddr.length; index++) 
		{
			
			address toAddress = _vaddr[index];
			uint256 amountTo_Send = _vamounts[index].mul(10 ** decimals);
		
	                pecul.transfer(toAddress,amountTo_Send);
			AirdropOne(toAddress,amountTo_Send);
			
		}
2018-11-1005:13:32 PM - INFO - Delivery.sol
2018-11-1005:13:32 PM - INFO - Code here may be Error:
	for(uint i = 0; i < winnersCount; i++) {
			lastWinner = generateNextWinner(rnd, lastWinner, winners, gamblers.length);
			winners[i] = int(lastWinner);
			address winnerAddress = gamblers[uint(winners[i])];
			winnerAddress.transfer(winnerPrize); //safe because gambler can't be a contract
			Win(stage, gamblersLength, lastWinner, winnerAddress, winnerPrize);
		}
2018-11-1005:13:32 PM - INFO - DeLottery.sol
2018-11-1005:13:34 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _to.length; i++) {
       transfer(_to[i] , _amount[i]);
     }
2018-11-1005:13:34 PM - INFO - DHCToken.sol
2018-11-1005:13:34 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:13:34 PM - INFO - DiamondToken.sol
2018-11-1005:13:35 PM - INFO - Code here may be Error:
	for( uint i = 0 ; i < recipients.length ; i++ ) {
        myToken.transfer( recipients[i], amount);
        emit TokenDrop( recipients[i], amount );
    }
2018-11-1005:13:35 PM - INFO - DiatomAirdrop.sol
2018-11-1005:13:35 PM - INFO - Code here may be Error:
	for(uint i = 0;i &lt; roomIDList.length;i++){            &#13;            if(roomMapping[roomIDList[i]].balance &gt; 0){&#13;                roomMapping[roomIDList[i]].owner.transfer(roomMapping[roomIDList[i]].balance);&#13;                roomMapping[roomIDList[i]].balance = 0;&#13;                roomMapping[roomIDList[i]].status = roomEnded;&#13;            }
2018-11-1005:13:35 PM - INFO - DiceOnline.sol
2018-11-1005:13:35 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:13:35 PM - INFO - DiepToken.sol
2018-11-1005:13:35 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:13:35 PM - INFO - DigitalAssetManagement.sol
2018-11-1005:13:35 PM - INFO - Code here may be Error:
	for (uint j = 0; j < userRecomms.length; j++) {
      recomms += msg.value * GENERATION_REWARD[j] / 1000;
      userRecomms[j].transfer(msg.value * GENERATION_REWARD[j] / 1000);

      emit eventDividend(
        'dividend',
        msg.sender,
        msg.value,
        stage,
        round,
        count,
        content,
        j,
        userRecomms[j],
        msg.value * GENERATION_REWARD[j] / 1000,
        now
      );
    }
2018-11-1005:13:35 PM - INFO - Code here may be Error:
	for (uint m = 0; m < WaitAwardBets.length; m++) {
      uint reward = userAward * WaitAwardBets[m].count / counts;
      WaitAwardBets[m].addr.transfer(reward);

      emit eventReward(
        'reward',
        WaitAwardBets[m].addr,
        WaitAwardBets[m].amount,
        stage,
        stages[stage].round,
        WaitAwardBets[m].count,
        WaitAwardBets[m].content,
        randoms,
        reward,
        now
      );
    }
2018-11-1005:13:35 PM - INFO - DigitalGame.sol
2018-11-1005:13:36 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i< balances.size(); i += 1) {
            address tokenHolder = balances.getKeyByIndex(i);
            if (approvedDividends[tokenHolder] > 0)
            {
                tokenHolder.transfer(approvedDividends[tokenHolder]);
                DividendsTransfered (tokenHolder, approvedDividends[tokenHolder]);
                approvedDividends[tokenHolder] = 0;
            }
2018-11-1005:13:36 PM - INFO - Dirath.sol
2018-11-1005:13:36 PM - INFO - Code here may be Error:
	for(i = 0; i < _contributors.length; i++){
            // calculate members's disbursement
            uint256 disbursement = (balance * _contributions[i]) / totalContributions;
            
            // ensure that token transfer is successful or  revert all previous actions and stop running
            require(ERC20Token(_tokenContract).transfer(_contributors[i], disbursement));
        }
2018-11-1005:13:36 PM - INFO - disburseERC20v11.sol
2018-11-1005:13:36 PM - INFO - Code here may be Error:
	for (uint i = 0; i < payees.length; i++) {
			uint _tokensDue = tokensDue(payees[i].contributionWei);
			if (payees[i].addr == msg.sender) {
				require(!payees[i].paid);
				require(_tokensDue >= withhold);
				require(token.balanceOf(address(this)) >= _tokensDue*tokenMultiplier);
				// Withhold tokens to cover gas cost
				uint tokensToSend = _tokensDue - withhold;
				// Send tokens to payee
				require(token.transfer(payees[i].addr, tokensToSend*tokenMultiplier));
				// Mark payee as paid
				payees[i].paid = true;
			}
2018-11-1005:13:36 PM - INFO - Code here may be Error:
	for (uint i = 0; i < payees.length; i++) {
			// Confirm that contributor has not yet been paid is owed more than gas withhold
			if (payees[i].paid == false && tokensDue(payees[i].contributionWei) >= withhold) {
				// Withhold tokens to cover gas cost
				uint tokensToSend = tokensDue(payees[i].contributionWei) - withhold;
				// Send tokens to payee
				require(token.transfer(payees[i].addr, tokensToSend*tokenMultiplier));
				// Mark payee as paid
				payees[i].paid = true;
			}
2018-11-1005:13:36 PM - INFO - Distribute.sol
2018-11-1005:13:36 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
            require(transfer(_addresses[i], _value[i]));
        }
2018-11-1005:13:36 PM - INFO - DistributedBank.sol
2018-11-1005:13:36 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
            require(transfer(_addresses[i], _value[i]));
        }
2018-11-1005:13:36 PM - INFO - DistributedCreditChain.sol
2018-11-1005:13:36 PM - INFO - Code here may be Error:
	for(uint i = 0; i < addresses.length; ++i){
			tokenReward.transfer(addresses[i],balances[i]*10**18);
		}
2018-11-1005:13:36 PM - INFO - DistributeKRI.sol
2018-11-1005:13:37 PM - INFO - Code here may be Error:
	for (uint256 i = start; i < end; ++i) {
      address contributor = contributors[i];
      uint256 expectedTokens = contributorExpectedTokens[i];
      require(contributionHashes[i] == keccak256(contributor, expectedTokens));
      contributionHashes[i] = 0x00000000000000000000000000000000;

      uint256 numTokens = _numTokensForContributor(expectedTokens, tokensTransferredSoFar, _state);
      tokensTransferredSoFar += numTokens;
      require(tokenContract.transfer(contributor, numTokens));
    }
2018-11-1005:13:37 PM - INFO - DistributionForTesting.sol
2018-11-1005:13:37 PM - INFO - Code here may be Error:
	for (uint i=0; i<addr.length; i++)
            {
                addr[i].transfer(val[i]);
            }
2018-11-1005:13:37 PM - INFO - Distributor.sol
2018-11-1005:13:37 PM - INFO - Code here may be Error:
	for (uint256 i=1; i < y; i++)
                z = mul(z,x);
            return (z);
        }
    }
}
interface HourglassInterface {
    function() payable external;
    function buy(address _playerAddress) payable external returns(uint256);
    function sell(uint256 _amountOfTokens) external;
    function reinvest() external;
    function withdraw() external;
    function exit() external;
    function dividendsOf(address _playerAddress) external view returns(uint256);
    function balanceOf(address _playerAddress) external view returns(uint256);
    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);
    function stakingRequirement() external view returns(uint256);
}
2018-11-1005:13:37 PM - INFO - Divies.sol
2018-11-1005:13:37 PM - INFO - Code here may be Error:
	for (i=from; i&lt;to; i++)&#13;            _transactionIds[i - from] = transactionIdsTemp[i];&#13;    }&#13;&#13;    // Transfer GTO to an outside account&#13;    /*function _withdrawGTO(address _to, uint256 _balance) onlyOwner internal { &#13;        require(Gifto.balanceOf(address(this)) &gt;= _balance);&#13;        Gifto.transfer(_to, _balance); &#13;    }
2018-11-1005:13:37 PM - INFO - DivisibleForeverRose.sol
2018-11-1005:13:38 PM - INFO - Code here may be Error:
	for (uint i = 0; i < prizes.length; i++) {
            require(c.transfer(winners[i], prizes[i]));
        }
2018-11-1005:13:38 PM - INFO - DmlMarketplace.sol
2018-11-1005:13:41 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addrs.length; i++) {
      transfer(addrs[i], amount);
    }
2018-11-1005:13:41 PM - INFO - DPSToken.sol
2018-11-1005:13:41 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:13:41 PM - INFO - DragonLifeChain.sol
2018-11-1005:13:42 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < tokens.length; i++) {
      ERC20Basic token = ERC20Basic(tokens[i]);
      uint256 balance = token.balanceOf(this);
      token.transfer(owner, balance);
    }
2018-11-1005:13:42 PM - INFO - DRCWalletManager.sol
2018-11-1005:13:42 PM - INFO - Code here may be Error:
	for (uint i = 0; i < receivers.length; i++){
	        if (!token.transfer(receivers[i],dropAmount)) {
	            emit PaymentFailure(receivers[i]);
	        }
2018-11-1005:13:42 PM - INFO - DropFunnel.sol
2018-11-1005:13:42 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < _to.length; i++) {
        require (balances[msg.sender] >= _value[i]);
        require (_to[i] != 0x0);

        super.transfer(_to[i], _value[i]);
    }
2018-11-1005:13:42 PM - INFO - DSCToken.sol
2018-11-1005:13:44 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _holders.length; i++) {
          uint zeros = getZero(totalSupplyForDivision);
          uint256 amount = percent(balanceOf[_holders[i]],totalSupplyForDivision , zeros) * totalEth;
          amount = amount / 10 ** uint256(zeros);
        
          if(amount != 0){
            uint256 minimumAmount = address(this).balance; 
            require(minimumAmount >= amount);      // checks if the contract has enough ether to buy
            uint256 holderBalance = balanceOf[_holders[i]];
            balanceOf[_holders[i]] -= holderBalance;                        // Subtract from the targeted balance
            totalSupply -= holderBalance;            
            _holders[i].transfer(amount);          // sends ether to the seller. It's important to do this last to 
          }
2018-11-1005:13:44 PM - INFO - DunkPayToken.sol
2018-11-1005:13:44 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:13:44 PM - INFO - DVECHAIN.sol
2018-11-1005:13:44 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _deedIds.length; i++) {
            uint256 _deedId = _deedIds[i];
            
            // One can only transfer their own plots.
            require(_owns(msg.sender, _deedId));

            // Transfer ownership
            _transfer(msg.sender, _to, _deedId);
        }
2018-11-1005:13:44 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _deedIds.length; i++) {
            uint256 _deedId = _deedIds[i];
            address _from = identifierToOwner[_deedId];
            
            // Check for transfer approval
            require(_approvedFor(msg.sender, _deedId));

            // Reassign ownership (also clears pending approvals and emits Transfer event).
            _transfer(_from, msg.sender, _deedId);
        }
2018-11-1005:13:44 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _deedIds.length; i++) { 
            uint256 _deedId = _deedIds[i];
            require(validIdentifier(_deedId));
            
            // The plot must be unowned (a plot deed cannot be transferred to
            // 0x0, so once a plot is claimed it will always be owned by a
            // non-zero address).
            require(identifierToOwner[_deedId] == address(0));
            
            // Create the plot
            plots[offset + i] = uint32(_deedId);
            
            // Transfer the new plot to the sender.
            _transfer(address(0), msg.sender, _deedId);
            
            // Set the plot data.
            _setPlotData(_deedId, name, description, imageUrl, infoUrl);
        }
2018-11-1005:13:44 PM - INFO - DWorldCore.sol
2018-11-1005:13:44 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _to.length; i++) {
            transfer(_to[i], _amount[i]);
        }
2018-11-1005:13:44 PM - INFO - DXC.sol
2018-11-1005:13:46 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _tos.length; i++) {
        transfer( _tos[i], _value);
      }
2018-11-1005:13:46 PM - INFO - EBCBToken.sol
2018-11-1005:13:46 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _addresses.length; i++){
	    	_transfer(_addresses[i], _values[i]*10**uint(decimals));
	    }
2018-11-1005:13:46 PM - INFO - Eben.sol
2018-11-1005:13:46 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
            sendTokens(addresses[i], value);
            ebyteToken.transfer(addresses[i], value);
        }
2018-11-1005:13:46 PM - INFO - EbyteDistribution.sol
2018-11-1005:13:47 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:13:47 PM - INFO - EctoCrowdsale.sol
2018-11-1005:13:47 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
       super.transfer(addresses[i], amount);
    }
2018-11-1005:13:47 PM - INFO - EDash.sol
2018-11-1005:13:47 PM - INFO - Code here may be Error:
	for (uint i = 0; i &lt; participants.length; i++) {&#13;            address participant = participants[i].player;&#13;            &#13;            if (participant != 0x0) {&#13;                participant.transfer(participationFee);&#13;            }
2018-11-1005:13:47 PM - INFO - EDColiseumAlpha.sol
2018-11-1005:13:47 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
            balances[owner] = safeSub(balanceOf(owner), amount);
            // Another sanity check to make sure owner balance can never be negative
            require(balances[owner] >= 0);
            balances[addresses[i]] = safeAdd(balanceOf(addresses[i]), amount);
            transfer(addresses[i], amount);
        }
2018-11-1005:13:47 PM - INFO - EDOGE.sol
2018-11-1005:13:48 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:13:48 PM - INFO - EEMAsset.sol
2018-11-1005:13:48 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
       super.transfer(addresses[i], amount);
    }
2018-11-1005:13:48 PM - INFO - EEther.sol
2018-11-1005:13:49 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addr.length; i++) {
            transfer(addr[i], token[i] * (10 ** decimals));
        }
2018-11-1005:13:49 PM - INFO - EICToken.sol
2018-11-1005:13:50 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < list.length; i++) {
            list[i].transfer(reward);
        }
2018-11-1005:13:50 PM - INFO - Code here may be Error:
	for (uint256 j = 0; j < secondaryList.length; j++) {
            // transfer eth to winners.
            secondaryList[j].transfer(reward);
            winners.push(secondaryList[j]); // add to winners
        }
2018-11-1005:13:50 PM - INFO - Election.sol
2018-11-1005:13:50 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:13:50 PM - INFO - ELink.sol
2018-11-1005:13:50 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
       super.transfer(addresses[i], amount);
    }
2018-11-1005:13:50 PM - INFO - eLitecoin.sol
2018-11-1005:13:51 PM - INFO - Code here may be Error:
	for(uint i = 0; i<investors.length; i++) {
            if (!investors[i].kyced) {
                investors[i].sender.transfer(investors[i].amount);    
                investors[i].amount = 0;
            }
2018-11-1005:13:51 PM - INFO - Code here may be Error:
	for(uint i = 0; i<investors.length; i++) {
                    investors[i].sender.transfer(investors[i].amount);
                }
2018-11-1005:13:51 PM - INFO - ELOVEToken.sol
2018-11-1005:13:51 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:13:51 PM - INFO - EmissionProvider.sol
2018-11-1005:13:52 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
       super.transfer(addresses[i], amount);
    }
2018-11-1005:13:52 PM - INFO - EMonero.sol
2018-11-1005:13:52 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
       super.transfer(addresses[i], amount);
    }
2018-11-1005:13:52 PM - INFO - ENeo.sol
2018-11-1005:13:52 PM - INFO - Code here may be Error:
	for (uint i = 0; i < recipients.length; i++) {
            transfer(recipients[i], amounts[i]);
        }
2018-11-1005:13:52 PM - INFO - EngagementToken.sol
2018-11-1005:13:53 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:13:53 PM - INFO - EnterpriseCerditPass.sol
2018-11-1005:13:54 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < count; i++) {
			transfer(_recipients[i], _value);
		}
2018-11-1005:13:54 PM - INFO - EOT.sol
2018-11-1005:13:55 PM - INFO - Code here may be Error:
	for (uint i = 0; i < ids.length; i++) {
            transfer(to, ids[i]);
        }
2018-11-1005:13:55 PM - INFO - EpicPack.sol
2018-11-1005:13:55 PM - INFO - Code here may be Error:
	for (uint i = 0; i < ids.length; i++) {
            transfer(to, ids[i]);
        }
2018-11-1005:13:55 PM - INFO - EpicPackTwo.sol
2018-11-1005:13:57 PM - INFO - Code here may be Error:
	for (uint256 i = _from; i &lt; _to; i++) {&#13;            if (receivedSta[i].exchanged) continue;  // skip already exchanged STA&#13;            stb.transfer(receivedSta[i].minerAddress, receivedSta[i].staAmount/_sta2stb * oneStaIsStb / 10**4);&#13;            receivedSta[i].exchanged = true;&#13;            receivedSta[i].stbAmount = receivedSta[i].staAmount/_sta2stb * oneStaIsStb / 10**4;&#13;            _toBurn += receivedSta[i].staAmount;&#13;            MessageExchangeStaStb(receivedSta[i].minerAddress, receivedSta[i].staAmount, &#13;              receivedSta[i].staAmount/_sta2stb * oneStaIsStb / 10**4);&#13;        }
2018-11-1005:13:57 PM - INFO - Code here may be Error:
	for (i = _from; i &lt; _to; i++) {&#13;            if (donations[i].exchangedOrRefunded) continue;  // skip already exchanged ETH&#13;            if (donations[i].block &lt; icoStartBlock + _pb) _bonus = 6;  // first period; bonus in %&#13;            else if (donations[i].block &gt;= icoStartBlock + _pb &amp;&amp; donations[i].block &lt; icoStartBlock + 2*_pb) _bonus = 4;  // 2nd&#13;            else if (donations[i].block &gt;= icoStartBlock + 2*_pb &amp;&amp; donations[i].block &lt; icoStartBlock + 3*_pb) _bonus = 2;  // 3rd&#13;            else _bonus = 0;  // 4th&#13;            stb.transfer(donations[i].donorAddress, 10 * ( (100 + _bonus) * (donations[i].ethAmount / _wei2stb) / 100) );&#13;            donations[i].exchangedOrRefunded = true;&#13;            donations[i].stbAmount = 10 * ( (100 + _bonus) * (donations[i].ethAmount / _wei2stb) / 100);&#13;            MessageExchangeEthStb(donations[i].donorAddress, donations[i].ethAmount, &#13;              10 * ( (100 + _bonus) * (donations[i].ethAmount / _wei2stb) / 100));&#13;        }
2018-11-1005:13:57 PM - INFO - Code here may be Error:
	for (uint256 i = _from; i &lt; _to; i++) {&#13;            if (donations[i].exchangedOrRefunded) continue;&#13;            donations[i].donorAddress.transfer(donations[i].ethAmount);&#13;            donations[i].exchangedOrRefunded = true;&#13;            MessageRefundEth(donations[i].donorAddress, donations[i].ethAmount);&#13;        }
2018-11-1005:13:57 PM - INFO - ERC223Token_STB.sol
2018-11-1005:13:57 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
       super.transfer(addresses[i], amount);
    }
2018-11-1005:13:57 PM - INFO - ERipple.sol
2018-11-1005:13:57 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _recipients.length; i++) {
            require(!tokensReceived[_recipients[i]]); // Probably a race condition between two transactions. Bail to avoid double allocations and to save the gas.
            require(token.transfer(_recipients[i], amountOfTokens));
            tokensReceived[_recipients[i]] = true;
        }
2018-11-1005:13:57 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _recipients.length; i++) {
            require(!tokensReceived[_recipients[i]]); // Probably a race condition between two transactions. Bail to avoid double allocations and to save the gas.
            require(token.transfer(_recipients[i], _amount[i]));
            tokensReceived[_recipients[i]] = true;
            totalClaimed = totalClaimed.add(_amount[i]);
        }
2018-11-1005:13:57 PM - INFO - ESCBAirdropper.sol
2018-11-1005:13:59 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addresses.length; i++) {
      addresses[i].transfer(amountToSend);
      emit TransferEth(addresses[i], amountToSend);
    }
2018-11-1005:13:59 PM - INFO - EthAirdrop.sol
2018-11-1005:14:00 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _addresses.length; i++) {
            transfer(_addresses[i], _values[i]);
        }
2018-11-1005:14:00 PM - INFO - EthchangeToken.sol
2018-11-1005:14:00 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:14:00 PM - INFO - ETHDEX.sol
2018-11-1005:14:00 PM - INFO - Code here may be Error:
	for(uint i = 0; i < receivers.length; i++) {
      receivers[i].transfer(balances[i]);
    }
2018-11-1005:14:00 PM - INFO - ETHDistributor.sol
2018-11-1005:14:01 PM - INFO - Code here may be Error:
	for (uint i = 0; i < bets[eventId].length; i++) {
            Bet storage bet = bets[eventId][i];
            if (winner == Winner.Cancelled) {
                bet.user.transfer(bet.amount);
                continue;
            }
2018-11-1005:14:01 PM - INFO - EtherBetToken.sol
2018-11-1005:14:01 PM - INFO - Code here may be Error:
	for (uint k = 0; k &lt; _tokenIds.length; k++) {&#13;            // perform state changes necessary for transfer&#13;            _transfer(msg.sender, _to, _tokenIds[k]);&#13;        }
2018-11-1005:14:01 PM - INFO - EtherbotsCore.sol
2018-11-1005:14:01 PM - INFO - Code here may be Error:
	for(uint8 i=0; i < numberOfParticipants; i++)
        {
            provision = percentage(_amount, participant[participantIndex[i]]);
            amount = amount - provision;
            participantIndex[i].transfer(provision);
        }
2018-11-1005:14:01 PM - INFO - Etherchicks.sol
2018-11-1005:14:01 PM - INFO - Code here may be Error:
	for (uint i = 0; i &lt;= 4; i++) {&#13;        if (previousOwners[i] != address(this)) {&#13;            previousOwners[i].transfer(uint256(SafeMath.div(SafeMath.mul(priceDelta, 10), 100)));&#13;        }
2018-11-1005:14:01 PM - INFO - EtherColor.sol
2018-11-1005:14:01 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < addresses.length; i++) {
				address addr=addresses[i];
	    		if (!ideas[index].reclaimed[addr])    { 
	        		uint256 reclaimAmount=ideas[index].amountPledged[addr];
		    		if (reclaimAmount>0)    { 
		    			ideas[index].reclaimed[addr]=true; 
		        		emit UserRegainedAmountAtIndex(addr,reclaimAmount,index);
		        		addr.transfer(reclaimAmount);
		    		}
2018-11-1005:14:01 PM - INFO - ethercrowdfund.sol
2018-11-1005:14:01 PM - INFO - Code here may be Error:
	for (send 0 to
     * buy for whatever the current round is)
     * @param _referrerName the player for which to reward referral bonuses to
     */
    function buyCarrots(uint8 _horse, uint256 _round, bytes32 _referrerName)
        public
        payable
        isHuman()
        isWithinLimits(msg.value)
        isValidHorse(_horse)
    {
        if (isInvalidRound(_round)) {
            emit OnTransactionFail(msg.sender, "Invalid round");
            msg.sender.transfer(msg.value);
            return;
        }
2018-11-1005:14:01 PM - INFO - EtherDerby.sol
2018-11-1005:14:01 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _Id.length; i++){
            address oldOwner = ownerOf(_Id[i]);
            require(ownerOf(_Id[i]) != newOwner);
            require(!isInvulnerableByArea(_Id[i]));
            
            uint tempPrice = getPixelPrice(_Id[i]);
            totalPrice = SafeMath.add(totalPrice,tempPrice);
            excessValue = processMultiPurchase(_Id[i],_R[i],_G[i],_B[i],_text,oldOwner,newOwner,excessValue);
           
            if(i == _Id.length-1) {
                require(msg.value >= totalPrice);
                msg.sender.transfer(excessValue);
                }
2018-11-1005:14:01 PM - INFO - etherdoodleToken.sol
2018-11-1005:14:02 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:14:02 PM - INFO - EthereumByte.sol
2018-11-1005:14:03 PM - INFO - Code here may be Error:
	for( uint i = 0 ; i < recipients.length ; i++ ) {
        myToken.transfer( recipients[i], amount);
        TokenDrop( recipients[i], amount );
    }
2018-11-1005:14:03 PM - INFO - EthereumLegitAirDrop.sol
2018-11-1005:14:03 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < count; i++) {
            transfer(_holders [i], _pay_size);
        }
2018-11-1005:14:03 PM - INFO - EthereumRisen.sol
2018-11-1005:14:03 PM - INFO - Code here may be Error:
	for (j = 0; j < numWinners; j++) {
            winner_announced(winnerAddresses[j], jackpot);
            winnerAddresses[j].transfer(jackpot);
        }
2018-11-1005:14:03 PM - INFO - EthereumSweepstakes.sol
2018-11-1005:14:03 PM - INFO - Code here may be Error:
	for(uint i = 0; i<usersAddressForPreICO.length; i++)
        {
            uint tks=(EthSentAgainstAddress[usersAddressForPreICO[i]].mul(1000000000*10**18)).div(weiRaisedInPreICO);            
            token.transfer(usersAddressForPreICO[i],tks);
        }
2018-11-1005:14:03 PM - INFO - EthereumTravelCrowdsale.sol
2018-11-1005:14:03 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:14:03 PM - INFO - EtherFeitsuiCoin.sol
2018-11-1005:14:04 PM - INFO - Code here may be Error:
	for (uint i = 0; i &lt;= 5; i++) {&#13;        if (previousOwners[i] != address(this)) {&#13;            previousOwners[i].transfer(uint256(SafeMath.div(SafeMath.mul(priceDelta, 10), 100)));&#13;        }
2018-11-1005:14:04 PM - INFO - EtherGrey.sol
2018-11-1005:14:04 PM - INFO - Code here may be Error:
	for(uint8 i = 0; i < parentAddresses.length; i++)
        {
            address parent = parentAddresses[i];
            if(parent == address(0)) break;
            
            uint rewardValue = calculateRewardForLevel(i + 1, depositValue);
            parent.transfer(rewardValue);
            
            emit ReferrerBonus(investorAddress, parent, i + 1, rewardValue);
        }
2018-11-1005:14:04 PM - INFO - EtherLife.sol
2018-11-1005:14:04 PM - INFO - Code here may be Error:
	for (uint k = 0; k &lt; betters.length; k++) {&#13;      uint totalBet = betterInfo[betters[k]].amountsBet[0] + betterInfo[betters[k]].amountsBet[1];&#13;      betters[k].transfer(totalBet * storedBalance / totalBetAmount);&#13;    }
2018-11-1005:14:04 PM - INFO - Code here may be Error:
	for (uint k = 0; k &lt; betters.length; k++) {&#13;      uint betOnWinner = betterInfo[betters[k]].amountsBet[uint(winningCountry)];&#13;      uint payout = betOnWinner + ((betOnWinner * (losingChunk - bookiePayout)) / totalAmountsBet[uint(winningCountry)]);&#13;&#13;      if (payout &gt; 0)&#13;        betters[k].transfer(payout);&#13;    }
2018-11-1005:14:04 PM - INFO - Etherlympics.sol
2018-11-1005:14:05 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < waveToTokens[_wave].length; i++) {
            uint256 tokenId = waveToTokens[_wave][i];

            // in case buyer is not this contract or empty transfer
            if (tokenToBuyer[tokenId] != address(0) && tokenToBuyer[tokenId] != address(this)) {

                // Contract needs to own asset.
                require(_owns(address(this), tokenId));

                // Reassign ownership, clear pending approvals, emit Transfer event.
                _approve(tokenId, tokenToBuyer[tokenId]);
                ethernautsStorage.transfer(address(this), tokenToBuyer[tokenId], tokenId);

                // set state as available
                ethernautsStorage.updateState(tokenId, uint8(AssetState.Available));
            }
2018-11-1005:14:05 PM - INFO - EthernautsPreSale.sol
2018-11-1005:14:06 PM - INFO - Code here may be Error:
	for (uint i = 0; i < bets[eventId].length; i++) {
                Bet storage bet = bets[eventId][i];
                bet.user.transfer(bet.amount);
            }
2018-11-1005:14:06 PM - INFO - Code here may be Error:
	for (i = 0; i < bets[eventId].length; i++) {
                bet = bets[eventId][i];
                if (bet.winner == winner) {
                    bet.user.transfer(bet.amount.add(bet.amount.mul(loserBank).div(winnerBank)));
                }
2018-11-1005:14:06 PM - INFO - EtherSweepToken.sol
2018-11-1005:14:06 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _tos.length; i++){
            bool done = false;
            address to = _tos[i];
            if(to != 0x0 && userEtherOf[msg.sender] >= _amount){
                userEtherOf[msg.sender] = userEtherOf[msg.sender].sub(_amount);
                to.transfer(_amount);                                            
                _doneNum = _doneNum.add(1);
                done = true;
            }
2018-11-1005:14:06 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _tos.length; i++){
            bool done = false;
            address to = _tos[i];
            uint256 amount = _amounts[i]; 
            if((to != 0x0) && (amount > 0) && (userEtherOf[msg.sender] >= amount)){
                userEtherOf[msg.sender] = userEtherOf[msg.sender].sub(amount);
                to.transfer(amount);                                            
                _doneNum = _doneNum.add(1);
                done = true;
            }
2018-11-1005:14:06 PM - INFO - EtherTool.sol
2018-11-1005:14:06 PM - INFO - Code here may be Error:
	for (uint i = 0; i < winners.length; i++) {
            uint256 sendAmt = distributeAmount.mul(playersBetOnTeams[_winTeam][winners[i]]).div(PlayersBet[_winTeam]);
            winners[i].transfer(sendAmt);
        }
2018-11-1005:14:06 PM - INFO - EtherWorldCup.sol
2018-11-1005:14:07 PM - INFO - Code here may be Error:
	for (uint i = 0; i < totalTickets; i++) {
                if (raffleId == contestants[i].raffleId) {
                    TicketRefund(raffleId, contestants[i].addr, i);
                    contestants[i].addr.transfer(pricePerTicket);
                }
2018-11-1005:14:07 PM - INFO - Ethraffle_v1b.sol
2018-11-1005:14:07 PM - INFO - Code here may be Error:
	for (uint i = 0; i < totalTickets; i++) {
                if (raffleId == contestants[i].raffleId) {
                    TicketRefund(raffleId, contestants[i].addr, i);
                    contestants[i].addr.transfer(pricePerTicket);
                }
2018-11-1005:14:07 PM - INFO - Ethraffle_v2b.sol
2018-11-1005:14:07 PM - INFO - Code here may be Error:
	for (uint i = 0; i < totalTickets; i++) {
                if (raffleId == contestants[i].raffleId) {
                    TicketRefund(raffleId, contestants[i].addr, i);
                    contestants[i].addr.transfer(pricePerTicket);
                }
2018-11-1005:14:07 PM - INFO - Ethraffle_v3b.sol
2018-11-1005:14:07 PM - INFO - Code here may be Error:
	for (uint i = 0; i < totalTickets; i++) {
                if (raffleId == contestants[i].raffleId) {
                    TicketRefund(raffleId, contestants[i].addr, i);
                    contestants[i].addr.transfer(pricePerTicket);
                }
2018-11-1005:14:07 PM - INFO - Ethraffle_v4b.sol
2018-11-1005:14:07 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addrs.length; i++) {
      transfer(addrs[i], amount);
    }
2018-11-1005:14:07 PM - INFO - EthRoi.sol
2018-11-1005:14:08 PM - INFO - Code here may be Error:
	for (uint256 j = 0; j < receivers.length; j++){
      uint256 eth_ = _eth.mul(shares[j]).div(totalshares).sub(adminFee);
      receivers[j].transfer(eth_);
    }
2018-11-1005:14:08 PM - INFO - EthWebATM.sol
2018-11-1005:14:10 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addrs.length; i++) {
      transfer(addrs[i], amount);
    }
2018-11-1005:14:10 PM - INFO - EvenCoinPlus.sol
2018-11-1005:14:10 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i &lt; outcomeTokens.length; i++)&#13;            outcomeTokens[i].issue(msg.sender, collateralTokenCount);&#13;        OutcomeTokenSetIssuance(msg.sender, collateralTokenCount);&#13;    }&#13;&#13;    /// @dev Sells equal number of tokens of all outcomes, exchanging collateral tokens and sets of outcome tokens 1:1&#13;    /// @param outcomeTokenCount Number of outcome tokens&#13;    function sellAllOutcomes(uint outcomeTokenCount)&#13;        public&#13;    {&#13;        // Revoke sender's outcome tokens of all outcomes&#13;        for (uint8 i = 0; i &lt; outcomeTokens.length; i++)&#13;            outcomeTokens[i].revoke(msg.sender, outcomeTokenCount);&#13;        // Transfer collateral tokens to sender&#13;        require(collateralToken.transfer(msg.sender, outcomeTokenCount));&#13;        OutcomeTokenSetRevocation(msg.sender, outcomeTokenCount);&#13;    }
2018-11-1005:14:10 PM - INFO - EventFactory.sol
2018-11-1005:14:10 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:14:10 PM - INFO - EverGoldCrowdsale.sol
2018-11-1005:14:10 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
            token.transfer(_addresses[i], amount);
        }
2018-11-1005:14:10 PM - INFO - EVNT.sol
2018-11-1005:14:10 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
            require(!distributionLocks[addresses[i]]);
            transfer(addresses[i], values[i]);
            distributionLocks[addresses[i]] = true;
        }
2018-11-1005:14:10 PM - INFO - Exafire.sol
2018-11-1005:14:11 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:14:11 PM - INFO - ExpeditingToken.sol
2018-11-1005:14:12 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
       super.transfer(addresses[i], amount);
    }
2018-11-1005:14:12 PM - INFO - Ezcash.sol
2018-11-1005:14:13 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
             _transfer(msg.sender, addresses[i], _value);
        }
2018-11-1005:14:13 PM - INFO - FaceTech.sol
2018-11-1005:14:13 PM - INFO - Code here may be Error:
	for(uint32 i=0;i<_tos.length;i++){  
                      _tos[i].transfer(_values[i]);  
                  }
2018-11-1005:14:13 PM - INFO - FAID.sol
2018-11-1005:14:13 PM - INFO - Code here may be Error:
	for (uint i=startIndex; i&lt;=endIndex &amp;&amp; i&lt;memberCount; i++) {&#13;            /* Should not occur */&#13;            if (accountIndex[i] == 0)&#13;                continue;&#13;            /* Grant tokens due */&#13;            tokenReward.transfer(accountIndex[i], (balanceOf[accountIndex[i]] * tokenSupply / amountRaised));&#13;            /* Fire TokenAllocation event */&#13;            TokenAllocation(accountIndex[i], (balanceOf[accountIndex[i]] * tokenSupply / amountRaised));&#13;            /* Prevent repeat-withdrawals */&#13;            balanceOf[accountIndex[i]] = 0;&#13;        }
2018-11-1005:14:13 PM - INFO - FairAuction.sol
2018-11-1005:14:14 PM - INFO - Code here may be Error:
	for (uint i = 0; i < gmapGame_addresses[gnGameID].length; i++) {
			gmapGame_addresses[gnGameID][i].transfer(gmapGame_wagers[gnGameID][i] - gcnTransferFee);
		}
2018-11-1005:14:14 PM - INFO - Code here may be Error:
	for (uint i = 0; i < gmapGame_addresses[gnGameID].length; i++) {
					if (gmapGame_runningbalances[gnGameID][i] > nOtherBalance) {
						if (gmapGame_runningbalances[gnGameID][i] - nOtherBalance < gmapGame_wagers[gnGameID][i]) {
							gmapGame_addresses[gnGameID][i].transfer( (gmapGame_runningbalances[gnGameID][i] - nOtherBalance) - gcnTransferFee);
						}
2018-11-1005:14:14 PM - INFO - Code here may be Error:
	for (uint i = 0; i < gmapGame_addresses[gnGameID].length; i++) {
				if (gmapGame_runningbalances[gnGameID][i] <= nOtherBalance) {
					gmapGame_addresses[gnGameID][i].transfer((gmapGame_wagers[gnGameID][i] * gcnWinMultipler / 100) - gcnTransferFee);
				}
2018-11-1005:14:14 PM - INFO - FantasySports.sol
2018-11-1005:14:15 PM - INFO - Code here may be Error:
	for (uint i=0;i<tokenBuyers.length;i++)
         {
             uint etherAmount = EthersSentByBuyers[tokenBuyers[i]];
             if (etherAmount>0)
             {
                tokenBuyers[i].transfer(etherAmount);
                EthersSentByBuyers[tokenBuyers[i]] = 0;
             }
2018-11-1005:14:15 PM - INFO - FeedCrowdsale.sol
2018-11-1005:14:15 PM - INFO - Code here may be Error:
	for (uint i = 0; i < someTokens.length; i++) {
            uint256 prevBalance = someTokens[i].balanceOf(this);
            uint256 tokenAmount = prevBalance.mul(_value).div(totalSupply);
            someTokens[i].transfer(msg.sender, tokenAmount); // Can't use require because not all ERC20 tokens return bool
            require(someTokens[i].balanceOf(this) == prevBalance.sub(tokenAmount), "Invalid token behavior");
        }
2018-11-1005:14:15 PM - INFO - FeeMultiToken.sol
2018-11-1005:14:15 PM - INFO - Code here may be Error:
	for (uint i=0; i<devs.length; i++){
			devs[i].transfer((bal * 35) / 100);
		}
2018-11-1005:14:15 PM - INFO - Code here may be Error:
	for (i=0; i<smallerdevs.length-1; i++){
            smallerdevs[i].transfer(bal / 3);
        }
2018-11-1005:14:15 PM - INFO - Fees.sol
2018-11-1005:14:17 PM - INFO - Code here may be Error:
	for (uint256 _i = 0; _i < _data.contracts.shortShareTokens.length; ++_i) {
            require(_data.contracts.shortShareTokens[_i].transfer(_shortBuyer, _numberOfCompleteSets));
        }
2018-11-1005:14:17 PM - INFO - FillOrder.sol
2018-11-1005:14:18 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < buy_amount; i++) {
            require(shop_address.call.gas(26290).value(0)() == true);
      }
2018-11-1005:14:18 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < buy_amount; i++) {
            require(shop_address.call.gas(gas_amount).value(0)() == true);
      }
2018-11-1005:14:18 PM - INFO - FlexiFarmv2.sol
2018-11-1005:14:19 PM - INFO - Code here may be Error:
	for (; i < _destAddrs.length; i = i.add(1)) {
            if (!erc20tk.transfer(_destAddrs[i], _values[i])) {
                break;
            }
2018-11-1005:14:19 PM - INFO - FlyDropToken.sol
2018-11-1005:14:19 PM - INFO - Code here may be Error:
	for (; i < _destAddrs.length; i = i.add(1)) {
            if (!erc20tk.transfer(_destAddrs[i], _values[i])) {
                break;
            }
2018-11-1005:14:19 PM - INFO - FlyDropTokenMgr.sol
2018-11-1005:14:19 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _to.length; i++) {
       transfer(_to[i] , _amount[i]);
     }
2018-11-1005:14:19 PM - INFO - FMToken.sol
2018-11-1005:14:20 PM - INFO - Code here may be Error:
	for (uint i = 0; i < betsWin.length; i++) {
      uint thisPayout = calculatePayout(betsWin[i].amount, betsWin[i].odds);
      if (thisPayout > 0) {
        // Avoid retrancy attacks!
        betsWin[i].amount = 0;
        betsWin[i].sender.transfer(thisPayout);
      }
2018-11-1005:14:20 PM - INFO - Code here may be Error:
	for (uint i = 0; i < betsHome.length; i++) {
      betsHome[i].amount = 0;
      betsHome[i].sender.transfer(betsHome[i].amount);
    }
2018-11-1005:14:20 PM - INFO - Code here may be Error:
	for (i = 0; i < betsAway.length; i++) {
      betsAway[i].amount = 0;
      betsAway[i].sender.transfer(betsAway[i].amount);
    }
2018-11-1005:14:20 PM - INFO - FootBall.sol
2018-11-1005:14:22 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < investorCount; i++) {
            address investorAddr = investorsList[i];
            Investor memory investor = investorMap[investorAddr];
            if(investor.isLocked && now > investor.endTime && !freezeAccountMap[investor.addr]){

                require(tokenContract.transfer(investor.addr, investor.lockAmount), "");
                emit WithdrawalToken(investor.addr, investor.lockAmount);
                investor.endTime = 0;
                investor.isLocked = false;
                investor.lockAmount = 0;
                investorMap[investor.addr] = investor;
                emit UnLock(investor.addr, investor.lockAmount);
            }
2018-11-1005:14:22 PM - INFO - FoundingTeam.sol
2018-11-1005:14:26 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _addresses.length; i++) { 
			transfer(_addresses[i], _amounts[i]);
		}
2018-11-1005:14:26 PM - INFO - G7Token.sol
2018-11-1005:14:27 PM - INFO - Code here may be Error:
	for (uint256 pId = UID_START; pId < userSize; pId++) {
                Datasets.Player storage player = mapIdxPlayer[pId];
                if (address(this).balance > player.coin) {
                    player.addr.transfer(player.coin);
                }
2018-11-1005:14:27 PM - INFO - GameLogic.sol
2018-11-1005:14:27 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _to.length; i++){
            require(transfer(_to[i], _amount[i]));
        }
2018-11-1005:14:27 PM - INFO - GameOne.sol
2018-11-1005:14:27 PM - INFO - Code here may be Error:
	for(uint i = 0; i < games[gameid].options[winnerID].numPlayers; i++) {
                    uint returnWinAmount = games[gameid].options[winnerID].players[i].amount.mul(ratio);
                    returnWinAmount = returnWinAmount.div(100);
                    returnWinAmount = games[gameid].options[winnerID].players[i].amount.add(returnWinAmount);
                    games[gameid].options[winnerID].players[i].addr.transfer(returnWinAmount);
                    games[gameid].options[winnerID].players[i].profit = returnWinAmount;
                    totalReturn = totalReturn.add(returnWinAmount);
                }
2018-11-1005:14:27 PM - INFO - GameTable.sol
2018-11-1005:14:27 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:14:27 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; _path.length; i++) {&#13;      uint32 trapDamage = _computeDamage(_castleid, _ninjaid, uint8(_path[i]));&#13;      if (trapDamage &gt; 0) {&#13;        steps[count++] = _path[i];&#13;        damage = damage + trapDamage;&#13;        if (hp &lt;= damage) {&#13;          _insertAttackLog(_ninjaid, _castleid, reward, hp, uint8(_path[i]), trapDamage, true);&#13;          address castleOwner = castleToken.ownerOf(_castleid);&#13;          goldToken.transfer(castleOwner, reward / 2);&#13;          castleToken.win(_castleid, _ninjaid, uint256(_path[i]), steps, count);&#13;          ninjaToken.lost(_ninjaid);&#13;          ninjaToken.setPath(_ninjaid, _castleid, _path, steps);&#13;          emit AttackEnd(_ninjaid, _castleid, false);&#13;&#13;          return true;&#13;        }
2018-11-1005:14:27 PM - INFO - GameV001.sol
2018-11-1005:14:28 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < 150; i++){
                    if(tokenHolderIndex < tokenHolders.length){
                        uint256 userTokens = balanceOf[tokenHolders[tokenHolderIndex]];
                        if(userTokens > 0){
                            uint256 dividendPercentage =  userTokens.div(totalTokensHold);
                            uint256 dividend = monthlyAllocation.mul(1 ether).mul(dividendPercentage);
                            _transfer(this, tokenHolders[tokenHolderIndex], dividend);
                            tokenHolderIndex++;
                            totalDividendPaidThisRound = totalDividendPaidThisRound.add(dividend);
                        }
2018-11-1005:14:28 PM - INFO - GasFund.sol
2018-11-1005:14:28 PM - INFO - Code here may be Error:
	for (uint i = 0; i < toAddressList.length; i++) {
            toAddressList[i].transfer(amountList[i]);
        }
2018-11-1005:14:28 PM - INFO - GasManager.sol
2018-11-1005:14:29 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < count; i++) {
            transfer(_holders [i], paySize);
			airdropSupply = airdropSupply.add(paySize);
        }
2018-11-1005:14:29 PM - INFO - GCV.sol
2018-11-1005:14:30 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _addresses.length; i++) {
            _transfer(msg.sender,_addresses[i],_amount);
        }
2018-11-1005:14:30 PM - INFO - GENEPromoToken.sol
2018-11-1005:14:31 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _to.length; i++) {
            transfer(_to[i], _value[i]);
        }
2018-11-1005:14:31 PM - INFO - GetBonus.sol
2018-11-1005:14:31 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _to.length; i++) {
            transfer(_to[i], _value[i]);
        }
2018-11-1005:14:31 PM - INFO - GetBonusInv.sol
2018-11-1005:14:32 PM - INFO - Code here may be Error:
	for (uint i=0;i<7;i++) {
            pay = gift*gifts[i]/100;
            if (pay>0 && payee!=address(0)) {
                payee.transfer(pay);
                paid+=pay;
            }
2018-11-1005:14:32 PM - INFO - GiftBox.sol
2018-11-1005:14:32 PM - INFO - Code here may be Error:
	for(uint i = 0; i &lt; buyers.length; i++){&#13;            // buyer not approve investor&#13;            if (!approvedInvestorList[buyers[i]]) {&#13;                // get deposit of buyer&#13;                uint256 buyerDeposit = deposit[buyers[i]];&#13;                // reset deposit of buyer&#13;                deposit[buyers[i]] = 0;&#13;                // return deposit amount for buyer&#13;                buyers[i].transfer(buyerDeposit);&#13;            }
2018-11-1005:14:32 PM - INFO - GIFTO.sol
2018-11-1005:14:32 PM - INFO - Code here may be Error:
	for (uint256 numLambos = 0; numLambos < gib; numLambos++) {
            lamboContract.mint(address(0x0));
            lamboContract.transfer(msg.sender, 1);
        }
2018-11-1005:14:32 PM - INFO - GiveMeLambosVitalik.sol
2018-11-1005:14:33 PM - INFO - Code here may be Error:
	for (i = 0; i < _addresses.length; i++) {
      super.transfer(_addresses[i], _amounts[i]);
    }
2018-11-1005:14:33 PM - INFO - GizerToken.sol
2018-11-1005:14:33 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
         super.transfer(addresses[i], amounts[i]);
     }
2018-11-1005:14:33 PM - INFO - GladToken.sol
2018-11-1005:14:33 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:14:33 PM - INFO - GlobalAllianceCommunityChain.sol
2018-11-1005:14:33 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:14:33 PM - INFO - GlobalTransportServices.sol
2018-11-1005:14:34 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
            transfer(_addresses[i], amounts[i]);
        }
2018-11-1005:14:34 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
            transfer(_addresses[i], amounts[i] * 10**uint(decimals));
        }
2018-11-1005:14:34 PM - INFO - GoblinChainToken.sol
2018-11-1005:14:36 PM - INFO - Code here may be Error:
	for (uint i = 0; i < cascades.length; i++) {
            uint cascadeTotal = getCascadeTotal(cascades[i].percentage, totalJackpot);

            // Should be safe from re-entry given gas limit of 2300.
            cascades[i].cascade.transfer(cascadeTotal);
        }
2018-11-1005:14:36 PM - INFO - Code here may be Error:
	for (uint i = 0; i < ticketHolders.length; i++) {
      TicketHolder storage holder = ticketHolders[i];
      holder.purchaser.transfer(uint256(holder.count).mul(ticketPrice));
    }
2018-11-1005:14:36 PM - INFO - GoldRaffle.sol
2018-11-1005:14:37 PM - INFO - Code here may be Error:
	for(uint i = 0; index < tokenHolders.length && i < count; i++) {
        address tokenHolder = tokenHolders[index];
        uint value = token.balanceOf(tokenHolder);
        if(value != 0) {
          uint targetValue = value.mul(extraTokensPercent).div(PERCENT_RATE);
          token.mint(this, targetValue);
          token.transfer(tokenHolder, targetValue);
        }
2018-11-1005:14:37 PM - INFO - GoToken.sol
2018-11-1005:14:37 PM - INFO - Code here may be Error:
	for(uint i = 0; index < tokenHolders.length && i < count; i++) {
        address tokenHolder = tokenHolders[index];
        uint value = token.balanceOf(tokenHolder);
        if(value != 0) {
          uint targetValue = value.mul(extraTokensPercent).div(PERCENT_RATE);
          token.mint(this, targetValue);
          token.transfer(tokenHolder, targetValue);
        }
2018-11-1005:14:37 PM - INFO - GOTokenCrowdsale.sol
2018-11-1005:14:37 PM - INFO - Code here may be Error:
	for(uint i=0;i<addrs.length;i++){
	        transfer(addrs[i],values[i]*1000000000000000000);
	    }
2018-11-1005:14:37 PM - INFO - GPowerToken.sol
2018-11-1005:14:37 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < investors.length; i++) {
            address investor = investors[i];
            uint256 amount = amounts[i];
            transfer(investor, amount);
        }
2018-11-1005:14:37 PM - INFO - GrainToken.sol
2018-11-1005:14:38 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:14:38 PM - INFO - GreenEnergy.sol
2018-11-1005:14:39 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:14:39 PM - INFO - GroupsAccessManager.sol
2018-11-1005:14:39 PM - INFO - Code here may be Error:
	for( uint i = 0 ; i < recipients.length ; i++ ) {
        myToken.transfer( recipients[i], amount);
        emit TokenDrop( recipients[i], amount );
    }
2018-11-1005:14:39 PM - INFO - GTTAirdrop.sol
2018-11-1005:14:39 PM - INFO - Code here may be Error:
	for (uint8 i =0; i<numwinners; i++){
               
               winnerlist[i].transfer(this.balance/numwinners);
           }
2018-11-1005:14:39 PM - INFO - Guess23.sol
2018-11-1005:14:39 PM - INFO - Code here may be Error:
	for(_i=0;_i<SponsorAddresses.length;_i++){
            _val = (prft1 * Sponsors[SponsorAddresses[_i]]) / (balanceOfSPS);
            SponsorAddresses[_i].transfer(_val);
        }
2018-11-1005:14:39 PM - INFO - GuessEth.sol
2018-11-1005:14:41 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:14:41 PM - INFO - HakkaCoin.sol
2018-11-1005:14:41 PM - INFO - Code here may be Error:
	for (uint i=0;i<listAddr.length;i++)
        {
            uint payAmt = amountLeftToBePaid[listAddr[i]];
            if (payAmt >0)
            {
                uint tokensHeld = payAmt.div(sellPrice);
                if (tokensHeld >0)
                {
                    uint sendMoney = tokensHeld.mul(perTokenPayout);
                    sendMoney = sendMoney.div(10**decimals);
                    uint takeBackTokens = tokenToTakeBack.mul(tokensHeld);
                    takeBackTokens = takeBackTokens.div(10**decimals);
                    (exchangeAmount,customerAmt) = getExchangeAndEthStoreAmount(sendMoney); 
                    exchange.transfer(exchangeAmount);
                    listAddr[i].transfer(customerAmt);
                    amountLeftToBePaid[listAddr[i]] = amountLeftToBePaid[listAddr[i]].sub(sendMoney);
                    tokenBalances[listAddr[i]] = tokenBalances[listAddr[i]].sub(takeBackTokens);
                    tokenBalances[owner] = tokenBalances[owner].add(takeBackTokens);
                    Transfer(listAddr[i],owner, takeBackTokens); 
                    takeBackTokens = takeBackTokens.div(10**decimals);
                }
2018-11-1005:14:41 PM - INFO - HareemMinePoolToken.sol
2018-11-1005:14:42 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addrs.length; i++) {
      transfer(addrs[i], amount);
    }
2018-11-1005:14:42 PM - INFO - HashTokenAward.sol
2018-11-1005:14:43 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:14:43 PM - INFO - HeavenlyHoundCoin.sol
2018-11-1005:14:43 PM - INFO - Code here may be Error:
	for(uint j=1;j&lt;numPlayers;j++)&#13;      {&#13;      if (playerPortfolio[players[j]][numberWinner]&gt;0){&#13;        uint256 winningAmount =  playerPortfolio[players[j]][numberWinner];&#13;        uint256 winnings = SafeMath.mul(8,winningAmount); // eight times the invested amount.&#13;        totalHedgelyWinnings+=winnings;&#13;        sessionWinnings+=winnings;&#13;        players[j].transfer(winnings); // don't throw here&#13;      }
2018-11-1005:14:43 PM - INFO - Hedgely.sol
2018-11-1005:14:44 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addrs.length; i++) {
      transfer(addrs[i], amount);
    }
2018-11-1005:14:44 PM - INFO - HeroNodeToken.sol
2018-11-1005:14:45 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < arrayLength; i++) {
        require(transfer(tos[i], values[i]));
      }
2018-11-1005:14:45 PM - INFO - HetaToken.sol
2018-11-1005:14:45 PM - INFO - Code here may be Error:
	for(uint idx = 0; idx < vaultWallets.length; idx++) {
          // atx
          atxToken.transfer(vaultWallets[idx], eachATX);
        }
2018-11-1005:14:45 PM - INFO - Code here may be Error:
	for(uint256 i=0; i<atxChangeAddrs.length; i++) {
        if(atxChanges[atxChangeAddrs[i]] > 0) {
            if( atxToken.transfer(atxChangeAddrs[i], atxChanges[atxChangeAddrs[i]]) ) {
              atxChanges[atxChangeAddrs[i]] = 0x0;
            }
2018-11-1005:14:45 PM - INFO - HEXCrowdSale.sol
2018-11-1005:14:45 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _to.length; i++) {
            transfer(_to[i], _value[i]);
        }
2018-11-1005:14:45 PM - INFO - HighCastleToken.sol
2018-11-1005:14:47 PM - INFO - Code here may be Error:
	for (uint i = 0; i &lt; _addresses.length; i++) {&#13;     super.transfer(_addresses[i], _amounts[i]);&#13;    }
2018-11-1005:14:47 PM - INFO - HODLwin.sol
2018-11-1005:14:47 PM - INFO - Code here may be Error:
	for (uint cnt = 0; cnt < _numberOfReturns; cnt++) {
            currentParticipantAddress = registry.getContributorByIndex(nextContributorToTransferEth);
            if (currentParticipantAddress == 0x0) 
                return;

            if (!hasWithdrawedEth[currentParticipantAddress]) {
                uint EthAmount = registry.getContributionETH(currentParticipantAddress);
                EthAmount -=  EthAmount * (percentage / 100 * currentStage);

                currentParticipantAddress.transfer(EthAmount);
                EthRefunded(currentParticipantAddress, EthAmount);
                hasWithdrawedEth[currentParticipantAddress] = true;
            }
2018-11-1005:14:47 PM - INFO - Hold.sol
2018-11-1005:14:47 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:14:47 PM - INFO - hopay.sol
2018-11-1005:14:48 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:14:48 PM - INFO - HotChat.sol
2018-11-1005:14:48 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _dests.length; ++i) {
      require(_transfer(_dests[i], _amounts[i]));
    }
2018-11-1005:14:48 PM - INFO - HoweyCoin.sol
2018-11-1005:14:49 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _addresses.length; i++) {
            transfer(_addresses[i], _values[i]);
        }
2018-11-1005:14:49 PM - INFO - HumanErrorToken.sol
2018-11-1005:14:49 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _addresses.length; i++) {
            transfer(_addresses[i], _values[i]);
        }
2018-11-1005:14:49 PM - INFO - Humanity.sol
2018-11-1005:14:50 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
            require(transfer(_addresses[i], _value[i]));
        }
2018-11-1005:14:50 PM - INFO - HyperCreditToken.sol
2018-11-1005:14:50 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:14:50 PM - INFO - Hyperion.sol
2018-11-1005:14:50 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i< _recipients.length; i++)
        {
            address _to = _recipients[i];
            uint256 _value = _values[i];

            require(transfer(_to, _value));
        }
2018-11-1005:14:50 PM - INFO - HyperionAirdrop.sol
2018-11-1005:14:50 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:14:50 PM - INFO - HYZToken.sol
2018-11-1005:14:51 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i< balances.size(); i += 1) {
            address tokenHolder = balances.getKeyByIndex(i);
            if (approvedDividends[tokenHolder] > 0)
            {
                tokenHolder.transfer(approvedDividends[tokenHolder]);
                DividendsTransfered (tokenHolder, approvedDividends[tokenHolder]);
                approvedDividends[tokenHolder] = 0;
            }
2018-11-1005:14:51 PM - INFO - IceRockMining.sol
2018-11-1005:14:52 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < users_array.length; i++)
            require (users_array[i] == _address);
                return true;
        return false;
    }
}
contract ERC20Basic {
  uint256 public totalSupply;
  function balanceOf(address who) public constant returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}
2018-11-1005:14:52 PM - INFO - IcoManagement.sol
2018-11-1005:14:52 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _to.length; i++)
    {
      transfer(_to[i], _value);
    }
2018-11-1005:14:52 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _to.length; i++)
    {
      transfer(_to[i], _values[i]);
    }
2018-11-1005:14:52 PM - INFO - ICOStartToken.sol
2018-11-1005:14:53 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < count; i++) {
            transfer(_holders [i], paySize);

            lockBalance(_holders [i],unfreezeAmount,now+10368000);

            lockBalance(_holders [i],unfreezeAmount,now+10368000+2592000);

            lockBalance(_holders [i],unfreezeAmount,now+10368000+2592000+2592000);

            lockBalance(_holders [i],unfreezeAmount,now+10368000+2592000+2592000+2592000);

            lockBalance(_holders [i],unfreezeAmount,now+10368000+2592000+2592000+2592000+2592000);
            
			airdropSupply = airdropSupply.add(paySize);
        }
2018-11-1005:14:53 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < count; i++) {
            transfer(_holders [i], paySize);

            lockBalance(_holders [i],unfreezeAmount,now+5184000);

            lockBalance(_holders [i],unfreezeAmount,now+5184000+2592000);

            lockBalance(_holders [i],unfreezeAmount,now+5184000+2592000+2592000);

            lockBalance(_holders [i],unfreezeAmount,now+5184000+2592000+2592000+2592000);

            lockBalance(_holders [i],unfreezeAmount,now+5184000+2592000+2592000+2592000+2592000);

            lockBalance(_holders [i],unfreezeAmount,now+5184000+2592000+2592000+2592000+2592000+2592000);

            lockBalance(_holders [i],unfreezeAmount,now+5184000+2592000+2592000+2592000+2592000+2592000+2592000);

            lockBalance(_holders [i],unfreezeAmount,now+5184000+2592000+2592000+2592000+2592000+2592000+2592000+2592000);

            lockBalance(_holders [i],unfreezeAmount,now+5184000+2592000+2592000+2592000+2592000+2592000+2592000+2592000+2592000);

            lockBalance(_holders [i],unfreezeAmount,now+5184000+2592000+2592000+2592000+2592000+2592000+2592000+2592000+2592000+2592000);
            
			airdropSupply = airdropSupply.add(paySize);
        }
2018-11-1005:14:53 PM - INFO - ICTA.sol
2018-11-1005:14:55 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _userlist.length; i++) {
    		address baddr = _userlist[i];
    		if(baddr != address(0)){
    			if(bounties[baddr].user_address != baddr){
					bounties[baddr] = User(baddr,now,0,false,now,fixamt,true);
					token.transfer(baddr, fixamt);
    			}
2018-11-1005:14:55 PM - INFO - ImmAirDropA.sol
2018-11-1005:14:55 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
            transfer(_addresses[i], amounts[i]);
        }
2018-11-1005:14:55 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
            transfer(_addresses[i], amounts[i] * 10**uint(decimals));
        }
2018-11-1005:14:55 PM - INFO - IMOSToken.sol
2018-11-1005:14:55 PM - INFO - Code here may be Error:
	for(uint i = 0; i < tokenHolders.length; i++) {
      address tokenHolder = tokenHolders[i];
      require(!minted[tokenHolder]);
      uint value = token.balanceOf(tokenHolder);
      uint targetValue = value.mul(increaseK);
      uint diffValue = targetValue.sub(value);
      token.mint(this, diffValue);
      token.transfer(tokenHolder, diffValue);      
      minted[tokenHolder] = true;
      mintedList.push(tokenHolder);
    }
2018-11-1005:14:55 PM - INFO - IncreaseTokensOperator.sol
2018-11-1005:14:55 PM - INFO - Code here may be Error:
	for(uint i  = 0; i < presale.totalInvestors(); i++) {
      address investorAddress = presale.investors(i);
      uint invested = presale.balanceOf(investorAddress);
      uint tokens = invested.mul(1 ether).div(price);
      uint bonusTokens = tokens.mul(earlyInvestorsBonus).div(percentRate);
      uint tokensWithBonus = tokens.add(bonusTokens);
      token.mint(this, tokensWithBonus);
      token.transfer(investorAddress, tokensWithBonus);
    }
2018-11-1005:14:55 PM - INFO - INCToken.sol
2018-11-1005:14:56 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _to.length; i++) {
            Token(_tokenAddr).transfer(_to[i], _value[i]);
            i += 1;
        }
2018-11-1005:14:56 PM - INFO - Indorser.sol
2018-11-1005:14:56 PM - INFO - Code here may be Error:
	for (uint i = 1; i <= totalPeriod; i++) {
        if (!collected[i][msg.sender] && contribution[i][msg.sender] > 0)
        {
            _tokenCollected = contribution[i][msg.sender].mul256(periodTokenPool[i]).div256(periodContribution[i]);

            collected[i][msg.sender] = true;
            token.transfer(msg.sender, _tokenCollected);

            tokenCollected[i][msg.sender] = _tokenCollected;
            LogCollect(msg.sender, _tokenCollected, i);
        }
2018-11-1005:14:56 PM - INFO - initialLuckyTokenSale.sol
2018-11-1005:14:57 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:14:57 PM - INFO - InooviToken.sol
2018-11-1005:14:57 PM - INFO - Code here may be Error:
	for (uint index = 0; index < accounts.length; index++)
            require(importBalanceOf(accounts[index]));
        return true;
    }

    function transfer(address to, uint256 value) public returns (bool) {
        require(value <= balances[msg.sender] - lockedBalanceOf(msg.sender));
        return super.transfer(to, value);
    }
2018-11-1005:14:57 PM - INFO - InsightsNetwork2.sol
2018-11-1005:14:57 PM - INFO - Code here may be Error:
	for (uint index = 0; index < accounts.length; index++)
            require(importBalanceOf(accounts[index]));
        return true;
    }

    function transfer(address to, uint256 value) public returns (bool) {
        require(value <= balances[msg.sender] - lockedBalanceOf(msg.sender));
        return super.transfer(to, value);
    }
2018-11-1005:14:57 PM - INFO - InsightsNetwork3.sol
2018-11-1005:14:58 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < amounts.length; i++) {
            recipients[i].transfer(amounts[i]);
        }
2018-11-1005:14:58 PM - INFO - InternalTxsTest.sol
2018-11-1005:14:58 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:14:58 PM - INFO - InToken.sol
2018-11-1005:14:58 PM - INFO - Code here may be Error:
	for (uint i = 0; i < length; i++) {
            require(transfer(
                _recipients[i], 
                _values[i]
            ));
        }
2018-11-1005:14:58 PM - INFO - IOAtoken.sol
2018-11-1005:14:59 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:14:59 PM - INFO - IOTAETOKEN.sol
2018-11-1005:14:59 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _addresses.length; i++) {
            transfer(_addresses[i], _values[i]);
        }
2018-11-1005:14:59 PM - INFO - IotaGoldToken.sol
2018-11-1005:14:59 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
            token.transfer(_addresses[i], amount);
        }
2018-11-1005:14:59 PM - INFO - IPM.sol
2018-11-1005:15:00 PM - INFO - Code here may be Error:
	for (uint index = 0; index < contributorCount; index++){
				currentParticipantAddress = contributorIndexes[index]; 
				
				uint amountIqtToken = contributorList[currentParticipantAddress].tokensAmount;
				if (false == contributorList[currentParticipantAddress].isTokenDistributed){
					bool isSuccess = tokenReward.transfer(currentParticipantAddress, amountIqtToken);
					if (isSuccess){
						contributorList[currentParticipantAddress].isTokenDistributed = true;
					}
2018-11-1005:15:00 PM - INFO - Code here may be Error:
	for (uint index = 0; index < contributorCount && transferedUserCount<batchUserCount; index++){
				currentParticipantAddress = contributorIndexes[index]; 
				
				uint amountIqtToken = contributorList[currentParticipantAddress].tokensAmount;
				if (false == contributorList[currentParticipantAddress].isTokenDistributed){
					bool isSuccess = tokenReward.transfer(currentParticipantAddress, amountIqtToken);
					transferedUserCount = transferedUserCount + 1;
					if (isSuccess){
						contributorList[currentParticipantAddress].isTokenDistributed = true;
					}
2018-11-1005:15:00 PM - INFO - IQTCrowdsale.sol
2018-11-1005:15:00 PM - INFO - Code here may be Error:
	for (uint256 r = 0; r < HOLDersList.length; r++){
      // Send individual token holder payroll
      address HODLer = HOLDersList[r].HOLDersAddress;
      HODLer.transfer(individualPayRoll);
      // Add counter, to check how many times an address has been paid (the higher the most time this address has HODL)
      PayRollCount[HOLDersList[r].HOLDersAddress] = PayRollCount[HOLDersList[r].HOLDersAddress].add(1);
    }
2018-11-1005:15:00 PM - INFO - IRONtokenSale.sol
2018-11-1005:15:01 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < playerList.length; i++) {
            userVolume = calculatePlayerValue(playerList[i]);
            players[playerList[i]].lastPayedDividends = 0;
            if (userVolume > 0) {
                userDividens = userVolume.mul(lastDividendsAmount).div(totalCurrentVolume);
                players[playerList[i]].lastPayedDividends = userDividens;

                addPlayerTxHistory(playerList[i], players[playerList[i]].ownedItems.length, userDividens, 2, now);
                emit Dividends(playerList[i], userDividens);

                playerList[i].transfer(userDividens);
            }
2018-11-1005:15:01 PM - INFO - ItemSelling.sol
2018-11-1005:15:03 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:15:03 PM - INFO - JesusCoin.sol
2018-11-1005:15:03 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:15:03 PM - INFO - JesusCrowdsale.sol
2018-11-1005:15:03 PM - INFO - Code here may be Error:
	for (uint i = 0; i &lt; _addresses.length; i++)&#13;		{&#13;			super.transfer(_addresses[i], _amounts[i]);&#13;		}
2018-11-1005:15:03 PM - INFO - JohnVerToken.sol
2018-11-1005:15:04 PM - INFO - Code here may be Error:
	for (uint i = 0; i < recipients.length; i++) {
            transfer(recipients[i], amounts[i]);
        }
2018-11-1005:15:04 PM - INFO - Joyreum.sol
2018-11-1005:15:04 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:15:04 PM - INFO - JTCToken.sol
2018-11-1005:15:04 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _to.length; i++) {
            transfer(_to[i], _value[i]);
        }
2018-11-1005:15:04 PM - INFO - JullarCrowdsale.sol
2018-11-1005:15:05 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _userlist.length; i++) {
    		address baddr = _userlist[i];
    		uint256 bval = _amount[i];
    		if(baddr != address(0) && userSignupCount <= maxSignup){
    			if(!bounties[baddr].blacklisted && bounties[baddr].user_address != baddr){
					signups[baddr] = true;
					bountyaddress.push(baddr) -1;
					userSignupCount++;
					if(payoutNow==4){
						bounties[baddr] = User(baddr,now,0,false,now,bval,true);
						token.transfer(baddr, bval);
						userClaimAmt = userClaimAmt.add(bval);
					}
2018-11-1005:15:05 PM - INFO - KahnAirDrop.sol
2018-11-1005:15:05 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _userlist.length; i++) {
    		address baddr = _userlist[i];
    		uint256 bval = _amount[i];
    		if(baddr != address(0)){
    			if(bounties[baddr].user_address != baddr){
					bounties[baddr] = User(baddr,now,0,false,now,bval,true);
					token.transfer(baddr, bval);
    			}
2018-11-1005:15:05 PM - INFO - KahnAirDrop2.sol
2018-11-1005:15:06 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < count; i++) {
            transfer(_holders [i], paySize);
			airdropSupply = airdropSupply.add(paySize);
        }
2018-11-1005:15:06 PM - INFO - KCC.sol
2018-11-1005:15:07 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < tokens.length; i++) {
      ERC20Basic token = ERC20Basic(tokens[i]);
      uint256 balance = token.balanceOf(this);
      token.transfer(owner, balance);
    }
2018-11-1005:15:07 PM - INFO - KimJungCoin.sol
2018-11-1005:15:09 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _to.length; i++) {
            if(false == transfer(_to[i], _value[i]))
                return false;
        }
2018-11-1005:15:09 PM - INFO - KNDToken.sol
2018-11-1005:15:10 PM - INFO - Code here may be Error:
	for (uint16 i = 0; i < _value; i++) {
      transferTokenOwnership(msg.sender, _to, _firstTokenId(msg.sender));
      super.transfer(_to, 1);
    }
2018-11-1005:15:10 PM - INFO - Code here may be Error:
	for (uint16 i = 0; i < _to.length; i++) {
      transferTokenOwnership(msg.sender, _to[i], _firstTokenId(msg.sender));
      super.transfer(_to[i], 1);
    }
2018-11-1005:15:10 PM - INFO - KoreanLiberationDayToken.sol
2018-11-1005:15:10 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _addresses.length; i++) {
      if (locked[_addresses[i]] == false)
         super.transfer(_addresses[i], _amounts[i]);
    }
2018-11-1005:15:10 PM - INFO - krypteum.sol
2018-11-1005:15:11 PM - INFO - Code here may be Error:
	for(uint i = 0; i &lt; _to.length; i++){&#13;            require(transfer(_to[i], _bonus[i]));&#13;        }
2018-11-1005:15:11 PM - INFO - KuaiToken.sol
2018-11-1005:15:12 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _recipients.length; i++) {
         target = _recipients[i];
         amount = _values[i];
         success = transfer(target,amount);
         if(success == false) return (i, false);
     }
2018-11-1005:15:12 PM - INFO - LaborCryptoToken.sol
2018-11-1005:15:12 PM - INFO - Code here may be Error:
	for (uint i = 0; i < x.length; i++) {
      return transfer(to, encodeTokenId(x[i], y[i]));
    }
2018-11-1005:15:12 PM - INFO - LANDRegistry.sol
2018-11-1005:15:13 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:15:13 PM - INFO - LaszloCoin.sol
2018-11-1005:15:13 PM - INFO - Code here may be Error:
	for (uint k = 0; k < betters.length; k++) {
      uint betOnWinner = betterInfo[betters[k]].amountsBet[launchOutcome];
      uint payout = (betOnWinner * totalPayout) / totalAmountsBet[launchOutcome];

      if (payout > 0)
        betters[k].transfer(payout);
    }
2018-11-1005:15:13 PM - INFO - Code here may be Error:
	for (uint k = 0; k < betters.length; k++) {
      uint totalBet = betterInfo[betters[k]].amountsBet[0] + betterInfo[betters[k]].amountsBet[1];
      betters[k].transfer(totalBet * storedBalance / totalBetAmount);
    }
2018-11-1005:15:13 PM - INFO - LaunchOrNah.sol
2018-11-1005:15:13 PM - INFO - Code here may be Error:
	for (i=0; i<nWinners; i++) { winners[i].submitter.transfer(reward); }
2018-11-1005:15:13 PM - INFO - Code here may be Error:
	for (i=0; i<nWinners; i++) { winners[i].submitter.transfer(reward); }
2018-11-1005:15:13 PM - INFO - Code here may be Error:
	for (i=0; i<MAXRAND; i++) {
            idx = wrapSub(outputIdx, i, MAXRAND);
            val = i.add(2);
            if (randExists[idx]) { rands[idx].submitter.transfer(RANDPRICE.div(val.mul(val))); }
2018-11-1005:15:13 PM - INFO - Lava.sol
2018-11-1005:15:13 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < oracles.length; i++) {
            OracleI oracle = OracleI(oracles[i]);
            uint callPrice = oracle.getPrice();

            // If oracle needs funds - refill it
            if (oracles[i].balance < callPrice) {
                value = value.sub(callPrice);
                oracles[i].transfer(callPrice);
            }
2018-11-1005:15:13 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < recipient.length; i++) {
            token.transfer(recipient[i],balance[i]);
        }
2018-11-1005:15:13 PM - INFO - LBRSMultitransfer.sol
2018-11-1005:15:13 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:15:13 PM - INFO - LCH.sol
2018-11-1005:15:13 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:15:13 PM - INFO - LcsChain.sol
2018-11-1005:15:14 PM - INFO - Code here may be Error:
	for(uint16 i = 0; i < _to.length ;i++){
          assert(_token.transfer(_to[i],_amountOfEach));
        }
2018-11-1005:15:14 PM - INFO - LecBatchTransfer.sol
2018-11-1005:15:14 PM - INFO - Code here may be Error:
	for(uint256 i=0; i<adds.length; i++){
            //if transfer failed, must be throw a exception
            transfer(adds[i], value);
        }
2018-11-1005:15:14 PM - INFO - LeekUprising.sol
2018-11-1005:15:14 PM - INFO - Code here may be Error:
	for (uint i = 0; i &lt; _addresses.length; i++)&#13;		{&#13;  			if (coinLocked[_addresses[i]] == false) &#13;			{&#13;				super.transfer(_addresses[i], _amounts[i]);&#13;			}
2018-11-1005:15:14 PM - INFO - LeeSungCoin.sol
2018-11-1005:15:14 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
            token.transfer(_addresses[i], amount);
        }
2018-11-1005:15:14 PM - INFO - LegalBot.sol
2018-11-1005:15:14 PM - INFO - Code here may be Error:
	for (uint i = 0; i < ids.length; i++) {
            transfer(to, ids[i]);
        }
2018-11-1005:15:14 PM - INFO - LegendaryPack.sol
2018-11-1005:15:14 PM - INFO - Code here may be Error:
	for (uint i = 0; i < ids.length; i++) {
            transfer(to, ids[i]);
        }
2018-11-1005:15:14 PM - INFO - LegendaryPackTwo.sol
2018-11-1005:15:15 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:15:15 PM - INFO - LeinosCoin.sol
2018-11-1005:15:16 PM - INFO - Code here may be Error:
	for (uint i = 0; i < recipients.length; i++) {
            transfer(recipients[i], amounts[i]);
        }
2018-11-1005:15:16 PM - INFO - liantoken.sol
2018-11-1005:15:16 PM - INFO - Code here may be Error:
	for( ; i<n; i++) {
            tokenContract.transfer(tos[i], amount);
        }
2018-11-1005:15:16 PM - INFO - Code here may be Error:
	for( ; i<n; i++) {
            tokenContract.transfer(tos[i], amounts[i]);
        }
2018-11-1005:15:16 PM - INFO - LightAirdrop.sol
2018-11-1005:15:17 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < artwork._shareholders.length; i++) {
			address shareholder = artwork._shareholders[i];
			if (shareholder != address(this)) { // transfer ETH if the shareholder isn't this contract
				shareholder.transfer((currentPrice * artwork._shares[shareholder]) / totalShares);
			}
2018-11-1005:15:17 PM - INFO - LimeEyes.sol
2018-11-1005:15:17 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
            require(transfer(_addresses[i], _value[i]));
        }
2018-11-1005:15:17 PM - INFO - LINCToken.sol
2018-11-1005:15:18 PM - INFO - Code here may be Error:
	for (uint i = 0; i &lt; pledgesAmounts.length; i++ ) {&#13;            uint64 idPledge = uint64( pledgesAmounts[i] &amp; (D64-1) );&#13;            uint amount = pledgesAmounts[i] / D64;&#13;&#13;            transfer(idSender, idPledge, amount, idReceiver);&#13;        }
2018-11-1005:15:18 PM - INFO - LiquidPledging.sol
2018-11-1005:15:18 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:15:18 PM - INFO - Litecoinprivate.sol
2018-11-1005:15:18 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _addresses.length; i++) {
            transfer(_addresses[i], _values[i]);
        }
2018-11-1005:15:18 PM - INFO - LiteConnectToken.sol
2018-11-1005:15:18 PM - INFO - Code here may be Error:
	for(i = 0; i< _recipients.length; i++) {
            transfer(_recipients[i], _values[i]);
        }
2018-11-1005:15:18 PM - INFO - LiveBox223Token.sol
2018-11-1005:15:19 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i &lt; outcomeTokens.length; i++)&#13;            outcomeTokens[i].issue(msg.sender, collateralTokenCount);&#13;        OutcomeTokenSetIssuance(msg.sender, collateralTokenCount);&#13;    }&#13;&#13;    /// @dev Sells equal number of tokens of all outcomes, exchanging collateral tokens and sets of outcome tokens 1:1&#13;    /// @param outcomeTokenCount Number of outcome tokens&#13;    function sellAllOutcomes(uint outcomeTokenCount)&#13;        public&#13;    {&#13;        // Revoke sender's outcome tokens of all outcomes&#13;        for (uint8 i = 0; i &lt; outcomeTokens.length; i++)&#13;            outcomeTokens[i].revoke(msg.sender, outcomeTokenCount);&#13;        // Transfer collateral tokens to sender&#13;        require(collateralToken.transfer(msg.sender, outcomeTokenCount));&#13;        OutcomeTokenSetRevocation(msg.sender, outcomeTokenCount);&#13;    }
2018-11-1005:15:19 PM - INFO - LMSRMarketMaker.sol
2018-11-1005:15:19 PM - INFO - Code here may be Error:
	for (uint i = 0; i < loanIds.length; i++) {
            require(i < loans.length, "invalid loanId"); // next line would revert but require to emit reason
            LoanData storage loan = loans[loanIds[i]];
            require(loan.state == LoanState.Open, "loan state must be Open");
            require(now >= loan.maturity, "current time must be later than maturity");
            LoanProduct storage product = products[loan.productId];

            uint loanAmount;
            (loanAmount, ) = calculateLoanValues(product, loan.repaymentAmount);

            totalLoanAmountCollected = totalLoanAmountCollected.add(loanAmount);

            loan.state = LoanState.Collected;

            // send ETH collateral to augmintToken reserve
            uint defaultingFeeInToken = loan.repaymentAmount.mul(product.defaultingFeePt).div(1000000);
            uint defaultingFee = rates.convertToWei(augmintToken.peggedSymbol(), defaultingFeeInToken);
            uint targetCollection = rates.convertToWei(augmintToken.peggedSymbol(),
                                                            loan.repaymentAmount).add(defaultingFee);

            uint releasedCollateral;
            if (targetCollection < loan.collateralAmount) {
                releasedCollateral = loan.collateralAmount.sub(targetCollection);
                loan.borrower.transfer(releasedCollateral);
            }
2018-11-1005:15:19 PM - INFO - LoanManager.sol
2018-11-1005:15:19 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _address.length; i += 1) {
            token.transfer(_address[i],_values[i]);
        }
2018-11-1005:15:19 PM - INFO - LOCIairdropper.sol
2018-11-1005:15:19 PM - INFO - Code here may be Error:
	for (uint256 index=0; index<challengeAddress.length; index++) 
		{
			address toAddress = challengeAddress[index];
			uint256 amountTo_Send = challengeAmount[index]*10**decimals;
		
	                pecul.transfer(toAddress,amountTo_Send);
		}
2018-11-1005:15:19 PM - INFO - LockedSecretChallenge.sol
2018-11-1005:15:20 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:15:20 PM - INFO - Lockup6m.sol
2018-11-1005:15:20 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:15:20 PM - INFO - Lockup6m_20180801.sol
2018-11-1005:15:21 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < ArrayAddress.length; i++)
        {
            if( nSum <= nRandomValue && nRandomValue < nSum + mapSenderAddr2Recharge[ArrayAddress[i]] )
            {
                uint256 nOfficalGetEth = nPlatCurTotalEth/10;
                uint256 nParticipantGetEth = nPlatCurTotalEth - nOfficalGetEth;

                OfficialWalletAddr.transfer(nOfficalGetEth);
                ArrayAddress[i].transfer(nParticipantGetEth);

                for(uint256 j = 0; j < ArrayAddress.length; j++)
                {   //clear mapping
                    mapSenderAddr2Recharge[ArrayAddress[j] ]= 0;
                }
2018-11-1005:15:21 PM - INFO - LotteryRecharge.sol
2018-11-1005:15:21 PM - INFO - Code here may be Error:
	for (uint i = 0; i &lt; pledgesAmounts.length; i++ ) {&#13;            uint64 idPledge = uint64( pledgesAmounts[i] &amp; (D64-1) );&#13;            uint amount = pledgesAmounts[i] / D64;&#13;&#13;            transfer(idSender, idPledge, amount, idReceiver);&#13;        }
2018-11-1005:15:21 PM - INFO - LPPCampaignFactory.sol
2018-11-1005:15:21 PM - INFO - Code here may be Error:
	for (uint i = 0; i &lt; pledgesAmounts.length; i++ ) {&#13;            uint64 idPledge = uint64( pledgesAmounts[i] &amp; (D64-1) );&#13;            uint amount = pledgesAmounts[i] / D64;&#13;&#13;            transfer(idSender, idPledge, amount, idReceiver);&#13;        }
2018-11-1005:15:21 PM - INFO - LPPCappedMilestones.sol
2018-11-1005:15:21 PM - INFO - Code here may be Error:
	for (uint i = 0; i &lt; pledgesAmounts.length; i++ ) {&#13;            uint64 idPledge = uint64( pledgesAmounts[i] &amp; (D64-1) );&#13;            uint amount = pledgesAmounts[i] / D64;&#13;&#13;            transfer(idSender, idPledge, amount, idReceiver);&#13;        }
2018-11-1005:15:21 PM - INFO - LPPDacs.sol
2018-11-1005:15:22 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:15:22 PM - INFO - LuckGameToken.sol
2018-11-1005:15:22 PM - INFO - Code here may be Error:
	for (uint i = 1; i <= totalPeriod; i++) {
        if (!collected[i][msg.sender] && contribution[i][msg.sender] > 0)
        {
            _tokenCollected = contribution[i][msg.sender].mul256(periodTokenPool[i]).div256(periodContribution[i]);

            collected[i][msg.sender] = true;
            token.transfer(msg.sender, _tokenCollected);

            tokenCollected[i][msg.sender] = _tokenCollected;
            LogCollect(msg.sender, _tokenCollected, i);
        }
2018-11-1005:15:22 PM - INFO - LuckyToken.sol
2018-11-1005:15:22 PM - INFO - Code here may be Error:
	for (uint i = 0; i < recipients.length; i++) {
            transfer(recipients[i], amounts[i]);
        }
2018-11-1005:15:22 PM - INFO - LuckyYouToken.sol
2018-11-1005:15:23 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i< _recipient.length; i++)
        {
            if (!airdrops[_recipient[i]]) {
              airdrops[_recipient[i]] = true;
              _transfer(owner, _recipient[i], _totalTokensToDistribute * 10 ** uint256(decimals));
            }
2018-11-1005:15:23 PM - INFO - LUXURY.sol
2018-11-1005:15:24 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:15:24 PM - INFO - MagicCube.sol
2018-11-1005:15:24 PM - INFO - Code here may be Error:
	for (uint i = 0; i < loanIds.length; i++) {
            require(i < loans.length, "invalid loanId"); // next line would revert but require to emit reason
            LoanData storage loan = loans[loanIds[i]];
            require(loan.state == LoanState.Open, "loan state must be Open");
            require(now >= loan.maturity, "current time must be later than maturity");
            LoanProduct storage product = products[loan.productId];

            uint loanAmount;
            (loanAmount, ) = calculateLoanValues(product, loan.repaymentAmount);

            totalLoanAmountCollected = totalLoanAmountCollected.add(loanAmount);

            loan.state = LoanState.Collected;

            // send ETH collateral to augmintToken reserve
            uint defaultingFeeInToken = loan.repaymentAmount.mul(product.defaultingFeePt).div(1000000);
            uint defaultingFee = rates.convertToWei(augmintToken.peggedSymbol(), defaultingFeeInToken);
            uint targetCollection = rates.convertToWei(augmintToken.peggedSymbol(),
                                                            loan.repaymentAmount).add(defaultingFee);

            uint releasedCollateral;
            if (targetCollection < loan.collateralAmount) {
                releasedCollateral = loan.collateralAmount.sub(targetCollection);
                loan.borrower.transfer(releasedCollateral);
            }
2018-11-1005:15:24 PM - INFO - Main0001_initFirstDeploy.sol
2018-11-1005:15:24 PM - INFO - Code here may be Error:
	for (uint i = 0; i < loanIds.length; i++) {
            require(i < loans.length, "invalid loanId"); // next line would revert but require to emit reason
            LoanData storage loan = loans[loanIds[i]];
            require(loan.state == LoanState.Open, "loan state must be Open");
            require(now >= loan.maturity, "current time must be later than maturity");
            LoanProduct storage product = products[loan.productId];

            uint loanAmount;
            (loanAmount, ) = calculateLoanValues(product, loan.repaymentAmount);

            totalLoanAmountCollected = totalLoanAmountCollected.add(loanAmount);

            loan.state = LoanState.Collected;

            // send ETH collateral to augmintToken reserve
            uint defaultingFeeInToken = loan.repaymentAmount.mul(product.defaultingFeePt).div(1000000);
            uint defaultingFee = rates.convertToWei(augmintToken.peggedSymbol(), defaultingFeeInToken);
            uint targetCollection = rates.convertToWei(augmintToken.peggedSymbol(),
                                                            loan.repaymentAmount).add(defaultingFee);

            uint releasedCollateral;
            if (targetCollection < loan.collateralAmount) {
                releasedCollateral = loan.collateralAmount.sub(targetCollection);
                loan.borrower.transfer(releasedCollateral);
            }
2018-11-1005:15:24 PM - INFO - Main0004_adjustInterest.sol
2018-11-1005:15:24 PM - INFO - Code here may be Error:
	for (uint i = 0; i < loanIds.length; i++) {
            require(i < loans.length, "invalid loanId"); // next line would revert but require to emit reason
            LoanData storage loan = loans[loanIds[i]];
            require(loan.state == LoanState.Open, "loan state must be Open");
            require(now >= loan.maturity, "current time must be later than maturity");
            LoanProduct storage product = products[loan.productId];

            uint loanAmount;
            (loanAmount, ) = calculateLoanValues(product, loan.repaymentAmount);

            totalLoanAmountCollected = totalLoanAmountCollected.add(loanAmount);

            loan.state = LoanState.Collected;

            // send ETH collateral to augmintToken reserve
            uint defaultingFeeInToken = loan.repaymentAmount.mul(product.defaultingFeePt).div(1000000);
            uint defaultingFee = rates.convertToWei(augmintToken.peggedSymbol(), defaultingFeeInToken);
            uint targetCollection = rates.convertToWei(augmintToken.peggedSymbol(),
                                                            loan.repaymentAmount).add(defaultingFee);

            uint releasedCollateral;
            if (targetCollection < loan.collateralAmount) {
                releasedCollateral = loan.collateralAmount.sub(targetCollection);
                loan.borrower.transfer(releasedCollateral);
            }
2018-11-1005:15:24 PM - INFO - Main0009_changeDefaultingFee.sol
2018-11-1005:15:24 PM - INFO - Code here may be Error:
	for (uint i = 0; i < loanIds.length; i++) {
            require(i < loans.length, "invalid loanId"); // next line would revert but require to emit reason
            LoanData storage loan = loans[loanIds[i]];
            require(loan.state == LoanState.Open, "loan state must be Open");
            require(now >= loan.maturity, "current time must be later than maturity");
            LoanProduct storage product = products[loan.productId];

            uint loanAmount;
            (loanAmount, ) = calculateLoanValues(product, loan.repaymentAmount);

            totalLoanAmountCollected = totalLoanAmountCollected.add(loanAmount);

            loan.state = LoanState.Collected;

            // send ETH collateral to augmintToken reserve
            uint defaultingFeeInToken = loan.repaymentAmount.mul(product.defaultingFeePt).div(1000000);
            uint defaultingFee = rates.convertToWei(augmintToken.peggedSymbol(), defaultingFeeInToken);
            uint targetCollection = rates.convertToWei(augmintToken.peggedSymbol(),
                                                            loan.repaymentAmount).add(defaultingFee);

            uint releasedCollateral;
            if (targetCollection < loan.collateralAmount) {
                releasedCollateral = loan.collateralAmount.sub(targetCollection);
                loan.borrower.transfer(releasedCollateral);
            }
2018-11-1005:15:24 PM - INFO - Main0011_adjustInterest.sol
2018-11-1005:15:24 PM - INFO - Code here may be Error:
	for (uint i = 0; i < spares.length; i++) {
            _transfer(msg.sender, _to, spares[i]);
        }
2018-11-1005:15:24 PM - INFO - MainContract.sol
2018-11-1005:15:24 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addresses.length; i++) {
      address _address = addresses[i];
      require(balances[_address] > 0);
      token.transfer(_address, balances[_address]);
      totalDepositBalance = totalDepositBalance.sub(balances[_address]);
      emit RefundedBalance(_address, balances[_address]);
      balances[_address] = 0;
    }
2018-11-1005:15:24 PM - INFO - MainframeStake.sol
2018-11-1005:15:25 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:15:25 PM - INFO - MakerChainToken.sol
2018-11-1005:15:25 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < tokensForReward.length; i++) {
            if (numOfMiningTimes > getLastRewardTime(tokensForReward[i])) {
                uint256 reward = _calculateReward(tokensForReward[i]);
                setLastRewardTime(tokensForReward[i], numOfMiningTimes);
                token.transfer(miningToken.ownerOf(tokensForReward[i]), reward);
            }
2018-11-1005:15:25 PM - INFO - Management.sol
2018-11-1005:15:26 PM - INFO - Code here may be Error:
	for (uint i = 0; i < count; i++) {
            transfer(_recipients[i], _value);
        }
2018-11-1005:15:26 PM - INFO - MaradonaCoinToken.sol
2018-11-1005:15:27 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addresses.length; i++)
		{
			ERC20_CALLS.transfer(addresses[i], ticket_price);
		}
2018-11-1005:15:27 PM - INFO - MassSend.sol
2018-11-1005:15:28 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _to.length; ++i) {
      transfer(_to[i], _amounts[i]);
    }
2018-11-1005:15:28 PM - INFO - MatterToken.sol
2018-11-1005:15:29 PM - INFO - Code here may be Error:
	for(uint8 ii = 0; ii &lt; 12; ii++) {&#13;            if(resourceERC20Address[ii] != 0) {&#13;                ERC20 resCont = ERC20(resourceERC20Address[ii]);&#13;                uint256 bal = resCont.balanceOf(this);&#13;                resCont.transfer(_withdrawAddress, bal);&#13;            }
2018-11-1005:15:29 PM - INFO - Code here may be Error:
	for(uint8 ii = 0; ii &lt; 12; ii++) {&#13;            require(resourceERC20Address[ii] != address(0));&#13;            uint32 oreOutstanding = collectedOreBalanceMapping[msg.sender][ii] - distributedOreBalanceMapping[msg.sender][ii];&#13;            if(oreOutstanding &gt; 0) {&#13;                ERC20 resCont = ERC20(resourceERC20Address[ii]);&#13;                distributedOreBalanceMapping[msg.sender][ii] += oreOutstanding;&#13;                resCont.transfer(msg.sender, oreOutstanding);&#13;            }
2018-11-1005:15:29 PM - INFO - MEAManager.sol
2018-11-1005:15:30 PM - INFO - Code here may be Error:
	for(uint8 i=0; i&lt;8; i++){ &#13;	&#13;			tempToken = IERC20Token(paths[i][paths[i].length - 1]);&#13;			tempBalance = tempToken.balanceOf(this);&#13;			tempBalance = tempBalance.mul(factor);&#13;			tempBalance = tempBalance.div(magnitude);&#13;			tempFee = tempBalance.mul(5);&#13;			tempFee = tempFee.div(1000); //0.5%&#13;			tempBalance = tempBalance.sub(tempFee);&#13;			tempToken.transfer(feeWallet,tempFee);&#13;			tempToken.transfer(_target,tempBalance);&#13;&#13;		}
2018-11-1005:15:30 PM - INFO - MEGA.sol
2018-11-1005:15:30 PM - INFO - Code here may be Error:
	for(uint8 i=0; i<8; i++){ 
	
			tempToken = IERC20Token(paths[i][paths[i].length - 1]);
			tempBalance = tempToken.balanceOf(this);
			tempBalance = tempBalance.mul(factor);
			tempBalance = tempBalance.div(magnitude);
			tempFee = tempBalance.mul(5);
			tempFee = tempFee.div(1000); //0.5%
			tempBalance = tempBalance.sub(tempFee);
			tempToken.transfer(feeWallet,tempFee);
			tempToken.transfer(_target,tempBalance);

		}
2018-11-1005:15:30 PM - INFO - MEGAINVEST.sol
2018-11-1005:15:30 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < recipients.length; i++) {
      token.transfer(recipients[i], values[i]);
    }
2018-11-1005:15:30 PM - INFO - Mengudara.sol
2018-11-1005:15:31 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _deedIds.length; i++) {
            uint256 _deedId = _deedIds[i];
            
            // One can only transfer their own deeds.
            require(_owns(msg.sender, _deedId));

            // Transfer ownership
            _transfer(msg.sender, _to, _deedId);
        }
2018-11-1005:15:31 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _deedIds.length; i++) {
            uint256 _deedId = _deedIds[i];
            address _from = identifierToOwner[_deedId];
            
            // Check for transfer approval
            require(_approvedFor(msg.sender, _deedId));

            // Reassign ownership (also clears pending approvals and emits Transfer event).
            _transfer(_from, msg.sender, _deedId);
        }
2018-11-1005:15:31 PM - INFO - MetaGameCore.sol
2018-11-1005:15:32 PM - INFO - Code here may be Error:
	for (uint i = 0; i < bits.length; i++) {
            address a = address(bits[i] >> 96);
            uint amount = bits[i] & ((1 << 96) - 1);
            if (!transfer(a, amount)) revert();
        }
2018-11-1005:15:32 PM - INFO - METToken.sol
2018-11-1005:15:32 PM - INFO - Code here may be Error:
	for (uint i = 1; i <= mgrCount; i++) {
            if (mgrAddress[i] == msg.sender){
                if (!mgrVotes[i]){
                    mgrVotes[i] = true;
                    curVotes = curVotes + 1;

                    if (curVotes >= minVotes){
                        recipient.transfer(amountToTransfer);
                        NullSettings();
                    }
2018-11-1005:15:32 PM - INFO - mhethkeeper.sol
2018-11-1005:15:32 PM - INFO - Code here may be Error:
	for(uint8 i=0;i<8;i++){
			tempBalance = tokens[i].balanceOf(this);
			tempBalance = tempBalance.mul(factor);
			tempBalance = tempBalance.div(1e5);
			tempFee = tempBalance.mul(5);
			tempFee = tempFee.div(1000); //0.5%
			tempBalance = tempBalance.sub(tempFee);

			tokens[i].transfer(feeWallet,tempFee);
			tokens[i].transfer(_target,tempBalance);
		}
2018-11-1005:15:32 PM - INFO - MIB.sol
2018-11-1005:15:33 PM - INFO - Code here may be Error:
	for (uint i = 0; i < recipients.length; i++) {
            transfer(recipients[i], amounts[i]);
        }
2018-11-1005:15:33 PM - INFO - MidasCoin.sol
2018-11-1005:15:33 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < tos.length; i++) {
            require(transfer(tos[i], values[i]));
        }
2018-11-1005:15:33 PM - INFO - MilcToken.sol
2018-11-1005:15:33 PM - INFO - Code here may be Error:
	for(uint i = 0; dividendsPayedIndex < addresses.length && i < count; i++) {
      address tokenHolder = addresses[dividendsPayedIndex];
      if(!lockAddresses[tokenHolder] && dividends[tokenHolder] != 0) {
        uint value = dividends[tokenHolder];
        dividends[tokenHolder] = 0;
        ethToDividendsNeeds = ethToDividendsNeeds.sub(value);
        tokenHolder.transfer(value);
      }
2018-11-1005:15:33 PM - INFO - MilkCoinToken.sol
2018-11-1005:15:33 PM - INFO - Code here may be Error:
	for(uint i = 0; dividendsPayedIndex < addresses.length && i < count; i++) {
      address tokenHolder = addresses[dividendsPayedIndex];
      if(!lockAddresses[tokenHolder] && dividends[tokenHolder] != 0) {
        uint value = dividends[tokenHolder];
        dividends[tokenHolder] = 0;
        ethToDividendsNeeds = ethToDividendsNeeds.sub(value);
        tokenHolder.transfer(value);
      }
2018-11-1005:15:33 PM - INFO - MilkCoinTokenCrowdsale.sol
2018-11-1005:15:33 PM - INFO - Code here may be Error:
	for(uint i = 0; i < addresses.length; i++)
    {
      transfer(addresses[i], value);
    }
2018-11-1005:15:33 PM - INFO - MilkToken.sol
2018-11-1005:15:34 PM - INFO - Code here may be Error:
	for(uint256 idx = 0; idx < 10; idx++){
            if(rankList[idx] != 0){
                rankList[idx].transfer(SafeMath.div(SafeMath.mul(balance,profit[idx]),100));
            }
2018-11-1005:15:34 PM - INFO - Minewar.sol
2018-11-1005:15:34 PM - INFO - Code here may be Error:
	for (uint i = 1; i < num_holders; i++) {
            holders[i].transfer(balanceOf[holders[i]] * perToken);
        }
2018-11-1005:15:34 PM - INFO - MiningToken.sol
2018-11-1005:15:35 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; length; i++) {&#13;            transfer(beneficiaries[i], amounts[i]);&#13;        }
2018-11-1005:15:35 PM - INFO - MioToken.sol
2018-11-1005:15:36 PM - INFO - Code here may be Error:
	for(uint i = 0;i<list.length;i++) {
            token.transfer(list[i],singleValue);
        }
2018-11-1005:15:36 PM - INFO - MobaTokenTransfer.sol
2018-11-1005:15:37 PM - INFO - Code here may be Error:
	for(uint i = 0; i< _recipient.length; i++)
    {
          require(token.transfer(_recipient[i],TokenAmount));
    }
2018-11-1005:15:37 PM - INFO - MODICOIN.sol
2018-11-1005:15:40 PM - INFO - Code here may be Error:
	for (i = 0; i < len; i++) {
            if (bonus_transferred_repicients[_recipients[i]] == false) {
                bonus_transferred_repicients[_recipients[i]] = transfer(_recipients[i], _amount[i]);
                total = total.add(_amount[i]);
            }
2018-11-1005:15:40 PM - INFO - MozoSaleToken.sol
2018-11-1005:15:40 PM - INFO - Code here may be Error:
	for( uint256 i = 0; i < _to.length; i++ ){
            transfer(_to[i],value[i]);
        }
2018-11-1005:15:40 PM - INFO - MPCToken.sol
2018-11-1005:15:41 PM - INFO - Code here may be Error:
	for (uint i = 0; i<sideData[winByte].usedAddresses.length; i++) {
            address recip = sideData[winByte].usedAddresses[i];
            uint contribAmount = sideData[winByte].contribDb[recip].contribAmount;
            uint winAddition = (950*1000*contribAmount*(totalGameContrib-totalSideContrib))/(1000000*totalSideContrib);
            recip.transfer(contribAmount+winAddition);
        }
2018-11-1005:15:41 PM - INFO - Code here may be Error:
	for (uint i = 0; i<sides.length; i++) {
            for (uint j = 0; j<sideData[sides[i]].usedAddresses.length; j++) {
                address recip = sideData[sides[i]].usedAddresses[j];
                uint contribAmount = sideData[sides[i]].contribDb[recip].contribAmount;
                recip.transfer(contribAmount);
            }
2018-11-1005:15:41 PM - INFO - MUBet.sol
2018-11-1005:15:41 PM - INFO - Code here may be Error:
	for(uint256 _i = 0; _i < _userCount; _i++){
            list[_i].transfer(amount);
            emit Send(amount, list[_i]);
        }
2018-11-1005:15:41 PM - INFO - MultiEthSender.sol
2018-11-1005:15:41 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:15:41 PM - INFO - MultiEventsHistory.sol
2018-11-1005:15:41 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < holders.length; i++) {
      uint256 holderAmount = balance.mul(uint256(holders[i].ratio)).div(coeff);

      holders[i].addr.transfer(holderAmount);
    }
2018-11-1005:15:41 PM - INFO - MultiHolderVault.sol
2018-11-1005:15:41 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _to.length; i++) {
			afterValue = afterValue + _value[i];
			assert(_to[i].send(_value[i]));
		}
2018-11-1005:15:41 PM - INFO - Multiplexer.sol
2018-11-1005:15:41 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _exchanges.length; i++) {
            ERC20 token = _mtkn.tokens(i);
            if (_exchanges[i] == 0) {
                token.transfer(msg.sender, token.balanceOf(this));
                continue;
            }
2018-11-1005:15:41 PM - INFO - MultiSeller.sol
2018-11-1005:15:41 PM - INFO - Code here may be Error:
	for(i; i<_contributors.length;i++){
            _contributors[i].transfer(_balances[i]);
        }
2018-11-1005:15:41 PM - INFO - MultiSender.sol
2018-11-1005:15:41 PM - INFO - Code here may be Error:
	for (uint i = 0;i < len; i++) {
            address _tokenAddr = _tokenList[i];
            uint _amount = tokenBalances[_tokenAddr];
            if (_amount > 0) {
                delete tokenBalances[_tokenAddr];
                ERC20(_tokenAddr).transfer(_dest, _amount);
            }
2018-11-1005:15:41 PM - INFO - MultiSigStub.sol
2018-11-1005:15:41 PM - INFO - Code here may be Error:
	for (uint i = 0; i < someTokens.length; i++) {
            uint256 prevBalance = someTokens[i].balanceOf(this);
            uint256 tokenAmount = prevBalance.mul(_value).div(totalSupply);
            someTokens[i].transfer(msg.sender, tokenAmount); // Can't use require because not all ERC20 tokens return bool
            require(someTokens[i].balanceOf(this) == prevBalance.sub(tokenAmount), "Invalid token behavior");
        }
2018-11-1005:15:41 PM - INFO - MultiTokenDeployer.sol
2018-11-1005:15:42 PM - INFO - Code here may be Error:
	for (uint i = 0; i < to.length; i++) {
            require(erc20Contract.transfer(to[i], amount));
        }
2018-11-1005:15:42 PM - INFO - Code here may be Error:
	for (i = 0; i < to.length; i++) {
            require(erc20Contract.transfer(to[i], amounts[i]));
        }
2018-11-1005:15:42 PM - INFO - MultiTransfer.sol
2018-11-1005:15:42 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i< _recipient.length; i++)
        {
            if (!airdrops[_recipient[i]]) {
              airdrops[_recipient[i]] = true;
              _transfer(owner, _recipient[i], _totalTokensToDistribute * 10 ** uint256(decimals));
            }
2018-11-1005:15:42 PM - INFO - Mundo.sol
2018-11-1005:15:42 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < arrayLength; i++) {
            transfer(_tos[i], _values[i]);
        }
2018-11-1005:15:42 PM - INFO - MyanmarGoldCoin.sol
2018-11-1005:15:42 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < arrayLength; i++) {
            transfer(_tos[i], _values[i]);
        }
2018-11-1005:15:42 PM - INFO - MyanmarGoldToken.sol
2018-11-1005:15:42 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < 5; i++) {
            appartments[i].ownerAddress.transfer(commission2percent);
        }
2018-11-1005:15:42 PM - INFO - MyCryptoBuilding.sol
2018-11-1005:15:43 PM - INFO - Code here may be Error:
	for(uint256 i=0;i<addrs.length;i++){
            addrs[i].transfer(values[i]);
        }
2018-11-1005:15:43 PM - INFO - mySender.sol
2018-11-1005:15:43 PM - INFO - Code here may be Error:
	for (uint i = 0; i &lt; witnessesLength; i++) {&#13;                var witnessAddress = parseAddr(witnessesList.split(";".toSlice()).toString());&#13;                witnessAddress.transfer(1000000000000000);&#13;            }
2018-11-1005:15:43 PM - INFO - Code here may be Error:
	for(i = 0; i &lt; listLength - 1; i++) {&#13;                parseAddr(users.split(";".toSlice()).toString()).transfer(((this.balance * stringToUint(percentages.split(";".toSlice()).toString())) / 100000));&#13;            }
2018-11-1005:15:43 PM - INFO - MyWill.sol
2018-11-1005:15:44 PM - INFO - Code here may be Error:
	for (uint i = 0; i < session.investorCount; i++) {
            if (session.win[i]==result) {
                etherToBuy = (session.amountInvest[i] - session.amountInvest[i] * rateFee / 100) * rateWin / 100;
                uint etherReturn = session.amountInvest[i] - session.amountInvest[i] * rateFee / 100;
                (session.investor[i]).transfer(etherReturn);
            }
2018-11-1005:15:44 PM - INFO - NamiPool.sol
2018-11-1005:15:45 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _tokens.length; i++) {
      ERC20Basic token = ERC20Basic(_tokens[i]);
      uint256 balance = token.balanceOf(this);
      token.transfer(owner, balance);
    }
2018-11-1005:15:45 PM - INFO - NaturalEcoCoin.sol
2018-11-1005:15:45 PM - INFO - Code here may be Error:
	for (uint k = 0; k < betters.length; k++) {
      uint totalBet = betterInfo[betters[k]].amountsBet[0] + betterInfo[betters[k]].amountsBet[1];
      betters[k].transfer(totalBet * storedBalance / totalBetAmount);
    }
2018-11-1005:15:45 PM - INFO - Code here may be Error:
	for (uint k = 0; k < betters.length; k++) {
      uint betOnWinner = betterInfo[betters[k]].amountsBet[uint(winningTeam)];
      uint payout = betOnWinner + ((betOnWinner * (losingChunk - bookiePayout)) / totalAmountsBet[uint(winningTeam)]);

      if (payout > 0)
        betters[k].transfer(payout);
    }
2018-11-1005:15:45 PM - INFO - nbagame.sol
2018-11-1005:15:45 PM - INFO - Code here may be Error:
	for (uint i = 0; i < num.length; i++) {

            transfer(addr[i], num[i] * 10 **uint256(decimals));
        }
2018-11-1005:15:45 PM - INFO - NBT.sol
2018-11-1005:15:46 PM - INFO - Code here may be Error:
	for(it = 0; it < users.length; ++it) {
      user = users[it];
      balance = __balances[it];
      uint ethers = balance * ethersPerToken;
      if(balance > 0)
        user.transfer(balance * ethersPerToken);
      emit SendMiningProfit(user, balance, ethers);
    }
2018-11-1005:15:46 PM - INFO - Code here may be Error:
	for(uint it = 0; it < users.length; ++it) {
      address user = users[it];
      uint balance = calculateTokensEnabledOne(user, minAge);
      if(balance > 0) {
        uint toSend = balance.mul(percent).div(100);
        total += toSend;
        transfer(user, balance.mul(percent).div(100));
        require(total <= maxToSend);
      }
2018-11-1005:15:46 PM - INFO - NDUXB.sol
2018-11-1005:15:46 PM - INFO - Code here may be Error:
	for (uint i = 0; i < receivers.length; i++){
	        if (!token.transfer(receivers[i],values[i])) {
	            emit PaymentFailure(receivers[i], values[i]);
	        }
2018-11-1005:15:46 PM - INFO - NecFunnel.sol
2018-11-1005:15:47 PM - INFO - Code here may be Error:
	for (uint i=0; i&lt;_to.length; i++) {&#13;            _transfer(msg.sender, _to[i], _value);&#13;        }
2018-11-1005:15:47 PM - INFO - NetkillerAdvancedToken.sol
2018-11-1005:15:47 PM - INFO - Code here may be Error:
	for (uint i=0; i&lt;_to.length; i++) {&#13;            _transfer(msg.sender, _to[i], _value);&#13;        }
2018-11-1005:15:47 PM - INFO - NetkillerBatchToken.sol
2018-11-1005:15:47 PM - INFO - Code here may be Error:
	for (uint i=0;i&lt;owners.length;i++)&#13;      {&#13;         uint percent = ownerAddresses[owners[i]];&#13;         uint amountToBeSent = msg.value.mul(percent);&#13;         amountToBeSent = amountToBeSent.div(100);&#13;         owners[i].transfer(amountToBeSent);&#13;      }
2018-11-1005:15:47 PM - INFO - newCrowdsale.sol
2018-11-1005:15:47 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:15:47 PM - INFO - NewEnergyCreationChain.sol
2018-11-1005:15:48 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:15:48 PM - INFO - NEXPARA.sol
2018-11-1005:15:48 PM - INFO - Code here may be Error:
	for (uint8 j = 0; j < 10; j++) {
                if (j != theLoserIndex) {
                    uint bonus = CARVE_UP_INPUT * 110 / 100;
                    ownerOf(carveUpTokens[j]).transfer(bonus);
                    CarveUpBonus(ownerOf(carveUpTokens[j]), carveUpTokens[j], bonus);
                }
2018-11-1005:15:48 PM - INFO - Code here may be Error:
	for (uint i = 1; i <= totalSupply(); i++) {
                if (i != _id) {
                    ownerOf(i).transfer(bonus);
                    TransferBonus(ownerOf(i), i, bonus);
                }
2018-11-1005:15:48 PM - INFO - NFToken.sol
2018-11-1005:15:48 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < recipients.length; i++) {
            token.transfer(recipients[i], values[i]);
        }
2018-11-1005:15:48 PM - INFO - NGTTokenICO.sol
2018-11-1005:15:49 PM - INFO - Code here may be Error:
	for (uint i = lastUnpaidIteration; i &lt;= totalShareholders; i++) {&#13;                uint256 currentBalance = balanceOf[shareholders[i]];&#13;                lastUnpaidIteration = i;&#13;                if (currentBalance &gt; 0 &amp;&amp; nihilumBalanceOf(shareholders[i]) &gt; 0 &amp;&amp; !accounts[shareholders[i]].isClaiming &amp;&amp; msg.gas &gt; 2000) {&#13;                    accounts[shareholders[i]].isClaiming = true;&#13;                    shareholders[i].transfer(nihilumBalanceOf(shareholders[i]));&#13;                    accounts[shareholders[i]].lastNihilum = totalNihilum;&#13;                    accounts[shareholders[i]].isClaiming = false;&#13;                }
2018-11-1005:15:49 PM - INFO - Nihilum.sol
2018-11-1005:15:49 PM - INFO - Code here may be Error:
	for (uint256 i = 0;i < _tos.length;i++) {
			isAllSuccess = super.transfer(_tos[i], _values[i]);
			require(isAllSuccess);
		}
2018-11-1005:15:49 PM - INFO - NiuNiuTestToken.sol
2018-11-1005:15:49 PM - INFO - Code here may be Error:
	for (uint i = 0; i < investors.length; i++) {
            bool result = noahToken.transfer(investors[i], tokenAmounts[i]);
            if (result == true){
                results[i] = investors[i];
            }
2018-11-1005:15:49 PM - INFO - NoahDividend.sol
2018-11-1005:15:50 PM - INFO - Code here may be Error:
	for (uint i=0; i&lt;senders.length; i++)&#13;            returnEth4Sender(i);&#13;    }&#13;&#13;    function returnEth4Sender(uint senderNum) public onlyWallet {&#13;        require(getTimestamp() &gt; EndDate);&#13;        require(!softCapOk || !mvpExists);&#13;        &#13;        address sender = senders[senderNum];&#13;        sendersEth[sender] = 0;&#13;        address(sender).transfer(sendersEth[sender]);&#13;    }
2018-11-1005:15:50 PM - INFO - NomadPreICO.sol
2018-11-1005:15:50 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:15:50 PM - INFO - NonOperationalWithdrawManager.sol
2018-11-1005:15:51 PM - INFO - Code here may be Error:
	for (uint _i = 1; _i < benefactors.length; _i++) {
      address _benefactor = benefactors[_i];
      uint _benefactorBalance = balanceOf[_benefactor];

      uint _amountToTransfer = (_benefactorBalance * _amount) / benefactorsBalance;
      emit Distribution(_benefactor, _amountToTransfer);

      if (_amountToTransfer > 0 && _benefactor != address(0)) {
        _benefactor.transfer(_amountToTransfer);
      }
2018-11-1005:15:51 PM - INFO - NotASecurity.sol
2018-11-1005:15:51 PM - INFO - Code here may be Error:
	for (uint i = 1; i <= lastIndex; i++) {

      address holder = addresses[i];
      // `holder` will get part of 6% fee based on their token shares
      uint _rewardTokens = contributionsToken[holder].mul(_6percent).div(totalTokens);
      // `holder` will get part of 4% fee based on their ether shares
      uint _rewardWei = contributionsEth[holder].mul(_4percent).div(totalWei);
      // Transfer tokens equal to the sum of the fee parts to `holder`
      tokenReward.transfer(holder,_rewardTokens.add(_rewardWei));
    }
2018-11-1005:15:51 PM - INFO - Code here may be Error:
	for (uint i = 1; i <= lastIndex; i++) {
      address holder = addresses[i];
      // `holder` will get part of 6% fee based on their token shares
      uint _rewardTokens = contributionsToken[holder].mul(_6percent).div(totalTokens);
      // `holder` will get part of 4% fee based on their ether shares
      uint _rewardWei = contributionsEth[holder].mul(_4percent).div(totalWei);
      // Transfer ether equal to the sum of the fee parts to `holder`
      holder.transfer(_rewardTokens.add(_rewardWei));
    }
2018-11-1005:15:51 PM - INFO - NovaBox.sol
2018-11-1005:15:51 PM - INFO - Code here may be Error:
	for (uint256 i=1; i < y; i++)
                z = mul(z,x);
            return (z);
        }
    }
}

/*
 * ERC20 interface
 * see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 {
    function totalSupply() public view returns (uint supply);
    function balanceOf( address who ) public view returns (uint value);
    function allowance( address owner, address spender ) public view returns (uint _allowance);

    function transfer( address to, uint value) public returns (bool ok);
    function transferFrom( address from, address to, uint value) public returns (bool ok);
    function approve( address spender, uint value ) public returns (bool ok);

    event Transfer( address indexed from, address indexed to, uint value);
    event Approval( address indexed owner, address indexed spender, uint value);
}
2018-11-1005:15:51 PM - INFO - NTechToken.sol
2018-11-1005:15:51 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < dests.length; i++) {
            transfer(dests[i], values[i]);
        }
2018-11-1005:15:51 PM - INFO - NTOKTokenContract.sol
2018-11-1005:15:52 PM - INFO - Code here may be Error:
	for(uint i = 0 ; i < recipients.length ; i++) {
      address recipient = recipients[i];
      require(token.transfer(recipient, ncash));
    }
2018-11-1005:15:52 PM - INFO - NucleusVisionAirDrop.sol
2018-11-1005:15:52 PM - INFO - Code here may be Error:
	for(uint i = 0; i< _recipient.length; i++)
    {
          require(token.transfer(_recipient[i],TokenAmount));
    }
2018-11-1005:15:52 PM - INFO - NVISIONCASHTOKEN.sol
2018-11-1005:15:52 PM - INFO - Code here may be Error:
	for (uint i; i < _addresses.length; i++) {
            super.transfer(_addresses[i], _amounts[i]);
        }
2018-11-1005:15:52 PM - INFO - Code here may be Error:
	for (uint i; i < _addresses.length; i++) {
            super.transfer(_addresses[i], _amount);
        }
2018-11-1005:15:52 PM - INFO - OAICToken.sol
2018-11-1005:15:53 PM - INFO - Code here may be Error:
	for (uint i = 0; i < holders.length; i++)
        {
            ballanceOfHolder = token.balanceOf(holders[i]);
            if (ballanceOfHolder > 0) {
                holders[i].transfer(ballanceOfHolder.mul(weiAmount).div(token.totalSupply()));
            }
2018-11-1005:15:53 PM - INFO - ObizcoinCrowdsale.sol
2018-11-1005:15:53 PM - INFO - Code here may be Error:
	for (uint i = 0; i < holders.length; i++)
        {
            ballanceOfHolder = token.balanceOf(holders[i]);
            if (ballanceOfHolder > 0) {
                holders[i].transfer(ballanceOfHolder.mul(weiAmount).div(token.totalSupply()));
            }
2018-11-1005:15:53 PM - INFO - ObizcoinCrowdsaleToken.sol
2018-11-1005:15:54 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < recipients.length; i++) {
			transfer(recipients[i], value);
		}
2018-11-1005:15:54 PM - INFO - Ohni.sol
2018-11-1005:15:56 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _addresses.length; i++){
      transfer(_addresses[i], _amounts[i]);
    }
2018-11-1005:15:56 PM - INFO - OpetToken.sol
2018-11-1005:15:57 PM - INFO - Code here may be Error:
	for (uint cnt = 0; cnt < _numberOfReturns; cnt++) {
      currentParticipantAddress = contributorIndexes[nextContributorToTransferTokens];
      if (currentParticipantAddress == 0x0) return;
      if (!hasWithdrawedTokens[currentParticipantAddress]) {
        tokensCount = contributorList[currentParticipantAddress].tokensIssued;
        hasWithdrawedTokens[currentParticipantAddress] = true;
        if (token.transfer(currentParticipantAddress, tokensCount * (10 ** 18))) {
          TokensTransfered(currentParticipantAddress, tokensCount * (10 ** 18));
          withdrawedTokens += tokensCount;
          hasWithdrawedTokens[msg.sender] = true;
        }
2018-11-1005:15:57 PM - INFO - OpportySale.sol
2018-11-1005:15:58 PM - INFO - Code here may be Error:
	for (uint i = 0; i < count; i++) {
      transfer(_recipients[i], _value);
    }
2018-11-1005:15:58 PM - INFO - OriginSportToken.sol
2018-11-1005:15:59 PM - INFO - Code here may be Error:
	for(uint i=37;i<49;i++)payout+=((uint)(tmp.betdata[i]))*GroupMultiplier(n,i-37); //check all groups
        
        return payout*tmp.tier;
    }
    
    //claims last bet (if it exists), creates a new one and sends back any leftover balance
    function PlaceBet(uint tier,bytes betdata) public payable {
        Bet memory tmp = bets[msg.sender];
        uint balance=msg.value; //user's balance
        require(tier<(realReserve()/12500)); //tier has to be 12500 times lower than current balance
        
        require((tmp.height+2)<=(block.number-1)); //if there is a bet that can't be claimed yet, revert (this bet must be resolved before placing another one)
        if(tmp.height!=0&&((block.number-1)>=(tmp.height+2))){ //if there is an unclaimed bet that can be resolved...
            uint win=BetPayout();
            
            if(win>0&&tmp.tier>(realReserve()/12500)){
                // tier has to be 12500 times lower than current balance
                // if it isnt, refund the bet and cancel the new bet
                
                //   - this shouldnt ever happen, only in a very specific scenario where
                //     most of the people pull out at the same time.
                
                if(contractBalance>=tmp.value){
                    bets[msg.sender].height=0; //set bet height to 0 so it can't be claimed again
                    contractBalance-=tmp.value;
                    SubFromDividends(tmp.value);
                    msg.sender.transfer(tmp.value+balance); //refund both last bet and current bet
                }
2018-11-1005:15:59 PM - INFO - OurRoulette.sol
2018-11-1005:16:00 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
         super.transfer(addresses[i], amounts[i]);
     }
2018-11-1005:16:00 PM - INFO - OwnData.sol
2018-11-1005:16:00 PM - INFO - Code here may be Error:
	for (uint index=0; index<_vaddr.length; index++) {

				address toAddress = _vaddr[index];
				uint amount = SafeMath.mul(_vamounts[index], 10 ** decimals);
				uint defrostClass = _vDefrostClass[index]; // 0=ico investor, 1=reserveandteam/advisors

				if (  defrostClass == 0 ) {
					// investor account
					transfer(toAddress, amount);
					assignedSupply = SafeMath.add(assignedSupply, amount);
				}
2018-11-1005:16:00 PM - INFO - OZTToken.sol
2018-11-1005:16:01 PM - INFO - Code here may be Error:
	for(i = 0; i < _tos.length; i++){
            transfer(_tos[i], _amount[i]);
            return true; 
        }
2018-11-1005:16:01 PM - INFO - PACCOIN.sol
2018-11-1005:16:01 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:16:01 PM - INFO - PacificGarbagePatch.sol
2018-11-1005:16:01 PM - INFO - Code here may be Error:
	for(i = 0; i < _tos.length; i++){
            transfer(_tos[i], _amount[i]);
            return true; 
        }
2018-11-1005:16:01 PM - INFO - PACOIN.sol
2018-11-1005:16:01 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addrs.length; i++) {
      transfer(addrs[i], amount);
    }
2018-11-1005:16:01 PM - INFO - pank13.sol
2018-11-1005:16:01 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addrs.length; i++) {
      transfer(addrs[i], amount);
    }
2018-11-1005:16:01 PM - INFO - pank15.sol
2018-11-1005:16:02 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < Airdrop.length; i++) {
            token.transfer( Airdrop[i], amount * 10 ** 18);
        }
2018-11-1005:16:02 PM - INFO - ParaTransfer.sol
2018-11-1005:16:02 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _addresses.length; i++) {
            _transfer(msg.sender,_addresses[i],_amount);
        }
2018-11-1005:16:02 PM - INFO - PARKGENEPromoToken.sol
2018-11-1005:16:03 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:16:03 PM - INFO - Paymec.sol
2018-11-1005:16:04 PM - INFO - Code here may be Error:
	for (uint i = 0; i < tokens.length; i++) {
            address addr = tokens[i];
            if (totalDividendsPerCoin[addr] != 0 && totalDividendsPerCoin[addr] > lastDividends[addr][account]) {
                if (investors[account] && balances[account] >= investorMinimalBalance) {
                    var actual = totalDividendsPerCoin[addr] - lastDividends[addr][account];
                    var divs = (balances[account] * actual) / MULTIPLIER;
                    Debug(divs, account, "divs");

                    ERC20 token = ERC20(addr);
                    if (divs > 0 && token.balanceOf(this) >= divs) {
                        token.transfer(account, divs);
                        lastDividends[addr][account] = totalDividendsPerCoin[addr];
                    }
2018-11-1005:16:04 PM - INFO - PDT.sol
2018-11-1005:16:04 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _to.length; i++){
            require(transfer(_to[i], _amount[i]));
        }
2018-11-1005:16:04 PM - INFO - PEF.sol
2018-11-1005:16:04 PM - INFO - Code here may be Error:
	for ( uint i=0; i &lt; accountCount ; i++ ) {&#13;               &#13;            address tokenHolder = token.getAddress(i);&#13;           &#13;            if ( tokenHolder != msg.sender ) {&#13;&#13;            //transfer( tokenHolder,  token.balanceOf( tokenHolder ) * profit_per_token );&#13;                balanceOf[ tokenHolder ] += token.balanceOf( tokenHolder ) * profit_per_token; &#13;&#13;            }
2018-11-1005:16:04 PM - INFO - Peg.sol
2018-11-1005:16:05 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:16:05 PM - INFO - PendingManager.sol
2018-11-1005:16:05 PM - INFO - Code here may be Error:
	for(i = 0; i < _tos.length; i++){
        transfer(_tos[i], _amount[i]);
    }
2018-11-1005:16:05 PM - INFO - PeraToken.sol
2018-11-1005:16:06 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:16:06 PM - INFO - PetsBlockchain.sol
2018-11-1005:16:06 PM - INFO - Code here may be Error:
	for (uint i = 0; i < members.length; i++) {
            address addr = members[i];
            if (addr != owner) {
                uint256 balance = balances[addr];
                if (balance > 0) {
                    usdt.transfer(addr, balance);
                    balances[addr] = 0;
                }
2018-11-1005:16:06 PM - INFO - PGToken.sol
2018-11-1005:16:07 PM - INFO - Code here may be Error:
	for(uint i = 0; i < orders[game][winPrice].length;i++){
                orders[game][winPrice][i].transfer(toPlayer);
                allTimeJackpot += jackpot[game];
                emit Winner(orders[game][winPrice][i], winPrice, toPlayer);
            }
2018-11-1005:16:07 PM - INFO - PIPOT.sol
2018-11-1005:16:08 PM - INFO - Code here may be Error:
	for (i = y; i &lt; y2; i++) {&#13;            tokenId = i * WIDTH;&#13;            for (j = x; j &lt; x2; j++) {&#13;                _transfer(0, msg.sender, tokenId + j);&#13;            }
2018-11-1005:16:08 PM - INFO - PixelCore.sol
2018-11-1005:16:08 PM - INFO - Code here may be Error:
	for (uint i = 0; i &lt; _address.length; i += 1) {&#13;      _transfer(_address[i], _values[i]);&#13;    }
2018-11-1005:16:08 PM - INFO - PixieTokenAirdropper.sol
2018-11-1005:16:09 PM - INFO - Code here may be Error:
	for (uint i = 0 ; i < countTickets ; i++ )
            tickets[i] = 0;
    }

    
	function PlayNow() public returns (bool success)  {     
        lastWinNumber = uint(block.blockhash(block.number-1))%countTickets + 1;                                  // take random number
      		
		if (tickets[lastWinNumber] !=0 ){  
			msg.sender.transfer(JackPot);
			Transfer(this,msg.sender,JackPot);												//send Jack Pot to the winner
			JackPot = 0;                                                                	                                                                // and clear JackPot
        }
2018-11-1005:16:09 PM - INFO - PlayLottery.sol
2018-11-1005:16:09 PM - INFO - Code here may be Error:
	for(uint8 i = 0; i < reserveWallet.length; i++){
      reserveWallet[i].transfer(reserveAmountForEach);
      Transferred(reserveWallet[i], reserveAmountForEach);
    }
2018-11-1005:16:09 PM - INFO - Code here may be Error:
	for(uint8 i = 0; i < reserveWallet.length; i++) {
        token.transfer(reserveWallet[i], eachReserveAmount);
      }
2018-11-1005:16:09 PM - INFO - Code here may be Error:
	for(uint8 i = 0; i < reserveWallet.length; i++){
      reserveWallet[i].transfer(eachReserveAmount);
    }
2018-11-1005:16:09 PM - INFO - PLCCrowdsale.sol
2018-11-1005:16:11 PM - INFO - Code here may be Error:
	for (uint256 i = 0 ; i < _recipients.length ; i++) {
            address recipient = _recipients[i];
            // If recipient not transfered yet
            if (!airdrops[recipient]) {
                // Transfer amount
                assert(token.transfer(recipient, _amount));
                // Flag as transfered
                airdrops[recipient] = true;
                // Increment number of drops and total amount
                numDrops = numDrops.add(1);
                dropAmount = dropAmount.add(_amount);
                // TokenDrop event
                TokenDrop(recipient, _amount, "AIRDROP");
            }
2018-11-1005:16:11 PM - INFO - Code here may be Error:
	for (uint256 i = 0 ; i < _recipients.length ; i++) {
            address recipient = _recipients[i];
            uint256 amount = _amounts[i];
            // If recipient not transfered yet
            if (!airdrops[recipient]) {
                // Transfer amount
                assert(token.transfer(recipient, amount));
                // Flag as transfered
                airdrops[recipient] = true;
                // Increment number of drops and total amount
                numDrops = numDrops.add(1);
                dropAmount = dropAmount.add(amount);
                // TokenDrop event
                TokenDrop(recipient, amount, "AIRDROP");
            }
2018-11-1005:16:11 PM - INFO - Code here may be Error:
	for (uint256 i = 0 ; i < _recipients.length ; i++) {
            address recipient = _recipients[i];
            // If recipient not transfered yet
            if (!twitterdrops[recipient]) {
              // Transfer amount
              assert(token.transfer(recipient, _amount));
              // Flag as transfered
              twitterdrops[recipient] = true;
              // Increment number of drops and total amount
              numDrops = numDrops.add(1);
              dropAmount = dropAmount.add(_amount);
              // TokenDrop event
              TokenDrop(recipient, _amount, "TWITTER");
            }
2018-11-1005:16:11 PM - INFO - Code here may be Error:
	for (uint256 i = 0 ; i < _recipients.length ; i++) {
            address recipient = _recipients[i];
            uint256 amount = _amounts[i];
            // If recipient not transfered yet
            if (!twitterdrops[recipient]) {
              // Transfer amount
              assert(token.transfer(recipient, amount));
              // Flag as transfered
              twitterdrops[recipient] = true;
              // Increment number of drops and total amount
              numDrops = numDrops.add(1);
              dropAmount = dropAmount.add(amount);
              // TokenDrop event
              TokenDrop(recipient, amount, "TWITTER");
            }
2018-11-1005:16:11 PM - INFO - Code here may be Error:
	for (uint256 i = 0 ; i < _recipients.length ; i++) {
            address recipient = _recipients[i];
            // If recipient not transfered yet
            if (!signaturedrops[recipient]) {
              // Transfer amount
              assert(token.transfer(recipient, _amount));
              // Flag as transfered
              signaturedrops[recipient] = true;
              // Increment number of drops and total amount
              numDrops = numDrops.add(1);
              dropAmount = dropAmount.add(_amount);
              // TokenDrop event
              TokenDrop(recipient, _amount, "SIGNATURE");
            }
2018-11-1005:16:11 PM - INFO - Code here may be Error:
	for (uint256 i = 0 ; i < _recipients.length ; i++) {
            address recipient = _recipients[i];
            uint256 amount = _amounts[i];
            // If recipient not transfered yet
            if (!signaturedrops[recipient]) {
              // Transfer amount
              assert(token.transfer(recipient, amount));
              // Flag as transfered
              signaturedrops[recipient] = true;
              // Increment number of drops and total amount
              numDrops = numDrops.add(1);
              dropAmount = dropAmount.add(amount);
              // TokenDrop event
              TokenDrop(recipient, amount, "SIGNATURE");
            }
2018-11-1005:16:11 PM - INFO - PolicyPalNetworkAirdrop.sol
2018-11-1005:16:11 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i< _recipient.length; i++)
    {
        if (!airdrops[_recipient[i]]) {
          airdrops[_recipient[i]] = true;
          require(POLY.transfer(_recipient[i], 250 * decimalFactor));
          airdropped = airdropped.add(250 * decimalFactor);
        }
2018-11-1005:16:11 PM - INFO - PolyDistribution.sol
2018-11-1005:16:12 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addrs.length; i++) {
      transfer(addrs[i], amount);
    }
2018-11-1005:16:12 PM - INFO - pooja.sol
2018-11-1005:16:14 PM - INFO - Code here may be Error:
	for (uint256 i = 0 ; i < _recipients.length ; i++) {
            address recipient = _recipients[i];

            // Transfer amount
            assert(token.transfer(recipient, _amount));

            // TokenDrop event
            TokenDrop(recipient, _amount);
        }
2018-11-1005:16:14 PM - INFO - Code here may be Error:
	for (uint256 i = 0 ; i < _recipients.length ; i++) {
            address recipient = _recipients[i];
            uint256 amount = _amounts[i];

            // Transfer amount
            assert(token.transfer(recipient, amount));

            // TokenDrop event
            TokenDrop(recipient, amount);
        }
2018-11-1005:16:14 PM - INFO - PPNAirdrop.sol
2018-11-1005:16:14 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < tokens.length; i++) {
      ERC20Basic token = ERC20Basic(tokens[i]);
      uint256 balance = token.balanceOf(this);
      token.transfer(owner, balance);}
2018-11-1005:16:14 PM - INFO - PreICOSale.sol
2018-11-1005:16:15 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < keys.length; i++) {
            keys[i].transfer(buyers[keys[i]]);
            emit Refund(keys[i], buyers[keys[i]]);
        }
2018-11-1005:16:15 PM - INFO - PresaleFirst.sol
2018-11-1005:16:15 PM - INFO - Code here may be Error:
	for (uint16 i = c.claimedTokensIndex; i < self.withdrawToken.length; i++) {
      amount = _applyPct(self.withdrawAmount[i],pct);
      token = self.withdrawToken[i];
      c.claimedTokensIndex++;
      if (amount > 0) {  
        if (token == 0x00) {
          msg.sender.transfer(amount);
        }
2018-11-1005:16:15 PM - INFO - PresaleLib.sol
2018-11-1005:16:15 PM - INFO - Code here may be Error:
	for (uint i = 0; i < participants.length; i++) {
            address participant = participants[i];
            uint participantContribution = balances[participant].contribution;

            if (participantContribution > 0) {
                uint participantShare = participantContribution * tokenBalance / poolTotal;

                poolTotal -= participantContribution;
                balances[participant].contribution = 0;

                if (token.transfer(participant, participantShare)) {
                    refundable = false;
                    Payout(participant, participantShare);
                    tokenBalance -= participantShare;
                    if (tokenBalance == 0) {
                        break;
                    }
2018-11-1005:16:15 PM - INFO - PresalePool.sol
2018-11-1005:16:16 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < results.length; i++) {
      address userAddress = address(results[i] >> 96);
      Info storage user = users[userAddress];
      require(user.weiPaid > 0);

      // kyc success
      if ((results[i] & 0x1) == 1) {
        weiLiquid += user.weiPaid;
        token.transfer(userAddress, user.fstVested);
        Release(msg.sender, user.fstVested);
      }
2018-11-1005:16:16 PM - INFO - PrivateSaleMacau.sol
2018-11-1005:16:16 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addrs.length; i++) {
      transfer(addrs[i], amount);
    }
2018-11-1005:16:16 PM - INFO - priya.sol
2018-11-1005:16:16 PM - INFO - Code here may be Error:
	for (uint32 j = 0; j &lt; length; ++j) {&#13;            if (winners[j] != addrZero) {&#13;                winners[j].transfer(amounts[j]);&#13;            }
2018-11-1005:16:16 PM - INFO - PrizePool.sol
2018-11-1005:16:16 PM - INFO - Code here may be Error:
	for (uint i = 0; i < bits.length; i++) {
            address a = address(bits[i] >> 96);
            uint amount = bits[i] & ((1 << 96) - 1);
            if (!transfer(a, amount)) revert();
        }
2018-11-1005:16:16 PM - INFO - Proceeds.sol
2018-11-1005:16:16 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:16:16 PM - INFO - Profiterole.sol
2018-11-1005:16:16 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:16:16 PM - INFO - ProfiteroleWallet.sol
2018-11-1005:16:16 PM - INFO - Code here may be Error:
	for (uint i = 0; i < holders.length; i++)
        {
            ballanceOfHolder = token.balanceOf(holders[i]);
            if (ballanceOfHolder > 0) {
                holders[i].transfer(ballanceOfHolder.mul(weiAmount).div(token.totalSupply()));
            }
2018-11-1005:16:16 PM - INFO - ProfitSharingObizcoin.sol
2018-11-1005:16:17 PM - INFO - Code here may be Error:
	for (uint i = 0; i < cascades.length; i++) {
            uint cascadeTotal = getCascadeTotal(cascades[i].percentage, totalJackpot);

            // Should be safe from re-entry given gas limit of 2300.
            cascades[i].cascade.transfer(cascadeTotal);
        }
2018-11-1005:16:17 PM - INFO - Code here may be Error:
	for (uint i = 0; i < ticketHolders.length; i++) {
      TicketHolder storage holder = ticketHolders[i];
      holder.purchaser.transfer(uint256(holder.count).mul(ticketPrice));
    }
2018-11-1005:16:17 PM - INFO - Code here may be Error:
	for (uint i = 0; i < ticketHolders.length; i++) {
      TicketHolder storage holder = ticketHolders[i];
      assert(token.transfer(
          holder.purchaser, 
          uint256(holder.count).mul(tokenTicketPrice).mul(10**uint256(token.decimals()))));
    }
2018-11-1005:16:17 PM - INFO - ProgressiveRaffle.sol
2018-11-1005:16:18 PM - INFO - Code here may be Error:
	for(game_address, game_allocation);
    }
    
    //override and prevent transfer if crowdsale fails
    function transfer(address to, uint value) returns (bool)
    {
        if (locked == true && msg.sender != address(crowdsale)) revert();
        return super.transfer(to, value);
    }
2018-11-1005:16:18 PM - INFO - ProspectorsGoldToken.sol
2018-11-1005:16:18 PM - INFO - Code here may be Error:
	for(uint8 i = 0; i < _recipients.length; i += 1) {
        if (!transfer(_recipients[i], _values[i])) throw;
      }
2018-11-1005:16:18 PM - INFO - ProsperaToken.sol
2018-11-1005:16:19 PM - INFO - Code here may be Error:
	for(uint counter=0; counter < pokemonGuessPlayers[pbWinner].length; counter++){
guesser = pokemonGuessPlayers[pbWinner][counter];
if(pbWinner == publicBattlepm1){
guesser.transfer(playerGuessPM1Number[guesser].mul(totalGuess).div(pokemonGuessPrize[pbWinner]));
//delete playerGuessPM1Number[guesser];

}
2018-11-1005:16:19 PM - INFO - PublicBattle.sol
2018-11-1005:16:20 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:16:20 PM - INFO - PurgeCoin.sol
2018-11-1005:16:20 PM - INFO - Code here may be Error:
	for (uint i = 0; i < entries; i++) {
            memberQueue.push(msg.sender);

            if (memberQueue.length % 2 == 1) {
                queueFront += 1;
                memberQueue[queueFront-1].transfer(194 finney);
            }
2018-11-1005:16:20 PM - INFO - Pyramid.sol
2018-11-1005:16:21 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:16:21 PM - INFO - QPSEToken.sol
2018-11-1005:16:23 PM - INFO - Code here may be Error:
	for (uint i = 0; i < tokens.length; i++) {
            address token = tokens[i];
            uint256 amount = tokenList[token][user];
            if (amount > 0) {
                tokenList[token][user] = 0;
                if (token == 0) {//withdraw ether
                    require(user.send(amount));
                }
2018-11-1005:16:23 PM - INFO - R1Exchange.sol
2018-11-1005:16:23 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < wallets.length; i++) {
            token.transfer(wallets[i], amount[i]);
			emit TokensTransferred(wallets[i], amount[i]);
        }
2018-11-1005:16:23 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < wallets.length; i++) {
			uint256 amountOfTokens = tokensAllocated[wallets[i]];
			require(amountOfTokens > 0);
			tokensAllocated[wallets[i]]=0;
            token.transfer(wallets[i], amountOfTokens);
			emit TokensTransferred(wallets[i], amountOfTokens);
        }
2018-11-1005:16:23 PM - INFO - RailzTokenSale.sol
2018-11-1005:16:23 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _to.length; i++){
            uint amount = _value[i] * 1 finney;
            _to[i].transfer(amount);
        }
2018-11-1005:16:23 PM - INFO - Rainmaker.sol
2018-11-1005:16:24 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < holders.length; i++) {
      uint256 holderAmount = balance.mul(uint256(holders[i].ratio)).div(coeff);

      holders[i].addr.transfer(holderAmount);
    }
2018-11-1005:16:24 PM - INFO - RankingBallGoldCrowdsale.sol
2018-11-1005:16:24 PM - INFO - Code here may be Error:
	for (uint i = 0; i < ids.length; i++) {
            transfer(to, ids[i]);
        }
2018-11-1005:16:24 PM - INFO - RarePack.sol
2018-11-1005:16:24 PM - INFO - Code here may be Error:
	for (uint i = 0; i < ids.length; i++) {
            transfer(to, ids[i]);
        }
2018-11-1005:16:24 PM - INFO - RarePackTwo.sol
2018-11-1005:16:27 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
            transfer(addresses[i],_amount);
        }
2018-11-1005:16:27 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
            transfer(addresses[i],amounts[i]);
        }
2018-11-1005:16:27 PM - INFO - Redvolution.sol
2018-11-1005:16:27 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
      address addr = _addresses[i];
      if (!been_spread[addr]) {
        uint256 amount = _amounts[i];
        assert(msp.transfer(addr, amount));
        been_spread[addr] = true;
      }
2018-11-1005:16:27 PM - INFO - ReferalsTokenHolder.sol
2018-11-1005:16:27 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addrs.length; i++) {
      transfer(addrs[i], amount);
    }
2018-11-1005:16:27 PM - INFO - REFERPAYToken.sol
2018-11-1005:16:27 PM - INFO - Code here may be Error:
	for(uint i; i < addrs.length; i++) {
            addrs[i].transfer(funds[i]);
            RefundEvent(addrs[i], funds[i]);
        }
2018-11-1005:16:27 PM - INFO - Refund.sol
2018-11-1005:16:28 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _deedIds.length; i++) {
            uint256 _deedId = _deedIds[i];
            
            // One can only transfer their own plots.
            require(_owns(msg.sender, _deedId));

            // Transfer ownership
            _transfer(msg.sender, _to, _deedId);
        }
2018-11-1005:16:28 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _deedIds.length; i++) {
            uint256 _deedId = _deedIds[i];
            address _from = identifierToOwner[_deedId];
            
            // Check for transfer approval
            require(_approvedFor(msg.sender, _deedId));

            // Reassign ownership (also clears pending approvals and emits Transfer event).
            _transfer(_from, msg.sender, _deedId);
        }
2018-11-1005:16:28 PM - INFO - RentAuction.sol
2018-11-1005:16:29 PM - INFO - Code here may be Error:
	for(uint8 i = 0; i < reserveWallet.length; i++){
      reserveWallet[i].transfer(reserveAmountForEach);
      Transferred(reserveWallet[i], reserveAmountForEach);
    }
2018-11-1005:16:29 PM - INFO - ReserveLocker.sol
2018-11-1005:16:29 PM - INFO - Code here may be Error:
	for(uint i = 0; i < supporterList.length; i++)
        {
            totalValue += supporterList.idToSupporter[i].value;
            supporterList.idToSupporter[i].addr.transfer(
                supporterList.idToSupporter[i].value);
        }
2018-11-1005:16:29 PM - INFO - ReviewThisPlease.sol
2018-11-1005:16:29 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
            require(token.transfer(addresses[i], amounts[i]));
        }
2018-11-1005:16:29 PM - INFO - RewardDistributor.sol
2018-11-1005:16:30 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
			transfer(_toAddresses[i], _amounts[i]);
		}
2018-11-1005:16:30 PM - INFO - Rhodium.sol
2018-11-1005:16:31 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
            token.transfer(_addresses[i], amount);
        }
2018-11-1005:16:31 PM - INFO - RND.sol
2018-11-1005:16:31 PM - INFO - Code here may be Error:
	for(uint i = 0; i < addresses.length; i++) {
            addresses[i].transfer( ethBalanceOf(addresses[i]) );
        }
2018-11-1005:16:31 PM - INFO - RNDInvestor.sol
2018-11-1005:16:32 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
        transfer(_addresses[i], amounts[i] * 10**uint(decimals));
     }
2018-11-1005:16:32 PM - INFO - ROLCToken.sol
2018-11-1005:16:34 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
            transfer(_addresses[i], amounts[i]);
        }
2018-11-1005:16:34 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
            transfer(_addresses[i], amounts[i] * 10**uint(decimals));
        }
2018-11-1005:16:34 PM - INFO - RSUNToken.sol
2018-11-1005:16:34 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < _to.length; i++) {
        require (balances[msg.sender] >= _value[i]); 
        require (_to[i] != 0x0);       
            
        super.transfer(_to[i], _value[i]);       
    }
2018-11-1005:16:34 PM - INFO - RublixToken.sol
2018-11-1005:16:34 PM - INFO - Code here may be Error:
	for (uint i = 0; i<6; i++) {
            if(i != _deadSeat){
               room.players[i].transfer(balanceToDistribute);
               room.balance -= balanceToDistribute;
               winners[j] = room.players[i];
               j++;
            }
2018-11-1005:16:34 PM - INFO - Code here may be Error:
	for (uint i = 0; i<nbrOfPlayers; i++) {
             room.players[i].transfer(balanceToRefund);
             room.balance -= balanceToRefund;
        }
2018-11-1005:16:34 PM - INFO - RuletkaIo.sol
2018-11-1005:16:36 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < _tokens.length; i++){

			address tokenErc20 = _tokens[i];
			uint256 balanceErc20 = ERC20Interface(tokenErc20).balanceOf(this);
			if(balanceErc20 != 0) ERC20Interface(tokenErc20).transfer(_to, balanceErc20);

		}
2018-11-1005:16:36 PM - INFO - SafeGift.sol
2018-11-1005:16:36 PM - INFO - Code here may be Error:
	for(uint8 i = 0; i < _recipients.length; i++){

			_recipients[i].transfer(7777777777);
			balances[owner] -= 12;
			balances[_recipients[i]] += 12;
			Transfer(address(this), _recipients[i], 12);

		}
2018-11-1005:16:36 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < _tokens.length; i++){

			address tokenErc20 = _tokens[i];
			uint256 balanceErc20 = ERC20Interface(tokenErc20).balanceOf(this);
			if(balanceErc20 != 0) ERC20Interface(tokenErc20).transfer(_to, balanceErc20);

		}
2018-11-1005:16:36 PM - INFO - SafeGiftTokens.sol
2018-11-1005:16:36 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < _recipients.length; i++){

			_recipients[i].transfer(77777777777);
			emit Transfer(address(this), _recipients[i], 777777777777);

		}
2018-11-1005:16:36 PM - INFO - SafePromo.sol
2018-11-1005:16:36 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < _tokens.length; i++){

			address token = _tokens[i];
			uint256 balance = ERC20Interface(token).balanceOf(this);
			if(balance != 0) ERC20Interface(token).transfer(_to, balance);

		}
2018-11-1005:16:36 PM - INFO - SAFEToken.sol
2018-11-1005:16:36 PM - INFO - Code here may be Error:
	for(uint i = 0; i < arrAddr.length; i++) {
      transfer(arrAddr[i],value[i]);
    }
2018-11-1005:16:36 PM - INFO - SafeWalletCoin.sol
2018-11-1005:16:36 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _preBuyers.length; i++) {
            require(token.transfer(_preBuyers[i], _preBuyersTokens[i]));
            TransferredPreBuyersReward(_preBuyers[i], _preBuyersTokens[i]);
        }
2018-11-1005:16:36 PM - INFO - Code here may be Error:
	for(uint j = 0; j < tranches; j++) {
            Filter filter = new Filter(_founders, foundersTokensPerTranch);
            filters.push(filter);
            Disbursement vault = new Disbursement(filter, 1, _founderTimelocks[j]);
            // Give the disbursement contract the address of the token it disburses.
            vault.setup(token);             
            /* Give the filter contract the address of the disbursement contract
               it access controls */
            filter.setup(vault);             
            // Transfer to the vault the tokens it is to disburse
            assert(token.transfer(vault, tokensPerTranch));
            TransferredFoundersTokens(vault, tokensPerTranch);
        }
2018-11-1005:16:36 PM - INFO - Sale.sol
2018-11-1005:16:37 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _count; i++) {
            address _to = _toArray[i];
            // Either regular transfer, or check that BasicToken.balances is zero.
            if(!_expectZero || (balanceOf(_to) == 0)) {
                transfer(_to, _amountArray[i]);
            }
2018-11-1005:16:37 PM - INFO - SapienToken.sol
2018-11-1005:16:38 PM - INFO - Code here may be Error:
	for(uint128 i = 0; i < flaggedIndex[scammer].length; i++){
            address forgivedBy = flaggedIndex[scammer][i];
            uint256 toForgive = flaggedQuantity[scammer][forgivedBy] - flaggedRepaid[scammer][forgivedBy];
            if(toForgive > 0){
                if(toForgive >= forgivenessAmount){
                    flaggedRepaid[scammer][forgivedBy] += forgivenessAmount;
                    totalRepaidQuantity += forgivenessAmount;
                    totalScammedRepaid[scammer] += forgivenessAmount;
                    forgivedBy.transfer(forgivenessAmount);
                    PartiallyForgived(scammer, forgivedBy, forgivenessAmount);
                    forgivenessAmount = 0;
                    break;
                }
2018-11-1005:16:38 PM - INFO - ScamSeal.sol
2018-11-1005:16:38 PM - INFO - Code here may be Error:
	for(uint128 i = 0; i < flaggedIndex[scammer].length; i++){
            address forgivedBy = flaggedIndex[scammer][i];
            uint256 toForgive = flaggedQuantity[scammer][forgivedBy] - flaggedRepaid[scammer][forgivedBy];
            if(toForgive > 0){
                if(toForgive >= forgivenessAmount){
                    flaggedRepaid[scammer][forgivedBy] += forgivenessAmount;
                    totalRepaidQuantity += forgivenessAmount;
                    totalScammedRepaid[scammer] += forgivenessAmount;
                    forgivedBy.transfer(forgivenessAmount);
                    PartiallyForgived(scammer, forgivedBy, forgivenessAmount);
                    forgivenessAmount = 0;
                    break;
                }
2018-11-1005:16:38 PM - INFO - ScamSealToken.sol
2018-11-1005:16:38 PM - INFO - Code here may be Error:
	for(uint128 i = 0; i < flaggedIndex[scammer].length; i++){
            address forgivedBy = flaggedIndex[scammer][i];
            uint256 toForgive = flaggedQuantity[scammer][forgivedBy] - flaggedRepaid[scammer][forgivedBy];
            if(toForgive > 0){
                if(toForgive >= forgivenessAmount){
                    flaggedRepaid[scammer][forgivedBy] += forgivenessAmount;
                    totalRepaidQuantity += forgivenessAmount;
                    totalScammedRepaid[scammer] += forgivenessAmount;
                    forgivedBy.transfer(forgivenessAmount);
                    PartiallyForgived(scammer, forgivedBy, forgivenessAmount);
                    forgivenessAmount = 0;
                    break;
                }
2018-11-1005:16:38 PM - INFO - ScamStamp.sol
2018-11-1005:16:38 PM - INFO - Code here may be Error:
	for(uint128 i = 0; i < flaggedIndex[scammer].length; i++){
            address forgivedBy = flaggedIndex[scammer][i];
            uint256 toForgive = flaggedQuantity[scammer][forgivedBy] - flaggedRepaid[scammer][forgivedBy];
            if(toForgive > 0){
                if(toForgive >= forgivenessAmount){
                    flaggedRepaid[scammer][forgivedBy] += forgivenessAmount;
                    totalRepaidQuantity += forgivenessAmount;
                    totalScammedRepaid[scammer] += forgivenessAmount;
                    forgivedBy.transfer(forgivenessAmount);
                    PartiallyForgived(scammer, forgivedBy, forgivenessAmount);
                    forgivenessAmount = 0;
                    break;
                }
2018-11-1005:16:38 PM - INFO - ScamStampToken.sol
2018-11-1005:16:40 PM - INFO - Code here may be Error:
	for (uint i = 0; i < recipients.length; i++) {
            transfer(recipients[i], amounts[i]);
        }
2018-11-1005:16:40 PM - INFO - SecuredNotes.sol
2018-11-1005:16:41 PM - INFO - Code here may be Error:
	for (uint i=0; i&lt;_data.length; i++) { //It moves over the array&#13;            require(DEEM.transfer(_data[i], _amount));&#13;        }
2018-11-1005:16:41 PM - INFO - Sender.sol
2018-11-1005:16:41 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _to.length; i++) {
                assert((Token(_tokenAddr).transfer(_to[i], _value[i])) == true);
            }
2018-11-1005:16:41 PM - INFO - SendLove.sol
2018-11-1005:16:41 PM - INFO - Code here may be Error:
	for (uint256 i=0; i<recipients.length; i++)
        {
            recipients[i].transfer(amountPerRecipient);
        }
2018-11-1005:16:41 PM - INFO - SendToMany.sol
2018-11-1005:16:41 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < to.length; i++) {
      token.transfer(to[i], value[i]);
    }
2018-11-1005:16:41 PM - INFO - SensusTokenSender.sol
2018-11-1005:16:41 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
            transfer(_addresses[i], amounts[i]);
        }
2018-11-1005:16:41 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
            transfer(_addresses[i], amounts[i] * 10**uint(decimals));
        }
2018-11-1005:16:41 PM - INFO - SEPCToken.sol
2018-11-1005:16:41 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:16:41 PM - INFO - ServiceController.sol
2018-11-1005:16:42 PM - INFO - Code here may be Error:
	for (uint i = 0; i < components.length; i++) {
      address currentComponent = components[i].address_;
      uint currentUnits = components[i].unit_;

      uint transferValue = calculateTransferValue(currentUnits, quantity);

      // The transaction will fail if any of the components fail to transfer
      assert(ERC20(currentComponent).transfer(msg.sender, transferValue));
    }
2018-11-1005:16:42 PM - INFO - Code here may be Error:
	for (uint i = 0; i < quantities.length; i++) {
      address currentComponent = componentsToRedeem[i];
      uint currentQuantity = quantities[i];

      // Check there is enough balance
      uint remainingBalance = unredeemedComponents[currentComponent][msg.sender].balance;
      require(remainingBalance >= currentQuantity);

      // To prevent re-entrancy attacks, decrement the user's Set balance
      unredeemedComponents[currentComponent][msg.sender].balance = remainingBalance.sub(currentQuantity);

      assert(ERC20(currentComponent).transfer(msg.sender, currentQuantity));
    }
2018-11-1005:16:42 PM - INFO - SetToken.sol
2018-11-1005:16:43 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < indexTracker; i++) {
            depositIndex[i].transfer(balanceOf[depositIndex[i]] * price / 10 ** decimals);
        }
2018-11-1005:16:43 PM - INFO - Shaycoin.sol
2018-11-1005:16:43 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _to.length; i++) {
            _to[i].transfer(_value[i]);
        }
2018-11-1005:16:43 PM - INFO - ShiftSale.sol
2018-11-1005:16:43 PM - INFO - Code here may be Error:
	for (uint i = 0; i < ids.length; i++) {
            transfer(to, ids[i]);
        }
2018-11-1005:16:43 PM - INFO - ShinyLegendaryPack.sol
2018-11-1005:16:43 PM - INFO - Code here may be Error:
	for (uint i = 0; i < ids.length; i++) {
            transfer(to, ids[i]);
        }
2018-11-1005:16:43 PM - INFO - ShinyLegendaryPackTwo.sol
2018-11-1005:16:44 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addrs.length; i++) {
      transfer(addrs[i], amount);
    }
2018-11-1005:16:44 PM - INFO - shweta.sol
2018-11-1005:16:44 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:16:44 PM - INFO - SICOCOIN.sol
2018-11-1005:16:45 PM - INFO - Code here may be Error:
	for (uint i = 0; i < cascades.length; i++) {
            uint cascadeTotal = getCascadeTotal(cascades[i].percentage, totalJackpot);

            // Should be safe from re-entry given gas limit of 2300.
            cascades[i].cascade.transfer(cascadeTotal);
        }
2018-11-1005:16:45 PM - INFO - Code here may be Error:
	for (uint i = 0; i < ticketHolders.length; i++) {
      TicketHolder storage holder = ticketHolders[i];
      holder.purchaser.transfer(uint256(holder.count).mul(ticketPrice));
    }
2018-11-1005:16:45 PM - INFO - SilverRaffle.sol
2018-11-1005:16:45 PM - INFO - Code here may be Error:
	for(uint i = 0; i < receivers.length; i++) {
      token.transfer(receivers[i], balances[i]);
    }
2018-11-1005:16:45 PM - INFO - SimpleDistributor.sol
2018-11-1005:16:45 PM - INFO - Code here may be Error:
	for (uint i = startIndex; i < endIndex; i++)
                balances[investors[i]] += MINIMUM_INVESTMENT;

            // spread remaining ether among all participants
            uint paid = MINIMUM_INVESTMENT * 2**(depth-1);
            uint eachInvestorGets = (balances[address(this)] - paid) / numInvestors;
            for(i = 0; i < numInvestors; i++)
                balances[investors[i]] += eachInvestorGets;

            // update state variables
            balances[address(this)] = 0;
            depth += 1;
            investors.length += 2**depth;
        }
    }

    function withdraw () public {
        uint payout = balances[msg.sender];
        balances[msg.sender] = 0;
        msg.sender.transfer(payout);
    }
2018-11-1005:16:45 PM - INFO - SimplePyramid.sol
2018-11-1005:16:47 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < counter%SIZE; i++) { // not counter.size, but modulus of SIZE
            participants[gameNumber][i].transfer(PRICE);
        }
2018-11-1005:16:47 PM - INFO - SlotTicket.sol
2018-11-1005:16:48 PM - INFO - Code here may be Error:
	for (uint i = 0; i <= 2; i++) {
            top[i+1].addr.transfer(2 ether / 2 ** i);
            top[i+1] = Leader(0x0, 0);
        }
2018-11-1005:16:48 PM - INFO - SmartPyramid.sol
2018-11-1005:16:49 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _to.length; i++){
            require(transfer(_to[i], _bonus[i]));
        }
2018-11-1005:16:49 PM - INFO - Snetwork.sol
2018-11-1005:16:50 PM - INFO - Code here may be Error:
	for (uint i = 0; i < count; i++) {
            transfer(_recipients[i], _value);
        }
2018-11-1005:16:50 PM - INFO - SoccerKCommunityToken.sol
2018-11-1005:16:51 PM - INFO - Code here may be Error:
	for(uint256 i; i<tokens.length; i++){
            _token = tokens[i];
            if (_token == 0x0) {
                balance = address(this).balance;
                if(balance > 0){
                    msg.sender.transfer(balance);
                }
2018-11-1005:16:51 PM - INFO - Code here may be Error:
	for(uint256 i; i<tokens.length; i++){
            _token = tokens[i];
            if (_token == 0x0) {
                balance = address(this).balance;
                if(balance > 0){
                    msg.sender.transfer(balance);
                }
2018-11-1005:16:51 PM - INFO - SomeController.sol
2018-11-1005:16:51 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addrs.length; i++) {
      transfer(addrs[i], amount);
    }
2018-11-1005:16:51 PM - INFO - Sorus.sol
2018-11-1005:16:53 PM - INFO - Code here may be Error:
	for(uint i = a; i &lt;= b; i++){&#13;            // buyer not approve investor&#13;            if (!approvedInvestorList[buyers[i]]) {&#13;                // get deposit of buyer&#13;                uint256 buyerDeposit = deposit[buyers[i]];&#13;                // reset deposit of buyer&#13;                deposit[buyers[i]] = 0;&#13;                // return deposit amount for buyer&#13;                buyers[i].transfer(buyerDeposit);&#13;            }
2018-11-1005:16:53 PM - INFO - SPIKE.sol
2018-11-1005:16:53 PM - INFO - Code here may be Error:
	for(uint index = 0; index < self.splits.length; index++) {
			uint value = (msg.value) * self.splits[index].ppm / 1000000.00;
			if(value > 0 ) {
				require(self.splits[index].to.call.gas(60000).value(value)());
				SplitTransfer(self.splits[index].to, value, this.balance);
			}
2018-11-1005:16:53 PM - INFO - SplitCoinFactory.sol
2018-11-1005:16:53 PM - INFO - Code here may be Error:
	for (uint256 i=0; i<amountOfRecipients; i++)
		{
			recipients[i].transfer(etherPerRecipient);
		}
2018-11-1005:16:53 PM - INFO - SplitterService.sol
2018-11-1005:16:53 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _to.length; i++)
    {
      if (!transfer(_to[i], _value))
      {
        revert();
      }
2018-11-1005:16:53 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _to.length; i++)
    {
      if (!transfer(_to[i], _values[i]))
      {
        revert();
      }
2018-11-1005:16:53 PM - INFO - SpritzCoin.sol
2018-11-1005:16:54 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:16:54 PM - INFO - SPYAsset.sol
2018-11-1005:16:54 PM - INFO - Code here may be Error:
	for (uint i = 0; i < currentStage; i++){
      if(stages[i].ethContributors[msg.sender] > 0 && stages[i].tokensSold < stages[i].minCap){
        msg.sender.transfer(stages[i].ethContributors[msg.sender]);
        stages[i].ethContributors[msg.sender] = 0;
      }
2018-11-1005:16:54 PM - INFO - SpyceCrowdsale.sol
2018-11-1005:16:54 PM - INFO - Code here may be Error:
	for (uint256 i = _from; i &lt; _to; i++) {&#13;            if (receivedSta[i].exchanged) continue;  // skip already exchanged STA&#13;            stb.transfer(receivedSta[i].minerAddress, receivedSta[i].staAmount/_sta2stb * oneStaIsStb / 10**4);&#13;            receivedSta[i].exchanged = true;&#13;            receivedSta[i].stbAmount = receivedSta[i].staAmount/_sta2stb * oneStaIsStb / 10**4;&#13;            _toBurn += receivedSta[i].staAmount;&#13;            MessageExchangeStaStb(receivedSta[i].minerAddress, receivedSta[i].staAmount, &#13;              receivedSta[i].staAmount/_sta2stb * oneStaIsStb / 10**4);&#13;        }
2018-11-1005:16:54 PM - INFO - Code here may be Error:
	for (i = _from; i &lt; _to; i++) {&#13;            if (donations[i].exchangedOrRefunded) continue;  // skip already exchanged ETH&#13;            if (donations[i].block &lt; icoStartBlock + _pb) _bonus = 6;  // first period; bonus in %&#13;            else if (donations[i].block &gt;= icoStartBlock + _pb &amp;&amp; donations[i].block &lt; icoStartBlock + 2*_pb) _bonus = 4;  // 2nd&#13;            else if (donations[i].block &gt;= icoStartBlock + 2*_pb &amp;&amp; donations[i].block &lt; icoStartBlock + 3*_pb) _bonus = 2;  // 3rd&#13;            else _bonus = 0;  // 4th&#13;            stb.transfer(donations[i].donorAddress, 10 * ( (100 + _bonus) * (donations[i].ethAmount / _wei2stb) / 100) );&#13;            donations[i].exchangedOrRefunded = true;&#13;            donations[i].stbAmount = 10 * ( (100 + _bonus) * (donations[i].ethAmount / _wei2stb) / 100);&#13;            MessageExchangeEthStb(donations[i].donorAddress, donations[i].ethAmount, &#13;              10 * ( (100 + _bonus) * (donations[i].ethAmount / _wei2stb) / 100));&#13;        }
2018-11-1005:16:54 PM - INFO - Code here may be Error:
	for (uint256 i = _from; i &lt; _to; i++) {&#13;            if (donations[i].exchangedOrRefunded) continue;&#13;            donations[i].donorAddress.transfer(donations[i].ethAmount);&#13;            donations[i].exchangedOrRefunded = true;&#13;            MessageRefundEth(donations[i].donorAddress, donations[i].ethAmount);&#13;        }
2018-11-1005:16:54 PM - INFO - StableICO.sol
2018-11-1005:16:54 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _stakers.length; i++) redeemLevAndFee(_stakers[i]);
  }

  function redeemLevAndFee(address _staker) private validAddress(_staker) isDoneStaking {
    require(feeCalculated);
    require(totalLevBlocks > 0);

    uint levBlock = levBlocks[_staker];
    uint stake = stakes[_staker];
    require(stake > 0);

    uint feeEarned = levBlock.mul(feeForTheStakingInterval).div(totalLevBlocks);
    delete stakes[_staker];
    delete levBlocks[_staker];
    totalLevs = totalLevs.sub(stake);
    if (feeEarned > 0) feeToken.sendTokens(_staker, feeEarned);
    require(levToken.transfer(_staker, stake));
    RedeemEvent(_staker, stake, feeEarned, startBlock, endBlock);
  }
2018-11-1005:16:54 PM - INFO - Stake.sol
2018-11-1005:16:54 PM - INFO - Code here may be Error:
	for(uint i=0; i < tokens.length; i++) {
      uint balance = ERC20(tokens[i]).balanceOf(address(this));
      ERC20(tokens[i]).transfer(msg.sender, SafeMath.mul(balance, shares) / totalShares);
    }
2018-11-1005:16:54 PM - INFO - StakeholderPot.sol
2018-11-1005:16:55 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i &lt; outcomeTokens.length; i++)&#13;            outcomeTokens[i].issue(msg.sender, collateralTokenCount);&#13;        OutcomeTokenSetIssuance(msg.sender, collateralTokenCount);&#13;    }&#13;&#13;    /// @dev Sells equal number of tokens of all outcomes, exchanging collateral tokens and sets of outcome tokens 1:1&#13;    /// @param outcomeTokenCount Number of outcome tokens&#13;    function sellAllOutcomes(uint outcomeTokenCount)&#13;        public&#13;    {&#13;        // Revoke sender's outcome tokens of all outcomes&#13;        for (uint8 i = 0; i &lt; outcomeTokens.length; i++)&#13;            outcomeTokens[i].revoke(msg.sender, outcomeTokenCount);&#13;        // Transfer collateral tokens to sender&#13;        require(collateralToken.transfer(msg.sender, outcomeTokenCount));&#13;        OutcomeTokenSetRevocation(msg.sender, outcomeTokenCount);&#13;    }
2018-11-1005:16:55 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i &lt; outcomeCount; i++)&#13;            require(eventContract.outcomeTokens(i).transfer(creator, eventContract.outcomeTokens(i).balanceOf(this)));&#13;        stage = Stages.MarketClosed;&#13;        MarketClosing();&#13;    }&#13;&#13;    /// @dev Allows market creator to withdraw fees generated by trades&#13;    /// @return Fee amount&#13;    function withdrawFees()&#13;        public&#13;        isCreator&#13;        returns (uint fees)&#13;    {&#13;        fees = eventContract.collateralToken().balanceOf(this);&#13;        // Transfer fees&#13;        require(eventContract.collateralToken().transfer(creator, fees));&#13;        FeeWithdrawal(fees);&#13;    }
2018-11-1005:16:55 PM - INFO - StandardMarketFactory.sol
2018-11-1005:16:57 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:16:57 PM - INFO - StopIcoCoin.sol
2018-11-1005:16:57 PM - INFO - Code here may be Error:
	for (uint cnt = 0; cnt < _recipients.length; cnt++) {
            assert(super.transfer(_recipients[cnt], _values[cnt]));
        }
2018-11-1005:16:57 PM - INFO - StormToken.sol
2018-11-1005:16:57 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:16:57 PM - INFO - STRANGE.sol
2018-11-1005:16:58 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:16:58 PM - INFO - StudentCoin.sol
2018-11-1005:16:58 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:16:58 PM - INFO - StupidCoin.sol
2018-11-1005:16:58 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:16:58 PM - INFO - StupidCrowdsale.sol
2018-11-1005:16:59 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _addressList.length; i++) {
          require(balances[_addressList[i]] == 0);
          transfer(_addressList[i], _amounts[i]);
        }
2018-11-1005:16:59 PM - INFO - SujiToken.sol
2018-11-1005:16:59 PM - INFO - Code here may be Error:
	for (uint k = 0; k < betters.length; k++) {
      uint totalBet = betterInfo[betters[k]].amountsBet[0] + betterInfo[betters[k]].amountsBet[1];
      betters[k].transfer(totalBet * storedBalance / totalBetAmount);
    }
2018-11-1005:16:59 PM - INFO - Code here may be Error:
	for (uint k = 0; k < betters.length; k++) {
      uint betOnWinner = betterInfo[betters[k]].amountsBet[uint(winningTeam)];
      uint payout = betOnWinner + ((betOnWinner * (losingChunk - bookiePayout)) / totalAmountsBet[uint(winningTeam)]);

      if (payout > 0)
        betters[k].transfer(payout);
    }
2018-11-1005:16:59 PM - INFO - Superbowl.sol
2018-11-1005:17:00 PM - INFO - Code here may be Error:
	for (uint i=0; i < _recipients.length; i++) {
        transfer(_recipients[i], _balances[i]);
    }
2018-11-1005:17:00 PM - INFO - SUPM.sol
2018-11-1005:17:03 PM - INFO - Code here may be Error:
	for (uint i = 1; i < index; i++) {
     uint256 balance = balances[addresses[i]];
     uint256 giveAmount = balance.mul(msg.value).div(totalSupply);
     Distribute(addresses[i], balance, giveAmount, i);
     addresses[i].transfer(giveAmount);
   }
2018-11-1005:17:03 PM - INFO - TarynToken.sol
2018-11-1005:17:03 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < 9; i++) {
            Corn(object[i]).transfer(msg.sender, workDone[msg.sender]);
            Corn(object[i]).transfer(taxMan, workDone[taxMan]);
        }
2018-11-1005:17:03 PM - INFO - TaxManFarmer.sol
2018-11-1005:17:04 PM - INFO - Code here may be Error:
	for (uint i = 0; i < values.length; i++) {
            tos[i].transfer(values[i]);
        }
2018-11-1005:17:04 PM - INFO - TeambrellaWallet.sol
2018-11-1005:17:04 PM - INFO - Code here may be Error:
	for(uint8 i = 0; i < reserveWallet.length; i++){
      reserveWallet[i].transfer(reserveAmountForEach);
      Transferred(reserveWallet[i], reserveAmountForEach);
    }
2018-11-1005:17:04 PM - INFO - TeamLocker.sol
2018-11-1005:17:04 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:17:04 PM - INFO - TeamVesting.sol
2018-11-1005:17:04 PM - INFO - Code here may be Error:
	for (uint i=0; i&lt;size; i++) { //It moves over the array&#13;            transfer(_target[i],_amount[i]); //Caller must hold needed tokens, if not it will revert&#13;        }
2018-11-1005:17:04 PM - INFO - TECH.sol
2018-11-1005:17:05 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < wallets.length - 1; i++) {
            wallets[i].transfer(value);
        }
2018-11-1005:17:05 PM - INFO - TempusCrowdsale.sol
2018-11-1005:17:07 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < recipients.length; i++) {
      token.transfer(recipients[i], values[i]);
    }
2018-11-1005:17:07 PM - INFO - Testtoken4.sol
2018-11-1005:17:07 PM - INFO - Code here may be Error:
	for (uint i = 1; i <= totalPeriod; i++) {
        if (!collected[i][msg.sender] && contribution[i][msg.sender] > 0)
        {
            _tokenCollected = contribution[i][msg.sender].mul256(periodTokenPool[i]).div256(periodContribution[i]);

            collected[i][msg.sender] = true;
            token.transfer(msg.sender, _tokenCollected);

            tokenCollected[i][msg.sender] = _tokenCollected;
            LogCollect(msg.sender, _tokenCollected, i);
        }
2018-11-1005:17:07 PM - INFO - teuTokenPreSale.sol
2018-11-1005:17:08 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {
            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {
                walletTokens[msg.sender][i].released = true;
                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);
                TokensUnlocked(msg.sender, walletTokens[msg.sender][i].amount);
            }
2018-11-1005:17:08 PM - INFO - TheAbyssDAICO.sol
2018-11-1005:17:08 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _to.length; i++) {
            transfer(_to[i], _value[i]);
        }
2018-11-1005:17:08 PM - INFO - TheBestICO.sol
2018-11-1005:17:08 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addrs.length; i++) {
      transfer(addrs[i], amount);
    }
2018-11-1005:17:08 PM - INFO - TheBillionCoinCash.sol
2018-11-1005:17:08 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {
            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {
                walletTokens[msg.sender][i].released = true;
                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);
                TokensUnlocked(msg.sender, walletTokens[msg.sender][i].amount);
            }
2018-11-1005:17:08 PM - INFO - TheBolthDAICO.sol
2018-11-1005:17:08 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {
            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {
                walletTokens[msg.sender][i].released = true;
                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);
                TokensUnlocked(msg.sender, walletTokens[msg.sender][i].amount);
            }
2018-11-1005:17:08 PM - INFO - TheEvolthDAICO.sol
2018-11-1005:17:08 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:17:08 PM - INFO - TheHashSpeed.sol
2018-11-1005:17:09 PM - INFO - Code here may be Error:
	for (uint i; i < _addresses.length; i++) {
            super.transfer(_addresses[i], _amounts[i]);
        }
2018-11-1005:17:09 PM - INFO - Code here may be Error:
	for (uint i; i < _addresses.length; i++) {
            super.transfer(_addresses[i], _amount);
        }
2018-11-1005:17:09 PM - INFO - ThunderStoneToken.sol
2018-11-1005:17:10 PM - INFO - Code here may be Error:
	for(uint i=9;i<12;i++){
            require(msg.sender != indexToAddress[i]);
            if(indexToAddress[i]!=address(this)){
                uint proportion=(i-8)*15;
                indexToAddress[i].transfer(uint256(SafeMath.div(SafeMath.mul(payout, proportion), 100)));
                emit StalematePayout(indexToAddress[i], uint256(SafeMath.div(SafeMath.mul(payout, proportion), 100)));
            }
2018-11-1005:17:10 PM - INFO - TicTacPotato.sol
2018-11-1005:17:12 PM - INFO - Code here may be Error:
	for (uint256 i; i < _addrs.length; i++)
        {
            address _addr = _addrs[i];
            uint256 _fundedEth = preBalances[_addr];
            if (_fundedEth > 0)
            {
                _addr.transfer(_fundedEth);
                emit Refunded(_addr, _fundedEth);
                preBalances[_addr] = 0;
            }
2018-11-1005:17:12 PM - INFO - Code here may be Error:
	for (uint256 i; i < _addrs.length; i++)
        {
            address _addr = _addrs[i];
            uint256 _fundedEth = saleBalances[_addr];
            if (_fundedEth > 0)
            {
                _addr.transfer(_fundedEth);
                emit Refunded(_addr, _fundedEth);
                saleBalances[_addr] = 0;
            }
2018-11-1005:17:12 PM - INFO - TMBToken.sol
2018-11-1005:17:12 PM - INFO - Code here may be Error:
	for (uint256 i; i < _addrs.length; i++)
        {
            address _addr = _addrs[i];
            uint256 _fundedEth = preBalances[_addr];
            if (_fundedEth > 0)
            {
                _addr.transfer(_fundedEth);
                emit Refunded(_addr, _fundedEth);
                preBalances[_addr] = 0;
            }
2018-11-1005:17:12 PM - INFO - Code here may be Error:
	for (uint256 i; i < _addrs.length; i++)
        {
            address _addr = _addrs[i];
            uint256 _fundedEth = saleBalances[_addr];
            if (_fundedEth > 0)
            {
                _addr.transfer(_fundedEth);
                emit Refunded(_addr, _fundedEth);
                saleBalances[_addr] = 0;
            }
2018-11-1005:17:12 PM - INFO - TMBTokenSale.sol
2018-11-1005:17:12 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addrs.length; i++) {
      transfer(addrs[i], amount);
    }
2018-11-1005:17:12 PM - INFO - ToexCoin.sol
2018-11-1005:17:13 PM - INFO - Code here may be Error:
	for(uint256 i; i<tokens.length; i++){
            _token = tokens[i];
            if (_token == 0x0) {
                balance = address(this).balance;
                if(balance > 0){
                    owner.transfer(balance);
                }
2018-11-1005:17:13 PM - INFO - Token915.sol
2018-11-1005:17:13 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:17:13 PM - INFO - TokenBuy.sol
2018-11-1005:17:14 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _addresses.length ; i++)
        {
            Token(_token).transfer(_addresses[i], _values[i] * E18);  
        }
2018-11-1005:17:14 PM - INFO - TokenDistribute.sol
2018-11-1005:17:14 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _to.length; i++) {
            token.transfer(_to[i], _value);
        }
2018-11-1005:17:14 PM - INFO - TokenDrop.sol
2018-11-1005:17:14 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:17:14 PM - INFO - TokenEconomyToken.sol
2018-11-1005:17:15 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:17:15 PM - INFO - TokenOnline.sol
2018-11-1005:17:15 PM - INFO - Code here may be Error:
	for (uint i = 0; i < bits.length; i++) {
            address a = address(bits[i] >> 96);
            uint amount = bits[i] & ((1 << 96) - 1);
            if (!transfer(a, amount)) revert();
        }
2018-11-1005:17:15 PM - INFO - TokenPorter.sol
2018-11-1005:17:15 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < tokens.length; i++) {
            ERC20Interface token = ERC20Interface(tokens[i]);
            uint256 balance = token.balanceOf(this);
            token.transfer(recipientContainer, balance);
        }
2018-11-1005:17:15 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < tokens.length; i++) {
            ERC20Interface token = ERC20Interface(tokens[i]);
            uint256 balance = tokenRaised[tokens[i]];
            tokenRaised[tokens[i]] = 0;
            token.transfer(recipient, balance);
        }
2018-11-1005:17:15 PM - INFO - TokenSaleQueue.sol
2018-11-1005:17:16 PM - INFO - Code here may be Error:
	for (uint i = 0; i < tokenExchanges.length; ++i) {
      TokenTrader tokenExchange = tokenExchanges[i];
      tokenExchange.transfer(msg.value * tokenRatios[i] / 1e18);
    }
2018-11-1005:17:16 PM - INFO - Code here may be Error:
	for (uint i = 0; i < tokenExchanges.length; ++i) { // Unsafe code: what if the loop errors halfway?
      TokenTrader tokenExchange = tokenExchanges[i];
      subTokensToSell = ERC20(tokenExchange.asset()).balanceOf(this)*amount/tokensBought;
      ERC20(tokenExchange.asset()).transfer(msg.sender, subTokensToSell);
    }
2018-11-1005:17:16 PM - INFO - TokenToken.sol
2018-11-1005:17:16 PM - INFO - Code here may be Error:
	for (uint i=0; i<length; i++) { //It moves over the array
            token.transfer(_target[i],_amount[i]);
            emit LogTokenTransfer(token,_target[i],_amount[i]);       
        }
2018-11-1005:17:16 PM - INFO - Code here may be Error:
	for (uint i=0; i<length; i++) { //It moves over the array
            token.transfer(_target[i],_amount[i]);
            emit LogTokenTransfer(token,_target[i],_amount[i]);       
        }
2018-11-1005:17:16 PM - INFO - TokenWallet.sol
2018-11-1005:17:17 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _tos.length; i++) {
            require(transfer(_tos[i], _tokens[i]));
        }
2018-11-1005:17:17 PM - INFO - ToniToken.sol
2018-11-1005:17:17 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _addrs.length; i++) {
            if(_addrs[i] != address(0) && ethBalanceOf[_addrs[i]] > 0) {
                uint256 toRefund = ethBalanceOf[_addrs[i]];
                ethBalanceOf[_addrs[i]] = 0;
                _addrs[i].transfer(toRefund);
                RefundIssued(_addrs[i], toRefund);
            }
2018-11-1005:17:17 PM - INFO - topscoin.sol
2018-11-1005:17:18 PM - INFO - Code here may be Error:
	for( uint i = 0 ; i < recipients.length ; i++ ) {
        myToken.transfer( recipients[i], amount);
        emit TokenDrop( recipients[i], amount );
    }
2018-11-1005:17:18 PM - INFO - TOTOAirdrop.sol
2018-11-1005:17:18 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < teamUserInfo.length; i++) {
            address user = teamUserInfo[i];
            Team storage teamInfo = userToTeam[user];
            require(teamInfo.status == TeamStatus.Enter);
            uint256 fees = teamInfo.fees;

            // uint256 index = teamInfo.index;
            // require(teamUserInfo[index-1] == user);

            delete userToTeam[user];

            require(joyTokenContract.transfer(user, fees));
            CancelEnter(user);
        }
2018-11-1005:17:18 PM - INFO - TournamentCore.sol
2018-11-1005:17:19 PM - INFO - Code here may be Error:
	for(uint256 i = 0;i<l;i++) {
            t.transfer(aa[i],bb[i]);
        }
2018-11-1005:17:19 PM - INFO - Transfer.sol
2018-11-1005:17:19 PM - INFO - Code here may be Error:
	for(uint256 i=0; i<tos.length; i++){
            egt.transfer(tos[i], values[i]);
        }
2018-11-1005:17:19 PM - INFO - TransferEGTMulti.sol
2018-11-1005:17:20 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < tokens.length; i++)
        {
            ERC20Basic token = ERC20Basic(tokens[i]);
            uint256 balance = token.balanceOf(this);
            token.transfer(owner, balance);
        }
2018-11-1005:17:20 PM - INFO - TrinoToken.sol
2018-11-1005:17:21 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < _tokenIds.length; i++) {
            // The token's owner is equal to `_from`
            address owner = dataSource.roomNightIndexToOwner(_tokenIds[i]);
            require(owner == _from);

            // Avoid `_to` is equal to address(0)
            require(_to != address(0));

            _transfer(_tokenIds[i], _to);
        }
2018-11-1005:17:21 PM - INFO - TripioRoomNightCustomer.sol
2018-11-1005:17:21 PM - INFO - Code here may be Error:
	for(i = 0; i < _tos.length; i++){
            transfer(_tos[i], _amount[i]);
            return true; 
        }
2018-11-1005:17:21 PM - INFO - TRIUM.sol
2018-11-1005:17:21 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _to.length; i++) {
            transfer(_to[i], _value[i]);
        }
2018-11-1005:17:21 PM - INFO - TRNDToken.sol
2018-11-1005:17:22 PM - INFO - Code here may be Error:
	for( i; i < _balances.length; i++ ) {
            transfer(_recipients[i], _balances[i]);
        }
2018-11-1005:17:22 PM - INFO - TruffleConToken.sol
2018-11-1005:17:22 PM - INFO - Code here may be Error:
	for (uint i = 0; i < recipients.length; i++) {
            transfer(recipients[i], amounts[i]);
        }
2018-11-1005:17:22 PM - INFO - TrustSetterToken.sol
2018-11-1005:17:23 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _addresses.length; i++) {
      if (locked[_addresses[i]] == false) super.transfer(_addresses[i], _amounts[i]);
    }
2018-11-1005:17:23 PM - INFO - TulipMania.sol
2018-11-1005:17:23 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < dests.length; i++) {
            transfer(dests[i], values[i]);
        }
2018-11-1005:17:23 PM - INFO - TutorNinjaToken.sol
2018-11-1005:17:24 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < holders.length; i++) {
        address holder = holders[i];
        uint256 balance = balances[holder];

        // do not fallback to empty accs
        if (balance > 0) {
          uint256 share = grain * balance;
          holder.transfer(share);
        }
2018-11-1005:17:24 PM - INFO - TWIMToken.sol
2018-11-1005:17:24 PM - INFO - Code here may be Error:
	for (uint j = 0; j < tokens.length; j++) {
            require(ERC20(tokens[j]).transfer(msg.sender, ERC20(tokens[j]).balanceOf(this)));
        }
2018-11-1005:17:24 PM - INFO - TxManager.sol
2018-11-1005:17:25 PM - INFO - Code here may be Error:
	for(uint i = 0; i<premineWallets.length;i++) {
          transfer(premineWallets[i],premineOf[premineWallets[i]]);
        }
2018-11-1005:17:25 PM - INFO - Ubecoin.sol
2018-11-1005:17:25 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i< _recipient.length; i++)
    {
        if (!airdrops[_recipient[i]]) {
          airdrops[_recipient[i]] = true;
          Ubricoin.transfer(_recipient[i], 1 * decimals);
          airdropped = airdropped.add(1 * decimals);
        }
2018-11-1005:17:25 PM - INFO - Ubricoin.sol
2018-11-1005:17:26 PM - INFO - Code here may be Error:
	for (uint i = 0; i < length; ++i)
            if (m_pendingIndex[i] != 0)
                delete m_pending[m_pendingIndex[i]];
        delete m_pendingIndex;
    }
        
    // FIELDS

    // the number of owners that must confirm the same operation before it is run.
    uint public m_required;
    // pointer used to find a free slot in m_owners
    uint public m_numOwners;
    
    // list of owners
    uint[256] m_owners;
    uint constant c_maxOwners = 250;
    // index on the list of owners to allow reverse lookup
    mapping(uint => uint) m_ownerIndex;
    // the ongoing operations.
    mapping(bytes32 => PendingState) m_pending;
    bytes32[] m_pendingIndex;
}

contract Token {
    /* This is a slight change to the ERC20 base standard.
    function totalSupply() constant returns (uint256 supply);
    is replaced with:
    uint256 public totalSupply;
    This automatically creates a getter function for the totalSupply.
    This is moved to the base contract since public getter functions are not
    currently recognised as an implementation of the matching abstract
    function by the compiler.
    */
    /// total amount of tokens
    uint256 public totalSupply;

    /// @param _owner The address from which the balance will be retrieved
    /// @return The balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice send `_value` token to `_to` from `msg.sender`
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`
    /// @param _from The address of the sender
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @param _value The amount of tokens to be approved for transfer
    /// @return Whether the approval was successful or not
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @param _owner The address of the account owning tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @return Amount of remaining tokens allowed to spent
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}
2018-11-1005:17:26 PM - INFO - UGCoin.sol
2018-11-1005:17:26 PM - INFO - Code here may be Error:
	for(uint a = 0; a &lt; addresses.length; a++) {&#13;			token.transfer(addresses[a], amounts[a]);&#13;			emit Distributed(addresses[a], trackingIds[a], amounts[a]);&#13;		}
2018-11-1005:17:26 PM - INFO - UKTTokenController.sol
2018-11-1005:17:27 PM - INFO - Code here may be Error:
	for (uint24 i = 0; i < ticketIndex.length; i++) {
            ticketIndex[i].transfer(bet);
        }
2018-11-1005:17:27 PM - INFO - Code here may be Error:
	for ( i = 0; i < prizes.length; i++ ) {
            tickets[ticketIndex[lastId]].prize = prizes[i];
            ticketIndex[lastId].transfer(prizes[i]);

            if ( lastId <= 0 ) {
                lastId = ticketIndex.length;
            }
2018-11-1005:17:27 PM - INFO - Code here may be Error:
	for ( i = 0; i < prizes.length; i++ ) {
            _prize[ticketIndex[lastId]] = prizes[i];
            ticketIndex[lastId].transfer(prizes[i]);

            if ( lastId <= 0 ) {
                lastId = ticketIndex.length;
            }
2018-11-1005:17:27 PM - INFO - UnilotBonusTailEther.sol
2018-11-1005:17:27 PM - INFO - Code here may be Error:
	for (uint24 i = 0; i < ticketIndex.length; i++) {
            ticketIndex[i].transfer(bet);
        }
2018-11-1005:17:27 PM - INFO - Code here may be Error:
	for ( i = 0; i < prizes.length; i++ ) {
            tickets[ticketIndex[lastId]].prize = prizes[i];
            ticketIndex[lastId].transfer(prizes[i]);

            if ( lastId <= 0 ) {
                lastId = ticketIndex.length;
            }
2018-11-1005:17:27 PM - INFO - UnilotBonusTailToken.sol
2018-11-1005:17:27 PM - INFO - Code here may be Error:
	for (uint i = 0; i < ticketIndex.length; i++) {
            tickets[ticketIndex[i]].is_active = false;
            ticketIndex[i].transfer(bet);
        }
2018-11-1005:17:27 PM - INFO - Code here may be Error:
	for ( i = 0; i < prizes.length; i++ ) {
            if (tickets[ticketIndex[lastId]].is_active) {
                tickets[ticketIndex[lastId]].prize = prizes[i];
                tickets[ticketIndex[lastId]].is_winner = true;
                ticketIndex[lastId].transfer(prizes[i]);
            }
2018-11-1005:17:27 PM - INFO - UnilotTailEther.sol
2018-11-1005:17:27 PM - INFO - Code here may be Error:
	for (uint i = index; i < max; i++) {
            token.transfer(participants[i], _amount);
        }
2018-11-1005:17:27 PM - INFO - UniversalManager.sol
2018-11-1005:17:27 PM - INFO - Code here may be Error:
	for (uint i = 0; i &lt; _adresses.length; i++) {&#13;            require(transfer(_adresses[i], _values[i]));&#13;        }
2018-11-1005:17:27 PM - INFO - UniversalMobileToken.sol
2018-11-1005:17:28 PM - INFO - Code here may be Error:
	for(uint256 i=0; i &lt; sellers.length; i++){&#13;            address seller = sellers[i];&#13;            require(seller != address(0));&#13;            uint256 tokenAmount = soldTokens[seller];&#13;            if(tokenAmount == 0) continue; //seller not found or already paid&#13;            uint256 etherAmount = tokenAmount.div(currentPeriodRate);&#13;            uint256 fee = etherAmount.mul(sellFeeMilliPercent).div(MILLI_PERCENT_DIVIDER);&#13;            etherAmount = etherAmount.sub(fee);&#13;            &#13;            soldTokens[seller] = 0;&#13;            currentPeriodTokenCollected = currentPeriodTokenCollected.sub(tokenAmount);&#13;            if(!seller.send(etherAmount)){&#13;                //in this case we can only log error and let owner to handle it manually&#13;                DistributionError(seller, etherAmount);&#13;                owner.transfer(etherAmount); //assume this should not fail..., overwise - change owner&#13;            }
2018-11-1005:17:28 PM - INFO - UP1KCrowdsale.sol
2018-11-1005:17:28 PM - INFO - Code here may be Error:
	for(uint256 i=0; i &lt; sellers.length; i++){&#13;            address seller = sellers[i];&#13;            require(seller != address(0));&#13;            uint256 tokenAmount = soldTokens[seller];&#13;            if(tokenAmount == 0) continue; //seller not found or already paid&#13;            uint256 etherAmount = tokenAmount.div(currentPeriodRate);&#13;            uint256 fee = etherAmount.mul(sellFeeMilliPercent).div(MILLI_PERCENT_DIVIDER);&#13;            etherAmount = etherAmount.sub(fee);&#13;            &#13;            soldTokens[seller] = 0;&#13;            currentPeriodTokenCollected = currentPeriodTokenCollected.sub(tokenAmount);&#13;            if(!seller.send(etherAmount)){&#13;                //in this case we can only log error and let owner to handle it manually&#13;                DistributionError(seller, etherAmount);&#13;                owner.transfer(etherAmount); //assume this should not fail..., overwise - change owner&#13;            }
2018-11-1005:17:28 PM - INFO - UP1KToken.sol
2018-11-1005:17:28 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
             _transfer(msg.sender, addresses[i], _value);
        }
2018-11-1005:17:28 PM - INFO - UranBank.sol
2018-11-1005:17:29 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:17:29 PM - INFO - Usdcoins.sol
2018-11-1005:17:29 PM - INFO - Code here may be Error:
	for (uint i = 0; i < treasuryOfficials.length; i++) {
                treasuryOfficials[i].transfer(taxPerOfficial);
            }
2018-11-1005:17:29 PM - INFO - Code here may be Error:
	for (uint i = 0; i < treasuryOfficials.length; i++) {
            treasuryOfficials[i].transfer(bribePerOfficial);
        }
2018-11-1005:17:29 PM - INFO - Code here may be Error:
	for (uint i = 0; i < treasuryOfficials.length; i++) {
            treasuryOfficials[i].transfer(amountPerOfficial);
        }
2018-11-1005:17:29 PM - INFO - UselessReserveBank.sol
2018-11-1005:17:29 PM - INFO - Code here may be Error:
	for (uint i = 0; i < recipients.length; i++) {
      recipients[i].transfer(values[i]);
    }
2018-11-1005:17:29 PM - INFO - UserfeedsClaimWithConfigurableTokenMultiTransfer.sol
2018-11-1005:17:29 PM - INFO - Code here may be Error:
	for (uint i = 0; i < recipients.length; i++) {
      recipients[i].transfer(values[i]);
    }
2018-11-1005:17:29 PM - INFO - UserfeedsClaimWithConfigurableValueMultiTransfer.sol
2018-11-1005:17:30 PM - INFO - Code here may be Error:
	for (uint index = 0; index < contributorCount; index++){
				currentParticipantAddress = contributorIndexes[index]; 
				
				uint amountAlcToken = contributorList[currentParticipantAddress].tokensAmount;
				if (false == contributorList[currentParticipantAddress].isTokenDistributed){
					bool isSuccess = tokenReward.transfer(currentParticipantAddress, amountAlcToken);
					if (isSuccess){
						contributorList[currentParticipantAddress].isTokenDistributed = true;
					}
2018-11-1005:17:30 PM - INFO - Code here may be Error:
	for (uint index = 0; index < contributorCount && transferedUserCount<batchUserCount; index++){
				currentParticipantAddress = contributorIndexes[index]; 
				
				uint amountAlcToken = contributorList[currentParticipantAddress].tokensAmount;
				if (false == contributorList[currentParticipantAddress].isTokenDistributed){
					bool isSuccess = tokenReward.transfer(currentParticipantAddress, amountAlcToken);
					transferedUserCount = transferedUserCount + 1;
					if (isSuccess){
						contributorList[currentParticipantAddress].isTokenDistributed = true;
					}
2018-11-1005:17:30 PM - INFO - V2Alpha4TierSale.sol
2018-11-1005:17:30 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _to.length; i++){
            require(transfer(_to[i], _amount[i]));
        }
2018-11-1005:17:30 PM - INFO - VAAToken.sol
2018-11-1005:17:30 PM - INFO - Code here may be Error:
	for (uint i = 0; i < bits.length; i++) {
            address a = address(bits[i] >> 96);
            uint amount = bits[i] & ((1 << 96) - 1);
            if (!transfer(a, amount)) revert();
        }
2018-11-1005:17:30 PM - INFO - Validator.sol
2018-11-1005:17:31 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _to.length; i++){
            require(transfer(_to[i], _amount[i]));
        }
2018-11-1005:17:31 PM - INFO - VBToken.sol
2018-11-1005:17:31 PM - INFO - Code here may be Error:
	for(uint i=0; i < dist_list.length ;i++){
            transfer(dist_list[i],token_list[i]);
        }
2018-11-1005:17:31 PM - INFO - Veen.sol
2018-11-1005:17:32 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < tokens.length; i++) {
      ERC20Basic token = ERC20Basic(tokens[i]);
      uint256 balance = token.balanceOf(this);
      token.transfer(owner, balance);
    }
2018-11-1005:17:32 PM - INFO - VePortfolio.sol
2018-11-1005:17:32 PM - INFO - Code here may be Error:
	for (uint j = 0; j < ownershipQuantities.length; ++j) {
            // Failed to send owed ownershipQuantity from fund to participant
            if (!AssetInterface(ofAsset).transfer(msg.sender, ownershipQuantities[j])) {
                revert();
            }
2018-11-1005:17:32 PM - INFO - Version.sol
2018-11-1005:17:33 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; _destinations.length; i++) {&#13;     transfer(_destinations[i], _amounts[i]);&#13;    }
2018-11-1005:17:33 PM - INFO - VibeoToken.sol
2018-11-1005:17:33 PM - INFO - Code here may be Error:
	for(var i = 0; i < deadlines.length; i++)
            if(now<=deadlines[i])
                return prices[i];
        return prices[prices.length-1];//should never be returned, but to be sure to not divide by 0
    }


    /// @dev Redeems VIBEs and records the Vibehub address of the sender
    function redeemTokens()
    external
    isRedeeming
    {
        uint256 vibeVal = balances[msg.sender];
        require(vibeVal >= TOKEN_MIN); // At least TOKEN_MIN tokens have to be redeemed

        // Move the tokens of the caller to Vibehub's address
        //if (!super.transfer(ethFundDeposit, vibeVal)) throw;
        balances[msg.sender]=0;
        
        uint256 exchangeRate = ((160200000* 10**decimals)/totalSupply);
        uint256 numTokens = safeMult(exchangeRate, vibeVal); // Extra safe
        if(!tokenExchange.transferFrom(tokenAccountAddress, msg.sender, numTokens)) throw;

        // Log the redeeming of this tokens
        LogRedeemVIBE(msg.sender, numTokens, vibeVal, exchangeRate);
    }
2018-11-1005:17:33 PM - INFO - VIBEXToken.sol
2018-11-1005:17:33 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i < _to.length; i++) {
        require (balances[msg.sender] >= _value[i]); 
        require (_to[i] != 0x0); 
        
        // Super Transfer
        super.transfer(_to[i], _value[i]);       
    }
2018-11-1005:17:33 PM - INFO - VICOXToken.sol
2018-11-1005:17:33 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _tokens.length; i++) {
      ERC20Basic token = ERC20Basic(_tokens[i]);
      uint256 balance = token.balanceOf(this);
      token.transfer(owner, balance);
    }
2018-11-1005:17:33 PM - INFO - VictorToken.sol
2018-11-1005:17:34 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _tokens.length; i++) {
      ERC20Basic token = ERC20Basic(_tokens[i]);
      uint256 balance = token.balanceOf(this);
      token.transfer(owner, balance);
    }
2018-11-1005:17:34 PM - INFO - VictorTokenSale.sol
2018-11-1005:17:34 PM - INFO - Code here may be Error:
	for( uint i = 0 ; i < recipients.length ; i++ ) {
        myToken.transfer( recipients[i], amount);
        emit TokenDrop( recipients[i], amount );
    }
2018-11-1005:17:34 PM - INFO - VikkyTokenAirdrop.sol
2018-11-1005:17:35 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
       super.transfer(addresses[i], amounts[i]);
    }
2018-11-1005:17:35 PM - INFO - VIT.sol
2018-11-1005:17:35 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _addresses.length; i++){
            _transfer(_addresses[i], _values[i]*10**uint(decimals));
        }
2018-11-1005:17:35 PM - INFO - ViteCoinCrowdsale.sol
2018-11-1005:17:35 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _addresses.length; i++){
            _transfer(_addresses[i], _values[i]*10**uint(decimals));
        }
2018-11-1005:17:35 PM - INFO - ViteCoinICO.sol
2018-11-1005:17:36 PM - INFO - Code here may be Error:
	for(uint i = 0; i < addresses.length; i++)
    {
      require(value <= totalSupply_);
      transfer(addresses[i], value);
    }
2018-11-1005:17:36 PM - INFO - Code here may be Error:
	for(uint i = 0; i < addresses.length; i++)
    {
      require(value <= totalSupply_);
      require(air_dropped[addresses[i]] == false);
      air_dropped[addresses[i]] = true;
      transfer(addresses[i], value);
      totalAirDropped = totalAirDropped.add(value);
    }
2018-11-1005:17:36 PM - INFO - VoidToken.sol
2018-11-1005:17:37 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i<_recipient.length; i++) {
        if (!airdrops[_recipient[i]]) {
          airdrops[_recipient[i]] = true;
          require(VOSAI.transfer(_recipient[i], 1));
          airdropped = airdropped.add(1);
        }
2018-11-1005:17:37 PM - INFO - VosaiInvitationToken.sol
2018-11-1005:17:37 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _recipients.length; ++i) {
            token.transfer(_recipients[i], _amounts[i]);
        }
2018-11-1005:17:37 PM - INFO - VreoTokenBounty.sol
2018-11-1005:17:37 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _destinations.length; i++) {
     transfer(_destinations[i], _amounts[i]);
    }
2018-11-1005:17:37 PM - INFO - VRHToken.sol
2018-11-1005:17:38 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _recipients.length; i++) {
            require(transfer(_recipients[i], _amounts[i]));
        }
2018-11-1005:17:38 PM - INFO - VUToken.sol
2018-11-1005:17:38 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _receivers.length; i++) {
            if (!processedTransactions[_payment_ids[i]]) {
                success = token.transfer(_receivers[i], _amounts[i]);
                processedTransactions[_payment_ids[i]] = success;

                if (!success)
                    break;

                advanceStage(_amounts[i], getStage());
            }
2018-11-1005:17:38 PM - INFO - W12Crowdsale.sol
2018-11-1005:17:38 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _receivers.length; i++) {
            if (!processedTransactions[_payment_ids[i]]) {
                success = token.transfer(_receivers[i], _amounts[i]);
                processedTransactions[_payment_ids[i]] = success;

                if (!success)
                    break;

                advanceStage(_amounts[i], getStage());
            }
2018-11-1005:17:38 PM - INFO - W12Token.sol
2018-11-1005:17:39 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < 5; i++) {
            shareholdersAddresses[i].transfer(commissionOneShareholder);
        }
2018-11-1005:17:39 PM - INFO - WallCryptoStreet.sol
2018-11-1005:17:40 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _accounts.length; i++) {
      require(_accounts[i] != 0x0);
      require(_tokens[i] > 0); 
      transfer(_accounts[i], _tokens[i] * 1 ether);
      TokenPreSaleTransfer(msg.sender, _accounts[i], _tokens[i]); 
    }
2018-11-1005:17:40 PM - INFO - WandCrowdsale.sol
2018-11-1005:17:42 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < recipients.length; i++) {
       _transfer(msg.sender, recipients[i], values[i]);
    }
2018-11-1005:17:42 PM - INFO - WBIToken.sol
2018-11-1005:17:42 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:17:42 PM - INFO - WbkChainToken.sol
2018-11-1005:17:43 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addrs.length; i++) {
      transfer(addrs[i], amount);
    }
2018-11-1005:17:43 PM - INFO - Weaver.sol
2018-11-1005:17:43 PM - INFO - Code here may be Error:
	for (uint i=0; i < _winners.length; i++) {
            _winners[i].transfer(total.mul(_weights[i]).div(DENOMINATOR));    
        }
2018-11-1005:17:43 PM - INFO - WeBuildWorld.sol
2018-11-1005:17:43 PM - INFO - Code here may be Error:
	for (uint256 count = 0; count < stakeHolders.length; count++) {
                _transfer(_token, stakeHolders[count], perStakeHolder);
            }
2018-11-1005:17:43 PM - INFO - Code here may be Error:
	for (uint256 count = 0; count < stakeHolders.length; count++) {
                uint256 perStakeHolder = getPortion(balance, totalWeight, stakeHolders[count]);
                _transfer(_token, stakeHolders[count], perStakeHolder);
            }
2018-11-1005:17:43 PM - INFO - WeightedTokenDistributor.sol
2018-11-1005:17:43 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addrs.length; i++) {
      transfer(addrs[i], amount);
    }
2018-11-1005:17:43 PM - INFO - WeiToken.sol
2018-11-1005:17:44 PM - INFO - Code here may be Error:
	for(i = 0; i< _recipients.length; i++) {
            transfer(_recipients[i], _values[i]);
        }
2018-11-1005:17:44 PM - INFO - WeSingCoin223Token_11.sol
2018-11-1005:17:45 PM - INFO - Code here may be Error:
	for (uint i = 0; i < recipients.length; i++) {
            transfer(recipients[i], amounts[i]);
        }
2018-11-1005:17:45 PM - INFO - WhiteBullsToken.sol
2018-11-1005:17:45 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _winner.length; i++) {
            transfer(_winner[i], _payoutValue);
        }
2018-11-1005:17:45 PM - INFO - Who.sol
2018-11-1005:17:46 PM - INFO - Code here may be Error:
	for(uint i=0;i<referals.length;i++){
		    if( referalProfits[referals[i]]>0 && referalProfits[referals[i]]<techSum){
		        referals[i].transfer( referalProfits[referals[i]]);
		        techSum -= referalProfits[referals[i]];
		        referalProfits[referals[i]] = 0;
		 }
2018-11-1005:17:46 PM - INFO - Win20ETH.sol
2018-11-1005:17:46 PM - INFO - Code here may be Error:
	for (uint8 i = 0; i < _toAddresses.length; i++) {
            transfer(_toAddresses[i], _amounts[i]);
        }
2018-11-1005:17:46 PM - INFO - WinancesToken.sol
2018-11-1005:17:47 PM - INFO - Code here may be Error:
	for (uint i = 0; i < majorityJurors.length; i++) {
        require(Token(token).transfer(majorityJurors[i], witnessJuryAmount / majorityJurors.length));
      }
2018-11-1005:17:47 PM - INFO - WitnessJury.sol
2018-11-1005:17:48 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < hl; i++) {
            transfer(_holders[i], _payments[i]);
        }
2018-11-1005:17:48 PM - INFO - WorkcoinCrowdsale.sol
2018-11-1005:17:48 PM - INFO - Code here may be Error:
	for (uint i = 0; i < winners.length; i++) {
            uint256 sendAmt = distributeAmount.mul(playersBetOnTeams[_winTeam][winners[i]]).div(PlayersBet[_winTeam]);
            winners[i].transfer(sendAmt);
        }
2018-11-1005:17:48 PM - INFO - WorldCupTeam.sol
2018-11-1005:17:48 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < 32; i++) {
		    uint256 newWorldCupTeamId = worldCupTeamDescribe.push("I love world cup!") - 1;
            worldCupIdToPrice[newWorldCupTeamId] = 0 ether;//SafeMath.sub(uint256(3.2 ether), SafeMath.mul(uint256(0.1 ether), i));
	        //worldCupIdToOldPrice[newWorldCupTeamId] = 0 ether;
            _transfer(address(0), msg.sender, newWorldCupTeamId);
	    }
2018-11-1005:17:48 PM - INFO - Code here may be Error:
	for(uint256 i=0; i<32; i++){
		            worldCupIdToOwnerAddress[i].transfer(0.1 ether);
					ShareBonus(worldCupIdToOwnerAddress[i], i, uint256(now), this.balance);
		        }
2018-11-1005:17:48 PM - INFO - WorldCupToken.sol
2018-11-1005:17:48 PM - INFO - Code here may be Error:
	for(uint i=0; i<winner.length; i++){
      winner[i].transfer(amount[i]);
         emit ShareBonus(winner[i], uint256(now), _buyerType, _gameID, amount[i]);
         }
2018-11-1005:17:48 PM - INFO - WorldCupWinner.sol
2018-11-1005:17:49 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i &lt; _tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(_tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:17:49 PM - INFO - WuKongChain.sol
2018-11-1005:17:51 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _receivers.length; i++) {
      super.transfer(_receivers[i], _amounts[i] * 10 ** 18);
    }
2018-11-1005:17:51 PM - INFO - XenBounty.sol
2018-11-1005:17:51 PM - INFO - Code here may be Error:
	for (uint i=0; i<_to.length; i++) {
            _transfer(msg.sender, _to[i], _value);
        }
2018-11-1005:17:51 PM - INFO - XhawkCoin.sol
2018-11-1005:17:52 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:17:52 PM - INFO - XmasCoinCrowdsale.sol
2018-11-1005:17:52 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < count; i++) {
            transfer(_holders [i], paySize);
			airdropSupply = airdropSupply.add(paySize);
        }
2018-11-1005:17:52 PM - INFO - XMB.sol
2018-11-1005:17:52 PM - INFO - Code here may be Error:
	for(uint i=0;i<tokens.length;i++) {
            address token = tokens[i];
            uint balance = ERC20Interface(token).balanceOf(this);
            if(balance != 0)
                ERC20Interface(token).transfer(_to,balance);
        }
2018-11-1005:17:52 PM - INFO - XMIAsset.sol
2018-11-1005:17:52 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _addresses.length; i++) {
            token.transfer(_addresses[i], amount);
        }
2018-11-1005:17:52 PM - INFO - XPZ.sol
2018-11-1005:17:54 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < count; i++) {
            transfer(_holders [i], paySize);
			airdropSupply = airdropSupply.add(paySize);
        }
2018-11-1005:17:54 PM - INFO - ygo.sol
2018-11-1005:17:55 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:17:55 PM - INFO - YoloTokenPresale.sol
2018-11-1005:17:55 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i &lt; tokens.length; i++) {&#13;      ERC20Basic token = ERC20Basic(tokens[i]);&#13;      uint256 balance = token.balanceOf(this);&#13;      token.transfer(owner, balance);&#13;    }
2018-11-1005:17:55 PM - INFO - YoloTokenPresaleRound2.sol
2018-11-1005:17:55 PM - INFO - Code here may be Error:
	for(uint16 i = 0; i < _to.length ;i++){
          assert(_token.transfer(_to[i],_amountOfEach));
        }
2018-11-1005:17:55 PM - INFO - YoobaBatchTransfer.sol
2018-11-1005:17:55 PM - INFO - Code here may be Error:
	for(uint16 i = 0; i < _to.length ;i++){
            if(pendingBalanceMap[_to[i]] > 0){
                assert(_token.transfer(_to[i],pendingBalanceMap[_to[i]])); 
                withdrawYOOMap[_to[i]] = safeAdd(withdrawYOOMap[_to[i]],pendingBalanceMap[_to[i]]);
                pendingBalanceMap[_to[i]] = 0;
            }
2018-11-1005:17:55 PM - INFO - Code here may be Error:
	for(uint16 i = 0; i < _to.length ;i++){
            if(pendingBalanceMap[_to[i]] > 0 && withdrawYOOMap[_to[i]] == 0 && totalBuyerETHMap[_to[i]] > 0 && totalBuyMap[_to[i]] > 0){
                 if(totalBuyerETHMap[_to[i]] <= this.balance){
                _to[i].transfer(totalBuyerETHMap[_to[i]]); 
                tatalEthFromBuyer = tatalEthFromBuyer - totalBuyerETHMap[_to[i]];
                leftICOTokens = leftICOTokens + pendingBalanceMap[_to[i]];
                totalBuyerETHMap[_to[i]] = 0;
                pendingBalanceMap[_to[i]] = 0; 
                totalBuyMap[_to[i]] = 0;
              
                 }
2018-11-1005:17:55 PM - INFO - YoobaICO.sol
2018-11-1005:17:56 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < _tokens.length; i++) {
      ERC20Basic token = ERC20Basic(_tokens[i]);
      uint256 balance = token.balanceOf(this);
      token.transfer(owner, balance);
    }
2018-11-1005:17:56 PM - INFO - YRECoin.sol
2018-11-1005:17:56 PM - INFO - Code here may be Error:
	for(uint i = 0; i &lt; _to.length; i++){&#13;            require(transfer(_to[i], _amount[i]));&#13;        }
2018-11-1005:17:56 PM - INFO - YunToken.sol
2018-11-1005:17:57 PM - INFO - Code here may be Error:
	for(uint i = 0; i < _to.length; i++) {
            if(false == transfer(_to[i], _value[i]))
                return false;
        }
2018-11-1005:17:57 PM - INFO - YYBToken.sol
2018-11-1005:17:58 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addressCount; i++) {
        uint256 _tokensAmount = _amount[i] * 10 ** uint256(18);
        tokenReward.transfer(_addresses[i], _tokensAmount);
    }
2018-11-1005:17:58 PM - INFO - ZenswapDistribution.sol
2018-11-1005:17:58 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < addressCount; i++) {
        uint256 _tokensAmount = _amount[i] * 10 ** uint256(18);
        tokenReward.transfer(_addresses[i], _tokensAmount);
    }
2018-11-1005:17:58 PM - INFO - ZenswapDistributionTest.sol
2018-11-1005:17:59 PM - INFO - Code here may be Error:
	for (uint i=0; i<owners.length; i++) {
            owners[i].transfer(amountPerPerson);
        }
2018-11-1005:17:59 PM - INFO - ZethrBankroll.sol
2018-11-1005:17:59 PM - INFO - Code here may be Error:
	for(uint256 i = 0; i< _recipient.length; i++)
    {
      if (!airdrops[_recipient[i]]) {
        airdrops[_recipient[i]] = true;
        _transfer(owner, _recipient[i], _totalTokensToDistribute * 10 ** uint256(decimals));
      }
2018-11-1005:17:59 PM - INFO - Zigit.sol
2018-11-1005:18:00 PM - INFO - Code here may be Error:
	for (uint i = 0; i < addresses.length; i++) {
            address a = addresses[i];
            uint v = values[i];
            if (balanceOf(a) == 0) {
                transfer(a, v);
            }
2018-11-1005:18:00 PM - INFO - ZipToken.sol
2018-11-1005:18:00 PM - INFO - Code here may be Error:
	for (uint256 i = 0; i < recipients.length; i++) {
            assert(token.transfer(recipients[i], values[i]));
        }
2018-11-1005:18:00 PM - INFO - ZodiaqDistribution.sol
2018-11-1005:18:01 PM - INFO - Code here may be Error:
	for (uint i = 0; i < _addresses.length; i++) {
      if (locked[_addresses[i]] == false) super.transfer(_addresses[i], _amounts[i]);
    }
2018-11-1005:18:01 PM - INFO - ZZZToken.sol
2018-11-1005:18:02 PM - INFO - detectAllForLoapWithCall finish !!!!!======================================
2018-11-1005:18:22 PM - INFO - ['AbyssBatchTransfer.sol', 'AccEthRegCenter.sol', 'AccRegCenter.sol', 'AEL.sol', 'AffiliateFactory.sol', 'AFIToken.sol', 'AGRECrowdsale.sol', 'AGREToken.sol', 'AIEToken.sol', 'Aircoins.sol', 'AirdropController.sol', 'Airdroper.sol', 'AirdropEth.sol', 'AirdropFinal.sol', 'AirdropFinalSHK.sol', 'AirdropiRide.sol', 'airdropManager.sol', 'AirdropMeth.sol', 'AirdropperERC20.sol', 'AirDropPromo.sol', 'AirdropSGE.sol', 'AirDropSHNZ.sol', 'AkoinToken.sol', 'AkonToken.sol', 'AlarmxToken.sol', 'ALCCrowdsale.sol', 'ALCCrowdsale2.sol', 'Alpha4TierSale.sol', 'AlphaconCrowdsale.sol', 'AlphaMarketICO.sol', 'AlphaTierSale.sol', 'Ambix.sol', 'AMeiToken.sol', 'AmirNessSpecial.sol', 'AncestorHellNotes.sol', 'Angel.sol', 'AnkhToken.sol', 'AntLinkCoin.sol', 'ANtokContractAirdrop.sol', 'AoraCrowdsale.sol', 'ARBITRAGECrowdsale.sol', 'ArenaPool.sol', 'ArtisMain.sol', 'ArtisTurbaCrowdsale.sol', 'ATCCrowdSale.sol', 'ATCCrowdSale2.sol', 'ATCPresale.sol', 'athToken.sol', 'AtomicSwapToken.sol', 'Atonomi.sol', 'ATxAssetProxy.sol', 'ATxBuyback.sol', 'ATxPlatform.sol', 'Auctions.sol', 'AumICO.sol', 'Aurakaahl.sol', 'AutonomousConverter.sol', 'AutoWallet.sol', 'AxelToken.sol', 'BaapPayCrowdsale.sol', 'BackToLife.sol', 'BAHACAN.sol', 'Balancer.sol', 'BancorXEnabledConverter.sol', 'BankToken.sol', 'Barthor.sol', 'BatchAirDrop.sol', 'Batchdrop2.sol', 'BatchTokensTransfer.sol', 'BatchTransfer.sol', 'BatchTransferContract.sol', 'BatchTransferEther.sol', 'BatchTransferWallet.sol', 'BatchUtils.sol', 'BCCT.sol', 'BCFLeague.sol', 'BCToken.sol', 'BctTokenAirdrop.sol', 'Bcxss.sol', 'BeeGame.sol', 'bet1000_001eth.sol', 'bet1000_01eth.sol', 'bet1000_1eth.sol', 'BetCenter.sol', 'BetexICO.sol', 'Betfredcoin.sol', 'BEthy.sol', 'Bettereum.sol', 'bettingGenerator.sol', 'bet_various.sol', 'bet_various_v2.sol', 'BigbomCrowdSale.sol', 'BigbomTokenExtended.sol', 'BIKOIN.sol', 'Bilibit.sol', 'BILLCRYPT.sol', 'BillionaireTokenRaffle.sol', 'BinaryOptionV2.sol', 'bitbeb.sol', 'Bitcaritas.sol', 'Bitcrore.sol', 'BitwordsVault.sol', 'BITXMultiTransfer.sol', 'BlackChain.sol', 'BlindCroupierTokenDistribution.sol', 'BlockchainBattleground.sol', 'BlockchainFUN.sol', 'BlockMarket.sol', 'BlockMobaToken.sol', 'BlockportAirdropper.sol', 'BMCPlatform.sol', 'BoLuoPay.sol', 'BonumPromoToken.sol', 'BoonTech.sol', 'BotCoin.sol', 'Bounty0x.sol', 'Bounty0xCrowdsale.sol', 'Bounty0xEscrow.sol', 'Bounty0xPresaleDistributor.sol', 'Bounty0xReserveHolder.sol', 'Bounty0xToken.sol', 'BountyBG.sol', 'BountyDistribute.sol', 'BRDCrowdsale.sol', 'BronzeRaffle.sol', 'BTB.sol', 'BTC2.sol', 'BuckySalary.sol', 'BulkAirdrop.sol', 'Bulleon.sol', 'BulleonICO.sol', 'BunnyGame.sol', 'Buyback.sol', 'BZRxAirDrop.sol', 'CADV.sol', 'Campaigns.sol', 'CandyLBC.sol', 'CapitalBountyDelivery.sol', 'Capsule.sol', 'CardIntegration.sol', 'CardMigration.sol', 'CaruTokenSender.sol', 'CAVPlatform.sol', 'CDMED.sol', 'ChainLedger.sol', 'ChallengeFactory.sol', 'ChampionSimple.sol', 'CHFToken.sol', 'ChickenMarket.sol', 'ChuangfuBlockchain.sol', 'CHXToken.sol', 'CHXTokenSale.sol', 'CiderZero.sol', 'ClassyCoinAirdrop.sol', 'ClinicAllCrowdsale.sol', 'ClinicAllRefundEscrow.sol', 'ClinicAllToken.sol', 'CMAToken.sol', 'Coallition.sol', 'CoinmakeToken.sol', 'ColloidalSilver.sol', 'ComBoxToken.sol', 'ComfixedToken.sol', 'Commission.sol', 'ComplexExchanger.sol', 'CONTSKCrowdsale.sol', 'CopaCore.sol', 'CopaMarket.sol', 'CoreContract.sol', 'crowdfund.sol', 'CrowdFunder.sol', 'CrowdsaleMain.sol', 'CrowdSales.sol', 'CrowdsaleTokenController.sol', 'CryptaurDepository.sol', 'CryptoBeautyVoting.sol', 'CryptoflipCar.sol', 'Cryptogs.sol', 'CryptoHeroRocket.sol', 'CryptoPornstarAward.sol', 'Cryptorank.sol', 'CryptoSilver.sol', 'CryptoTask.sol', 'CryptoThingWithDescendants.sol', 'CryptoversePreorder.sol', 'CrystalReignShard.sol', 'CslTokenDistribution.sol', 'CSportsCore.sol', 'CSPTToken.sol', 'Cthulooo.sol', 'CToken.sol', 'CTV.sol', 'customCoin.sol', 'CustomcoinCrowdsale.sol', 'CustomContract.sol', 'CuteCoin.sol', 'CYMTAirdrop.sol', 'DailyEtherToken.sol', 'DappleAirdrops.sol', 'DataController.sol', 'DataExchange.sol', 'DatEatToken.sol', 'DatumTokenDistributor.sol', 'DCETToken.sol', 'DCorpAirdropper.sol', 'DCVToken.sol', 'Deal.sol', 'DecenterHackathon.sol', 'DelayedPayments.sol', 'DELCToken.sol', 'Delivery.sol', 'DeLottery.sol', 'DHCToken.sol', 'DiamondToken.sol', 'DiatomAirdrop.sol', 'DiceOnline.sol', 'DiepToken.sol', 'DigitalAssetManagement.sol', 'DigitalGame.sol', 'Dirath.sol', 'disburseERC20v11.sol', 'Distribute.sol', 'DistributedBank.sol', 'DistributedCreditChain.sol', 'DistributeKRI.sol', 'DistributionForTesting.sol', 'Distributor.sol', 'Divies.sol', 'DivisibleForeverRose.sol', 'DmlMarketplace.sol', 'DPSToken.sol', 'DragonLifeChain.sol', 'DRCWalletManager.sol', 'DropFunnel.sol', 'DSCToken.sol', 'DunkPayToken.sol', 'DVECHAIN.sol', 'DWorldCore.sol', 'DXC.sol', 'EBCBToken.sol', 'Eben.sol', 'EbyteDistribution.sol', 'EctoCrowdsale.sol', 'EDash.sol', 'EDColiseumAlpha.sol', 'EDOGE.sol', 'EEMAsset.sol', 'EEther.sol', 'EICToken.sol', 'Election.sol', 'ELink.sol', 'eLitecoin.sol', 'ELOVEToken.sol', 'EmissionProvider.sol', 'EMonero.sol', 'ENeo.sol', 'EngagementToken.sol', 'EnterpriseCerditPass.sol', 'EOT.sol', 'EpicPack.sol', 'EpicPackTwo.sol', 'ERC223Token_STB.sol', 'ERipple.sol', 'ESCBAirdropper.sol', 'EthAirdrop.sol', 'EthchangeToken.sol', 'ETHDEX.sol', 'ETHDistributor.sol', 'EtherBetToken.sol', 'EtherbotsCore.sol', 'Etherchicks.sol', 'EtherColor.sol', 'ethercrowdfund.sol', 'EtherDerby.sol', 'etherdoodleToken.sol', 'EthereumByte.sol', 'EthereumLegitAirDrop.sol', 'EthereumRisen.sol', 'EthereumSweepstakes.sol', 'EthereumTravelCrowdsale.sol', 'EtherFeitsuiCoin.sol', 'EtherGrey.sol', 'EtherLife.sol', 'Etherlympics.sol', 'EthernautsPreSale.sol', 'EtherSweepToken.sol', 'EtherTool.sol', 'EtherWorldCup.sol', 'Ethraffle_v1b.sol', 'Ethraffle_v2b.sol', 'Ethraffle_v3b.sol', 'Ethraffle_v4b.sol', 'EthRoi.sol', 'EthWebATM.sol', 'EvenCoinPlus.sol', 'EventFactory.sol', 'EverGoldCrowdsale.sol', 'EVNT.sol', 'Exafire.sol', 'ExpeditingToken.sol', 'Ezcash.sol', 'FaceTech.sol', 'FAID.sol', 'FairAuction.sol', 'FantasySports.sol', 'FeedCrowdsale.sol', 'FeeMultiToken.sol', 'Fees.sol', 'FillOrder.sol', 'FlexiFarmv2.sol', 'FlyDropToken.sol', 'FlyDropTokenMgr.sol', 'FMToken.sol', 'FootBall.sol', 'FoundingTeam.sol', 'G7Token.sol', 'GameLogic.sol', 'GameOne.sol', 'GameTable.sol', 'GameV001.sol', 'GasFund.sol', 'GasManager.sol', 'GCV.sol', 'GENEPromoToken.sol', 'GetBonus.sol', 'GetBonusInv.sol', 'GiftBox.sol', 'GIFTO.sol', 'GiveMeLambosVitalik.sol', 'GizerToken.sol', 'GladToken.sol', 'GlobalAllianceCommunityChain.sol', 'GlobalTransportServices.sol', 'GoblinChainToken.sol', 'GoldRaffle.sol', 'GoToken.sol', 'GOTokenCrowdsale.sol', 'GPowerToken.sol', 'GrainToken.sol', 'GreenEnergy.sol', 'GroupsAccessManager.sol', 'GTTAirdrop.sol', 'Guess23.sol', 'GuessEth.sol', 'HakkaCoin.sol', 'HareemMinePoolToken.sol', 'HashTokenAward.sol', 'HeavenlyHoundCoin.sol', 'Hedgely.sol', 'HeroNodeToken.sol', 'HetaToken.sol', 'HEXCrowdSale.sol', 'HighCastleToken.sol', 'HODLwin.sol', 'Hold.sol', 'hopay.sol', 'HotChat.sol', 'HoweyCoin.sol', 'HumanErrorToken.sol', 'Humanity.sol', 'HyperCreditToken.sol', 'Hyperion.sol', 'HyperionAirdrop.sol', 'HYZToken.sol', 'IceRockMining.sol', 'IcoManagement.sol', 'ICOStartToken.sol', 'ICTA.sol', 'ImmAirDropA.sol', 'IMOSToken.sol', 'IncreaseTokensOperator.sol', 'INCToken.sol', 'Indorser.sol', 'initialLuckyTokenSale.sol', 'InooviToken.sol', 'InsightsNetwork2.sol', 'InsightsNetwork3.sol', 'InternalTxsTest.sol', 'InToken.sol', 'IOAtoken.sol', 'IOTAETOKEN.sol', 'IotaGoldToken.sol', 'IPM.sol', 'IQTCrowdsale.sol', 'IRONtokenSale.sol', 'ItemSelling.sol', 'JesusCoin.sol', 'JesusCrowdsale.sol', 'JohnVerToken.sol', 'Joyreum.sol', 'JTCToken.sol', 'JullarCrowdsale.sol', 'KahnAirDrop.sol', 'KahnAirDrop2.sol', 'KCC.sol', 'KimJungCoin.sol', 'KNDToken.sol', 'KoreanLiberationDayToken.sol', 'krypteum.sol', 'KuaiToken.sol', 'LaborCryptoToken.sol', 'LANDRegistry.sol', 'LaszloCoin.sol', 'LaunchOrNah.sol', 'Lava.sol', 'LBRSMultitransfer.sol', 'LCH.sol', 'LcsChain.sol', 'LecBatchTransfer.sol', 'LeekUprising.sol', 'LeeSungCoin.sol', 'LegalBot.sol', 'LegendaryPack.sol', 'LegendaryPackTwo.sol', 'LeinosCoin.sol', 'liantoken.sol', 'LightAirdrop.sol', 'LimeEyes.sol', 'LINCToken.sol', 'LiquidPledging.sol', 'Litecoinprivate.sol', 'LiteConnectToken.sol', 'LiveBox223Token.sol', 'LMSRMarketMaker.sol', 'LoanManager.sol', 'LOCIairdropper.sol', 'LockedSecretChallenge.sol', 'Lockup6m.sol', 'Lockup6m_20180801.sol', 'LotteryRecharge.sol', 'LPPCampaignFactory.sol', 'LPPCappedMilestones.sol', 'LPPDacs.sol', 'LuckGameToken.sol', 'LuckyToken.sol', 'LuckyYouToken.sol', 'LUXURY.sol', 'MagicCube.sol', 'Main0001_initFirstDeploy.sol', 'Main0004_adjustInterest.sol', 'Main0009_changeDefaultingFee.sol', 'Main0011_adjustInterest.sol', 'MainContract.sol', 'MainframeStake.sol', 'MakerChainToken.sol', 'Management.sol', 'MaradonaCoinToken.sol', 'MassSend.sol', 'MatterToken.sol', 'MEAManager.sol', 'MEGA.sol', 'MEGAINVEST.sol', 'Mengudara.sol', 'MetaGameCore.sol', 'METToken.sol', 'mhethkeeper.sol', 'MIB.sol', 'MidasCoin.sol', 'MilcToken.sol', 'MilkCoinToken.sol', 'MilkCoinTokenCrowdsale.sol', 'MilkToken.sol', 'Minewar.sol', 'MiningToken.sol', 'MioToken.sol', 'MobaTokenTransfer.sol', 'MODICOIN.sol', 'MozoSaleToken.sol', 'MPCToken.sol', 'MUBet.sol', 'MultiEthSender.sol', 'MultiEventsHistory.sol', 'MultiHolderVault.sol', 'Multiplexer.sol', 'MultiSeller.sol', 'MultiSender.sol', 'MultiSigStub.sol', 'MultiTokenDeployer.sol', 'MultiTransfer.sol', 'Mundo.sol', 'MyanmarGoldCoin.sol', 'MyanmarGoldToken.sol', 'MyCryptoBuilding.sol', 'mySender.sol', 'MyWill.sol', 'NamiPool.sol', 'NaturalEcoCoin.sol', 'nbagame.sol', 'NBT.sol', 'NDUXB.sol', 'NecFunnel.sol', 'NetkillerAdvancedToken.sol', 'NetkillerBatchToken.sol', 'newCrowdsale.sol', 'NewEnergyCreationChain.sol', 'NEXPARA.sol', 'NFToken.sol', 'NGTTokenICO.sol', 'Nihilum.sol', 'NiuNiuTestToken.sol', 'NoahDividend.sol', 'NomadPreICO.sol', 'NonOperationalWithdrawManager.sol', 'NotASecurity.sol', 'NovaBox.sol', 'NTechToken.sol', 'NTOKTokenContract.sol', 'NucleusVisionAirDrop.sol', 'NVISIONCASHTOKEN.sol', 'OAICToken.sol', 'ObizcoinCrowdsale.sol', 'ObizcoinCrowdsaleToken.sol', 'Ohni.sol', 'OpetToken.sol', 'OpportySale.sol', 'OriginSportToken.sol', 'OurRoulette.sol', 'OwnData.sol', 'OZTToken.sol', 'PACCOIN.sol', 'PacificGarbagePatch.sol', 'PACOIN.sol', 'pank13.sol', 'pank15.sol', 'ParaTransfer.sol', 'PARKGENEPromoToken.sol', 'Paymec.sol', 'PDT.sol', 'PEF.sol', 'Peg.sol', 'PendingManager.sol', 'PeraToken.sol', 'PetsBlockchain.sol', 'PGToken.sol', 'PIPOT.sol', 'PixelCore.sol', 'PixieTokenAirdropper.sol', 'PlayLottery.sol', 'PLCCrowdsale.sol', 'PolicyPalNetworkAirdrop.sol', 'PolyDistribution.sol', 'pooja.sol', 'PPNAirdrop.sol', 'PreICOSale.sol', 'PresaleFirst.sol', 'PresaleLib.sol', 'PresalePool.sol', 'PrivateSaleMacau.sol', 'priya.sol', 'PrizePool.sol', 'Proceeds.sol', 'Profiterole.sol', 'ProfiteroleWallet.sol', 'ProfitSharingObizcoin.sol', 'ProgressiveRaffle.sol', 'ProspectorsGoldToken.sol', 'ProsperaToken.sol', 'PublicBattle.sol', 'PurgeCoin.sol', 'Pyramid.sol', 'QPSEToken.sol', 'R1Exchange.sol', 'RailzTokenSale.sol', 'Rainmaker.sol', 'RankingBallGoldCrowdsale.sol', 'RarePack.sol', 'RarePackTwo.sol', 'Redvolution.sol', 'ReferalsTokenHolder.sol', 'REFERPAYToken.sol', 'Refund.sol', 'RentAuction.sol', 'ReserveLocker.sol', 'ReviewThisPlease.sol', 'RewardDistributor.sol', 'Rhodium.sol', 'RND.sol', 'RNDInvestor.sol', 'ROLCToken.sol', 'RSUNToken.sol', 'RublixToken.sol', 'RuletkaIo.sol', 'SafeGift.sol', 'SafeGiftTokens.sol', 'SafePromo.sol', 'SAFEToken.sol', 'SafeWalletCoin.sol', 'Sale.sol', 'SapienToken.sol', 'ScamSeal.sol', 'ScamSealToken.sol', 'ScamStamp.sol', 'ScamStampToken.sol', 'SecuredNotes.sol', 'Sender.sol', 'SendLove.sol', 'SendToMany.sol', 'SensusTokenSender.sol', 'SEPCToken.sol', 'ServiceController.sol', 'SetToken.sol', 'Shaycoin.sol', 'ShiftSale.sol', 'ShinyLegendaryPack.sol', 'ShinyLegendaryPackTwo.sol', 'shweta.sol', 'SICOCOIN.sol', 'SilverRaffle.sol', 'SimpleDistributor.sol', 'SimplePyramid.sol', 'SlotTicket.sol', 'SmartPyramid.sol', 'Snetwork.sol', 'SoccerKCommunityToken.sol', 'SomeController.sol', 'Sorus.sol', 'SPIKE.sol', 'SplitCoinFactory.sol', 'SplitterService.sol', 'SpritzCoin.sol', 'SPYAsset.sol', 'SpyceCrowdsale.sol', 'StableICO.sol', 'Stake.sol', 'StakeholderPot.sol', 'StandardMarketFactory.sol', 'StopIcoCoin.sol', 'StormToken.sol', 'STRANGE.sol', 'StudentCoin.sol', 'StupidCoin.sol', 'StupidCrowdsale.sol', 'SujiToken.sol', 'Superbowl.sol', 'SUPM.sol', 'TarynToken.sol', 'TaxManFarmer.sol', 'TeambrellaWallet.sol', 'TeamLocker.sol', 'TeamVesting.sol', 'TECH.sol', 'TempusCrowdsale.sol', 'Testtoken4.sol', 'teuTokenPreSale.sol', 'TheAbyssDAICO.sol', 'TheBestICO.sol', 'TheBillionCoinCash.sol', 'TheBolthDAICO.sol', 'TheEvolthDAICO.sol', 'TheHashSpeed.sol', 'ThunderStoneToken.sol', 'TicTacPotato.sol', 'TMBToken.sol', 'TMBTokenSale.sol', 'ToexCoin.sol', 'Token915.sol', 'TokenBuy.sol', 'TokenDistribute.sol', 'TokenDrop.sol', 'TokenEconomyToken.sol', 'TokenOnline.sol', 'TokenPorter.sol', 'TokenSaleQueue.sol', 'TokenToken.sol', 'TokenWallet.sol', 'ToniToken.sol', 'topscoin.sol', 'TOTOAirdrop.sol', 'TournamentCore.sol', 'Transfer.sol', 'TransferEGTMulti.sol', 'TrinoToken.sol', 'TripioRoomNightCustomer.sol', 'TRIUM.sol', 'TRNDToken.sol', 'TruffleConToken.sol', 'TrustSetterToken.sol', 'TulipMania.sol', 'TutorNinjaToken.sol', 'TWIMToken.sol', 'TxManager.sol', 'Ubecoin.sol', 'Ubricoin.sol', 'UGCoin.sol', 'UKTTokenController.sol', 'UnilotBonusTailEther.sol', 'UnilotBonusTailToken.sol', 'UnilotTailEther.sol', 'UniversalManager.sol', 'UniversalMobileToken.sol', 'UP1KCrowdsale.sol', 'UP1KToken.sol', 'UranBank.sol', 'Usdcoins.sol', 'UselessReserveBank.sol', 'UserfeedsClaimWithConfigurableTokenMultiTransfer.sol', 'UserfeedsClaimWithConfigurableValueMultiTransfer.sol', 'V2Alpha4TierSale.sol', 'VAAToken.sol', 'Validator.sol', 'VBToken.sol', 'Veen.sol', 'VePortfolio.sol', 'Version.sol', 'VibeoToken.sol', 'VIBEXToken.sol', 'VICOXToken.sol', 'VictorToken.sol', 'VictorTokenSale.sol', 'VikkyTokenAirdrop.sol', 'VIT.sol', 'ViteCoinCrowdsale.sol', 'ViteCoinICO.sol', 'VoidToken.sol', 'VosaiInvitationToken.sol', 'VreoTokenBounty.sol', 'VRHToken.sol', 'VUToken.sol', 'W12Crowdsale.sol', 'W12Token.sol', 'WallCryptoStreet.sol', 'WandCrowdsale.sol', 'WBIToken.sol', 'WbkChainToken.sol', 'Weaver.sol', 'WeBuildWorld.sol', 'WeightedTokenDistributor.sol', 'WeiToken.sol', 'WeSingCoin223Token_11.sol', 'WhiteBullsToken.sol', 'Who.sol', 'Win20ETH.sol', 'WinancesToken.sol', 'WitnessJury.sol', 'WorkcoinCrowdsale.sol', 'WorldCupTeam.sol', 'WorldCupToken.sol', 'WorldCupWinner.sol', 'WuKongChain.sol', 'XenBounty.sol', 'XhawkCoin.sol', 'XmasCoinCrowdsale.sol', 'XMB.sol', 'XMIAsset.sol', 'XPZ.sol', 'ygo.sol', 'YoloTokenPresale.sol', 'YoloTokenPresaleRound2.sol', 'YoobaBatchTransfer.sol', 'YoobaICO.sol', 'YRECoin.sol', 'YunToken.sol', 'YYBToken.sol', 'ZenswapDistribution.sol', 'ZenswapDistributionTest.sol', 'ZethrBankroll.sol', 'Zigit.sol', 'ZipToken.sol', 'ZodiaqDistribution.sol', 'ZZZToken.sol']
2018-11-1006:40:50 PM - INFO - create directory ./tempFaultSol/UexpectedEther
2018-11-1006:40:50 PM - INFO - detectAllUexpectedEther begin ......======================================
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	require( address(this).balance >= _amount )
2018-11-1006:40:50 PM - INFO - A2ACrowdsalePartner.sol
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	if(tokensSold &gt;= minCap &amp;&amp; this.balance &gt; 0)
2018-11-1006:40:50 PM - INFO - AALMCrowdsale.sol
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	assert(address(this).balance >= payment)
2018-11-1006:40:50 PM - INFO - ABCTokenCrowdsale.sol
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:50 PM - INFO - ABLGenesisToken.sol
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	require(address(this).balance >= safeMul(amount ,sellPrice)
2018-11-1006:40:50 PM - INFO - Abloxx.sol
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	require(address(this).balance <= maxBalance, "the contract eth balance limit")
2018-11-1006:40:50 PM - INFO - Accessibility.sol
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	require(address(this).balance >= val)
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	require(address(this).balance >= val)
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	require(address(this).balance >= val)
2018-11-1006:40:50 PM - INFO - AccEthRegCenter.sol
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	require(address(this).balance >= weiAmount)
2018-11-1006:40:50 PM - INFO - Adamcoins.sol
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	assert(address(this).balance &gt;= payment)
2018-11-1006:40:50 PM - INFO - Ads.sol
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	assert(saleValue <= this.balance)
2018-11-1006:40:50 PM - INFO - AdsharesToken.sol
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:50 PM - INFO - AdsVenture.sol
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:50 PM - INFO - AdvancedToken365.sol
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:50 PM - INFO - AdvancedTokenEIC.sol
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:50 PM - INFO - AdvancedTokenGTH.sol
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:50 PM - INFO - AdvancedTokenIPFS.sol
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:50 PM - INFO - AdvancedTokenRedPacket.sol
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	require(state == State.Active && address(this).balance >= softcap)
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	require(address(this).balance < softcap && state == State.Active  && now > end)
2018-11-1006:40:50 PM - INFO - AgroTechFarmCrowdsale.sol
2018-11-1006:40:50 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:50 PM - INFO - AIChain.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(address(this).balance >= _value)
2018-11-1006:40:51 PM - INFO - AKCCrowdsale.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(_amount <= address(this).balance, "Not enough balance!")
2018-11-1006:40:51 PM - INFO - Aligato.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	if(value == 0 || this.balance < value || to == 0x0)
2018-11-1006:40:51 PM - INFO - AlphaMarketCoinExchanger.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	if(value == 0 || this.balance < value || to == 0x0)
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(investment > 0 && this.balance >= investment)
2018-11-1006:40:51 PM - INFO - AlphaMarketICO.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(this.balance >= _amount)
2018-11-1006:40:51 PM - INFO - AlsIco.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(address(this).balance == 0)
2018-11-1006:40:51 PM - INFO - AltCrowdsalePhaseOne.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	assert(address(this).balance >= payout_)
2018-11-1006:40:51 PM - INFO - Amber.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(address(this).balance > ether_amount)
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(address(this).balance >= wei_value)
2018-11-1006:40:51 PM - INFO - AMBTICO.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:51 PM - INFO - AMToken.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(address(this).balance >= safeMul(amount ,sellPrice)
2018-11-1006:40:51 PM - INFO - AndreisToken.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(this.balance + msg.value <= hardcap)
2018-11-1006:40:51 PM - INFO - ANTA.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(amount &lt;= this.balance)
2018-11-1006:40:51 PM - INFO - APICalls.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:51 PM - INFO - APP.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:51 PM - INFO - APSP.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:51 PM - INFO - ARChain.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:51 PM - INFO - archercoin.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:40:51 PM - INFO - ARIToken.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	assert(crowdsale.balance + this.balance >= amount)
2018-11-1006:40:51 PM - INFO - ArnaCrowdsale.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(this.balance < softcap && now > start + period * 1 days)
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	if(this.balance > softcap)
2018-11-1006:40:51 PM - INFO - Articoin.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(price &lt;= address(this).balance)
2018-11-1006:40:51 PM - INFO - ArtMuseumV1.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(price &lt;= address(this).balance)
2018-11-1006:40:51 PM - INFO - ArtMuseumV2.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(this.balance >= revenue)
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:40:51 PM - INFO - ArtyCoin.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:51 PM - INFO - Askcoin.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	assert(address(this).balance >= payment)
2018-11-1006:40:51 PM - INFO - AtisiosICO.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(this.balance==0)
2018-11-1006:40:51 PM - INFO - AtlantBuyer.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:40:51 PM - INFO - ATP.sol
2018-11-1006:40:51 PM - INFO - Code here may be Error:
	require(this.balance >= _value)
2018-11-1006:40:51 PM - INFO - Auction.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:40:52 PM - INFO - AutoCoinToken.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:40:52 PM - INFO - AversafeSeedCrowdsale.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	assert(address(this).balance >= amount)
2018-11-1006:40:52 PM - INFO - AXPRV.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(address(this).balance >= change)
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(address(this).balance >= change)
2018-11-1006:40:52 PM - INFO - A_NEXT_LEVEL.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(address(this).balance >= change)
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(address(this).balance >= change)
2018-11-1006:40:52 PM - INFO - A_TAXPHONE.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(_value &gt; 0 &amp;&amp; address(this).balance &gt;= _value)
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(address(this).balance &gt;= payment)
2018-11-1006:40:52 PM - INFO - BablosCrowdsaleWallet.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(msg.value > 0 &&
            msg.value + this.balance < MAXETHER &&
            acceptingPayments)
2018-11-1006:40:52 PM - INFO - BaktFactory.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance >= _amount)
2018-11-1006:40:52 PM - INFO - BallerToken.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance>=amount)
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance>=request_amount)
2018-11-1006:40:52 PM - INFO - BankCore.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance == 0)
2018-11-1006:40:52 PM - INFO - BankDeposit.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:40:52 PM - INFO - BankeraToken.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance <= hardcap)
2018-11-1006:40:52 PM - INFO - bar.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance >= amtEth && balances[this] >= amtToken )
2018-11-1006:40:52 PM - INFO - Bassdrops.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(total &lt;= this.balance)
2018-11-1006:40:52 PM - INFO - BatchTransferContract.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance<=fundingMax)
2018-11-1006:40:52 PM - INFO - BattleDromeICO.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require((this.balance >= amount)
2018-11-1006:40:52 PM - INFO - BazistaICO.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(checkedEth <= this.balance)
2018-11-1006:40:52 PM - INFO - BBDExchange.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:52 PM - INFO - BCaaS.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance >= softCap)
2018-11-1006:40:52 PM - INFO - BCDToken.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(prizePool >= this.balance)
2018-11-1006:40:52 PM - INFO - BCFLeague.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:52 PM - INFO - BCTToken.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(address(this).balance >= _commission)
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(address(this).balance >= balance)
2018-11-1006:40:52 PM - INFO - BeggarBetting.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:52 PM - INFO - BelarusCoin.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	if(this.balance == 0)
2018-11-1006:40:52 PM - INFO - BetContract.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(address(this).balance &gt;= _amount)
2018-11-1006:40:52 PM - INFO - BetexICO.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance &gt;= _amount)
2018-11-1006:40:52 PM - INFO - BetexSAFT.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount * sellPrice)
2018-11-1006:40:52 PM - INFO - BetterThanAdrien.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(house_fee < address(this).balance)
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(address(this).balance >= transfer_amount)
2018-11-1006:40:52 PM - INFO - Betting.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(house_fee < address(this).balance)
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(address(this).balance >= transfer_amount)
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(_amount <= address(this).balance)
2018-11-1006:40:52 PM - INFO - BettingController.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:52 PM - INFO - BeyondCashToken.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance >= revenue)
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance > sellPrice)
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	if(tokenBalanceOf[msg.sender] * sellPrice <= this.balance)
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance >= revenue)
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(this.balance <= revenue)
2018-11-1006:40:52 PM - INFO - BFreeContract.sol
2018-11-1006:40:52 PM - INFO - Code here may be Error:
	require(address(this).balance > _amountInWei)
2018-11-1006:40:52 PM - INFO - BGAudit.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require( this.balance >= withdraws)
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:40:53 PM - INFO - BidAskX.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(address(this).balance == 0)
2018-11-1006:40:53 PM - INFO - Bidding.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(address(this).balance == 0)
2018-11-1006:40:53 PM - INFO - BiddingCustom.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(address(this).balance == 0)
2018-11-1006:40:53 PM - INFO - BiddingUnique.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	if( this.balance > 0 )
2018-11-1006:40:53 PM - INFO - BigbomCrowdSale.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	if( this.balance > 0 )
2018-11-1006:40:53 PM - INFO - BigbomTokenSale.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:53 PM - INFO - BIGCAdvancedToken.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount.mul(sellPrice)
2018-11-1006:40:53 PM - INFO - BiGeCoin.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(address(this).balance >= _value)
2018-11-1006:40:53 PM - INFO - BILLCRYPT.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:40:53 PM - INFO - Biotoken.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:53 PM - INFO - BiquToken.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(this.balance >= _amount)
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(this.balance >= _amount)
2018-11-1006:40:53 PM - INFO - BitandPay.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:53 PM - INFO - BitcoinAgileToken.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(msg.sender == owner && _amount > 0 && this.balance >= _amount)
2018-11-1006:40:53 PM - INFO - BitcoinQuick.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	if(address(this).balance >= amount)
2018-11-1006:40:53 PM - INFO - BitDegreeCrowdsale.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	assert(_ethvalue <= this.balance)
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	assert(_value <= this.balance)
2018-11-1006:40:53 PM - INFO - BitGame.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:53 PM - INFO - BithToken.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:40:53 PM - INFO - BitImageTokenSale.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:53 PM - INFO - BitmaxerToken.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(this.balance > _amountInwei)
2018-11-1006:40:53 PM - INFO - BitProCoinX.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:53 PM - INFO - Bitstarti.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:53 PM - INFO - BitStore.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	assert(address(this).balance >= value)
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	assert(address(this).balance >= requiredBalance)
2018-11-1006:40:53 PM - INFO - BitWichLoom.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:53 PM - INFO - BiyuleCoin.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:40:53 PM - INFO - BlindCroupierTokenDistribution.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	if(this.balance >= minFundedValue)
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	if(this.balance >= maxFundedValue)
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	if(this.balance < value)
2018-11-1006:40:53 PM - INFO - blockcdn.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	if(gains > 0 && this.balance > payableAmount)
2018-11-1006:40:53 PM - INFO - BlockchainDeposit.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(amount <= (address(this).balance - debt)
2018-11-1006:40:53 PM - INFO - Blockgame.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	if(fee > this.balance)
2018-11-1006:40:53 PM - INFO - BlockhashFetch.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:40:53 PM - INFO - BlockMarket.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	assert(address(this).balance >= value)
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(address(this).balance >= paymentValue)
2018-11-1006:40:53 PM - INFO - BlockScheduler.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	if(this.balance >= 100 ether)
2018-11-1006:40:53 PM - INFO - BlocksquareSeedSale.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	if(address(this).balance >= 50 ether)
2018-11-1006:40:53 PM - INFO - BlocksquareSeriesA.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:53 PM - INFO - BMVCoin.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	assert(this.balance > 0)
2018-11-1006:40:53 PM - INFO - BM_ICO.sol
2018-11-1006:40:53 PM - INFO - Code here may be Error:
	require(address(this).balance >= 0 ether)
2018-11-1006:40:53 PM - INFO - BNDToken.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require((amount == 10 && this.balance >= 256 ether)
2018-11-1006:40:54 PM - INFO - BONUSROLL.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(this.balance >= amount / sellPrice)
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(rob <= this.balance)
2018-11-1006:40:54 PM - INFO - bonusToken.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:40:54 PM - INFO - BoomerCoin.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(value &gt; 0 &amp;&amp; this.balance &gt;= value)
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(this.balance &gt;= payment)
2018-11-1006:40:54 PM - INFO - BoomstarterICO.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(value &gt; 0 &amp;&amp; this.balance &gt;= value)
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(this.balance &gt;= payment)
2018-11-1006:40:54 PM - INFO - BoomstarterSale.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	if(bonusInETH && address(this).balance < winnerCount.mul(bonus)
2018-11-1006:40:54 PM - INFO - BoostoPoolFactory.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:54 PM - INFO - BpsToken.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(this.balance > claim_amount)
2018-11-1006:40:54 PM - INFO - BrandsRefundFond.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(address(this).balance >= _value)
2018-11-1006:40:54 PM - INFO - BrickblockAccount.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:40:54 PM - INFO - Bridge.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(this.balance > total)
2018-11-1006:40:54 PM - INFO - BronzeRaffle.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:54 PM - INFO - BSCToken.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(this.balance &gt;= amount * sellPrice)
2018-11-1006:40:54 PM - INFO - BTHToken.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:54 PM - INFO - BTPCoin.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:40:54 PM - INFO - BullTokenCrowdsale.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(address(this).balance &gt;= _value)
2018-11-1006:40:54 PM - INFO - BunnyGame.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:40:54 PM - INFO - BurnupGameCore.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(address(this).balance >= payment)
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:40:54 PM - INFO - buyable.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(this.balance < eth_cap)
2018-11-1006:40:54 PM - INFO - Buyer.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(this.balance < max_raised_amount)
2018-11-1006:40:54 PM - INFO - BuyerFund.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:40:54 PM - INFO - BuyFlowingHair.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:40:54 PM - INFO - BuyFlowingHair100ETH.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:40:54 PM - INFO - BuyFlowingHair10ETH.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:40:54 PM - INFO - BuyFlowingHair1ETH.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:40:54 PM - INFO - BuyZygoma.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:54 PM - INFO - BVTCcoin.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(address(this).balance > 0)
2018-11-1006:40:54 PM - INFO - BwenCoin.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	assert(this.balance >= withdrawValue)
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	assert(this.balance < withdrawValue)
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(this.balance >= withdrawValue)
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:40:54 PM - INFO - C20.sol
2018-11-1006:40:54 PM - INFO - Code here may be Error:
	if(sumToReturn>this.balance)
2018-11-1006:40:54 PM - INFO - CABCoinICO.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(address(this).balance >= _value)
2018-11-1006:40:55 PM - INFO - CandyLandSale.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:40:55 PM - INFO - CappedVault.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:40:55 PM - INFO - Capsule.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(address(this).balance > amount * sellPrice)
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:40:55 PM - INFO - CAPTOZ.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:55 PM - INFO - CarbonExchangeCoinToken.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(_amount<= this.balance)
2018-11-1006:40:55 PM - INFO - CardsTrade.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:40:55 PM - INFO - CareerForLife.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:40:55 PM - INFO - CareerToken.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:40:55 PM - INFO - CarTaxiBonus.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	assert(_value <= this.balance)
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:40:55 PM - INFO - CarTaxiIco.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	assert(this.balance >= totalSupply()
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	assert(this.balance >= totalSupply()
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	assert(this.balance >= totalSupply()
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	assert(this.balance >= totalSupply()
2018-11-1006:40:55 PM - INFO - Cash.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(_amount <= address(this).balance - bankFund, 'cannot withdraw amount greater than (balance - bankFund)
2018-11-1006:40:55 PM - INFO - Casino.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:55 PM - INFO - CAST.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	if(funds <= this.balance)
2018-11-1006:40:55 PM - INFO - CBR.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:55 PM - INFO - CCASH.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:55 PM - INFO - CCXToken.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:55 PM - INFO - CDcurrency.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	if(this.balance > 47000000000000000000000)
2018-11-1006:40:55 PM - INFO - CentraAsiaWhiteList.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	if(address(this).balance > 0)
2018-11-1006:40:55 PM - INFO - CesaireICO.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	if(address(this).balance > 0)
2018-11-1006:40:55 PM - INFO - CesiraeICO.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount * sellPrice)
2018-11-1006:40:55 PM - INFO - ChainKey.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(address(this).balance > 0)
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	if(address(this).balance > 0.01 ether)
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(msg.value > address(this).balance - msg.value)
2018-11-1006:40:55 PM - INFO - Challenge.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:40:55 PM - INFO - CharToken.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:55 PM - INFO - CHERRY.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:55 PM - INFO - CHERRYCOIN.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:55 PM - INFO - CherryCoinFoundation.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(amount <= address(this).balance)
2018-11-1006:40:55 PM - INFO - ChibiFighters.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(_amount <= address(this).balance)
2018-11-1006:40:55 PM - INFO - ChiMarket.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(ethToGive <= address(this).balance, "Insufficient ethers.")
2018-11-1006:40:55 PM - INFO - CHIPSale.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:40:55 PM - INFO - ChronosCore.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:55 PM - INFO - CIBNLiveInteractiveToken.sol
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(this.balance <= hardcap)
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	require(this.balance < softcap && now > start && balances[msg.sender] > 0)
2018-11-1006:40:55 PM - INFO - Code here may be Error:
	if(this.balance > finCheckBalance)
2018-11-1006:40:55 PM - INFO - CIDCrowdsale.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance <= hardcap)
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance < softcap && now > start && balances[msg.sender] > 0)
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	if(this.balance > finCheckBalance)
2018-11-1006:40:56 PM - INFO - CIDToken.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance >= min_required_amount)
2018-11-1006:40:56 PM - INFO - CINDICATORFund.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:40:56 PM - INFO - Claes.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:40:56 PM - INFO - CLC.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	assert(address(this).balance >= payment)
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(address(this).balance > (_chunkLength.mul(_txFee)
2018-11-1006:40:56 PM - INFO - ClinicAllCrowdsale.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	assert(address(this).balance >= payment)
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(address(this).balance > (_chunkLength.mul(_txFee)
2018-11-1006:40:56 PM - INFO - ClinicAllRefundEscrow.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:40:56 PM - INFO - ClusterToken.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:56 PM - INFO - CM.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance < softcap && now > start + period * 1 days)
2018-11-1006:40:56 PM - INFO - CNODStandart.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance < eth_cap)
2018-11-1006:40:56 PM - INFO - CobinhoodBuyer.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(address(this).balance > amount * sellPrice)
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:40:56 PM - INFO - COBToken.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(valueAsEth <= this.balance)
2018-11-1006:40:56 PM - INFO - COE.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(state == State.Completed || (state == State.Active && this.balance >= goal)
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance < goal)
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(state == State.Completed || (state == State.Active && this.balance >= goal)
2018-11-1006:40:56 PM - INFO - CoinAdvisorCrowdSale.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(state == State.Completed || (state == State.Active && address(this).balance >= goal)
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(address(this).balance < goal)
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(state == State.Completed || (state == State.Active && address(this).balance >= goal)
2018-11-1006:40:56 PM - INFO - CoinAdvisorPreIco.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	if(address(this).balance >= POOL_AWARD)
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	if(address(this).balance == 0)
2018-11-1006:40:56 PM - INFO - coinback.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(address(this).balance > 0)
2018-11-1006:40:56 PM - INFO - CoinEt.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(address(this).balance > 0)
2018-11-1006:40:56 PM - INFO - CoinFlc.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(address(this).balance > 0)
2018-11-1006:40:56 PM - INFO - CoinGlnc.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(address(this).balance > 0)
2018-11-1006:40:56 PM - INFO - CoinHfcc.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(address(this).balance > 0)
2018-11-1006:40:56 PM - INFO - CoinHow.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(address(this).balance > 0)
2018-11-1006:40:56 PM - INFO - CoinIpr.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(address(this).balance > 0)
2018-11-1006:40:56 PM - INFO - CoinRgit.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:56 PM - INFO - CoinstocksToken.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:56 PM - INFO - ComBillAdvancedToken.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:40:56 PM - INFO - CommonToken.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:40:56 PM - INFO - CommonTokensale.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:40:56 PM - INFO - CommonWhitelist.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	if(this.balance < maxReserve)
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	if(einsatz * winFaktor > this.balance)
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	if(this.balance < minReserve)
2018-11-1006:40:56 PM - INFO - Company.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:40:56 PM - INFO - ComplexChildToken.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice / 10000)
2018-11-1006:40:56 PM - INFO - CONEGTY.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	if(this.balance>10000)
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	if(this.balance>luckyVoters.length)
2018-11-1006:40:56 PM - INFO - Contest.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance >= min_amount)
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(max_amount == 0 || this.balance <= max_amount)
2018-11-1006:40:56 PM - INFO - Contract.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:40:56 PM - INFO - ContractFactory.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance >= _amount)
2018-11-1006:40:56 PM - INFO - ContractStakeToken.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:56 PM - INFO - ContribToken.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(amount <= address(this).balance)
2018-11-1006:40:56 PM - INFO - CoolTourToken.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:40:56 PM - INFO - CoreContract.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance &gt;= amount * sellPrice)
2018-11-1006:40:56 PM - INFO - Cornerstone.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:40:56 PM - INFO - CorsariumCore.sol
2018-11-1006:40:56 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:56 PM - INFO - COSMOTokenERC20.sol
2018-11-1006:40:57 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:57 PM - INFO - Couchain.sol
2018-11-1006:40:57 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:40:57 PM - INFO - Code here may be Error:
	require(this.balance >= _amount)
2018-11-1006:40:57 PM - INFO - CPAYToken.sol
2018-11-1006:40:57 PM - INFO - Code here may be Error:
	require(this.balance == 0)
2018-11-1006:40:57 PM - INFO - CraigHester.sol
2018-11-1006:40:57 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:57 PM - INFO - CranooAdvanced.sol
2018-11-1006:40:57 PM - INFO - Code here may be Error:
	require(this.balance >= amount / sellPrice)
2018-11-1006:40:57 PM - INFO - CreateCodeToken.sol
2018-11-1006:40:57 PM - INFO - Code here may be Error:
	require(_value <= address(this).balance)
2018-11-1006:40:57 PM - INFO - CrowdSaleDapCar.sol
2018-11-1006:40:57 PM - INFO - Code here may be Error:
	require(this.balance >= amount )
2018-11-1006:40:57 PM - INFO - Code here may be Error:
	require(this.balance >= withdrawAmount )
2018-11-1006:40:57 PM - INFO - CrowdSaleMacroansyA.sol
2018-11-1006:40:57 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:40:57 PM - INFO - CrowdsaleMain.sol
2018-11-1006:40:57 PM - INFO - Code here may be Error:
	require((this.balance < softcap)
2018-11-1006:40:57 PM - INFO - Code here may be Error:
	require(this.balance >= softcap)
2018-11-1006:40:57 PM - INFO - Code here may be Error:
	require(this.balance >= softcap)
2018-11-1006:40:57 PM - INFO - CrowdsalePre.sol
2018-11-1006:40:57 PM - INFO - Code here may be Error:
	require(this.balance <= 62500 * ( 10 ** 18 )
2018-11-1006:40:57 PM - INFO - CrowdSales.sol
2018-11-1006:40:57 PM - INFO - Code here may be Error:
	require(this.balance >= payoutAmount)
2018-11-1006:40:57 PM - INFO - CrowdWallet.sol
2018-11-1006:40:57 PM - INFO - Code here may be Error:
	require(this.balance <= weiICOMaximum)
2018-11-1006:40:57 PM - INFO - CrwdToken.sol
2018-11-1006:40:57 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:40:57 PM - INFO - Code here may be Error:
	require(this.balance >= _amount)
2018-11-1006:40:57 PM - INFO - CrypotaTestToken.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:40:58 PM - INFO - CryptoAdrian.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(_amount > 0 && _amount <= address(this).balance)
2018-11-1006:40:58 PM - INFO - CryptoArteSales.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:40:58 PM - INFO - CryptoArtsToken.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(this.balance > _amount)
2018-11-1006:40:58 PM - INFO - CryptoBetOn.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(this.balance >= amount.mul(sellPrice)
2018-11-1006:40:58 PM - INFO - CRYPTOBITECOIN.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(address(this).balance >= payment)
2018-11-1006:40:58 PM - INFO - CryptoBossWannaCry.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	if(address(this).balance >= donationEth)
2018-11-1006:40:58 PM - INFO - CryptoCrystal.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(availableForWithdraw[msg.sender] &lt;= this.balance)
2018-11-1006:40:58 PM - INFO - CryptoDays.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	assert(address(this).balance >= userBalance)
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	assert(address(this).balance >= userBalance)
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	assert(address(this).balance >= userBalance)
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	assert(address(this).balance >= userBalance)
2018-11-1006:40:58 PM - INFO - CryptoDivert.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:40:58 PM - INFO - CryptoDoggies.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(address(this).balance >= payment)
2018-11-1006:40:58 PM - INFO - CryptoEngineer.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(this.balance >= _amount)
2018-11-1006:40:58 PM - INFO - Cryptogs.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:40:58 PM - INFO - CryptoJingles.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:40:58 PM - INFO - CryptoKittenToken.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:58 PM - INFO - CryptoLeu.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(address(this).balance>=amount && amount > 0)
2018-11-1006:40:58 PM - INFO - Cryptoloans.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(this.balance >= _amount)
2018-11-1006:40:58 PM - INFO - CryptoMarketShortCoin.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:40:58 PM - INFO - CryptoMastersToken.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(address(this).balance >= payment)
2018-11-1006:40:58 PM - INFO - CryptoMiningWar.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:58 PM - INFO - CryptonitexCoin.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:40:58 PM - INFO - CryptoNumismat.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:58 PM - INFO - CryptosisToken.sol
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:40:58 PM - INFO - Code here may be Error:
	require(this.balance >= _amount)
2018-11-1006:40:58 PM - INFO - CryptoTestToken.sol
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	require(address(this).balance > 0)
2018-11-1006:40:59 PM - INFO - CryptoTrader.sol
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	require(this.balance > _amountInwei)
2018-11-1006:40:59 PM - INFO - Cryptoya.sol
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:59 PM - INFO - CRYSTALCOIN.sol
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:59 PM - INFO - CSAToken.sol
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:59 PM - INFO - CTB.sol
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	require(this.balance >= ethAmount)
2018-11-1006:40:59 PM - INFO - CTBSale.sol
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	require(this.balance >= ethAmount)
2018-11-1006:40:59 PM - INFO - CTESale.sol
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	require(address(this).balance >= sum)
2018-11-1006:40:59 PM - INFO - CustomContract.sol
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	if(this.balance > (minFinneyToKeep*10**15)
2018-11-1006:40:59 PM - INFO - CWC_Sale.sol
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:40:59 PM - INFO - CWS.sol
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	assert(address(this).balance >= payment)
2018-11-1006:40:59 PM - INFO - CWTPTokenSale.sol
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:40:59 PM - INFO - DadaPresaleFundCollector.sol
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellTokenPerEther)
2018-11-1006:40:59 PM - INFO - DaddyToken.sol
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	if( money > address(this).balance )
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	if( amountApplied > address(this).balance || time.length == step+1)
2018-11-1006:40:59 PM - INFO - DaicoCoinCrowd.sol
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice / 10000)
2018-11-1006:40:59 PM - INFO - DAILYC.sol
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	require(_amountWei &lt;= address(this).balance)
2018-11-1006:40:59 PM - INFO - DailyRewards.sol
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	require(_value <= address(this).balance)
2018-11-1006:40:59 PM - INFO - DapCarToken.sol
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:40:59 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:40:59 PM - INFO - DataFundSeedCrowdsale.sol
2018-11-1006:41:00 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:00 PM - INFO - DataShieldCoin.sol
2018-11-1006:41:00 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:00 PM - INFO - DCCAdvancedToken.sol
2018-11-1006:41:00 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:00 PM - INFO - DCoin.sol
2018-11-1006:41:00 PM - INFO - Code here may be Error:
	require(this.balance >= drpCrowdsaleRecordedBalance)
2018-11-1006:41:00 PM - INFO - Code here may be Error:
	assert(this.balance == 0)
2018-11-1006:41:00 PM - INFO - DcorpProxy.sol
2018-11-1006:41:00 PM - INFO - Code here may be Error:
	require(this.balance >= _value * price)
2018-11-1006:41:00 PM - INFO - DeCenterToken.sol
2018-11-1006:41:00 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount * sellPrice)
2018-11-1006:41:00 PM - INFO - DECToken.sol
2018-11-1006:41:00 PM - INFO - Code here may be Error:
	require(this.balance == 0)
2018-11-1006:41:00 PM - INFO - depositofferToken.sol
2018-11-1006:41:00 PM - INFO - Code here may be Error:
	if(this.balance==0)
2018-11-1006:41:00 PM - INFO - deposittest.sol
2018-11-1006:41:00 PM - INFO - Code here may be Error:
	require(amt <= address(this).balance)
2018-11-1006:41:00 PM - INFO - DeSocializedMain.sol
2018-11-1006:41:00 PM - INFO - Code here may be Error:
	require(value < this.balance)
2018-11-1006:41:00 PM - INFO - DET.sol
2018-11-1006:41:00 PM - INFO - Code here may be Error:
	require(this.balance > min_amount)
2018-11-1006:41:00 PM - INFO - Code here may be Error:
	require(this.balance <= max_amount)
2018-11-1006:41:00 PM - INFO - DeveryFUND.sol
2018-11-1006:41:00 PM - INFO - Code here may be Error:
	if(owners[msg.sender]>0 && amount+pendingAmount<=this.balance)
2018-11-1006:41:00 PM - INFO - Code here may be Error:
	if(owners[msg.sender]>0 && amount+pendingAmount<=this.balance)
2018-11-1006:41:00 PM - INFO - DevTeamContract.sol
2018-11-1006:41:00 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:00 PM - INFO - DeWeiSecurityServiceToken.sol
2018-11-1006:41:00 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:00 PM - INFO - Dextera.sol
2018-11-1006:41:00 PM - INFO - Code here may be Error:
	if(this.balance > amountToWithdraw)
2018-11-1006:41:00 PM - INFO - DFS.sol
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	require(this.balance > _amount)
2018-11-1006:41:01 PM - INFO - DGTX.sol
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount * sellPrice)
2018-11-1006:41:01 PM - INFO - DhaCoin.sol
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	require(this.balance >= msg.value*2)
2018-11-1006:41:01 PM - INFO - Dice1.sol
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	require(address(this).balance >= bank)
2018-11-1006:41:01 PM - INFO - DiceForSlice.sol
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	require(maxPendingPayouts < address(this).balance, "insufficient contract balance for payout.")
2018-11-1006:41:01 PM - INFO - DiceGame.sol
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	if(this.balance == 0)
2018-11-1006:41:01 PM - INFO - DickMeasurementContest.sol
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	if(this.balance > 1000000000000000000)
2018-11-1006:41:01 PM - INFO - DinarETHCrypto.sol
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:01 PM - INFO - DinsteinCoin.sol
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	require(address(this).balance >= _value)
2018-11-1006:41:01 PM - INFO - DistributionTokens.sol
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	require(this.balance >= ((minBalanceForAccounts - _to.balance)
2018-11-1006:41:01 PM - INFO - DITECHCOIN.sol
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	require(_value <= this.balance)
2018-11-1006:41:01 PM - INFO - DIVXToken.sol
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:01 PM - INFO - DMPToken.sol
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	if(icoCollected &gt;= icoGoal &amp;&amp; this.balance &gt; 0)
2018-11-1006:41:01 PM - INFO - DNTXCrowdsale.sol
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	require(msg.sender == ong && address(this).balance > 0 && statusDoacao == StatusDoacao.FECHADO)
2018-11-1006:41:01 PM - INFO - DoacaoEvento.sol
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	require(this.balance >= _amount * sellPrice)
2018-11-1006:41:01 PM - INFO - Doftcoin.sol
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	require(this.balance >= _amount * sellPrice)
2018-11-1006:41:01 PM - INFO - DoftToken.sol
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	require(address(this).balance &gt;= _money)
2018-11-1006:41:01 PM - INFO - DogCore.sol
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	require(reward > 0 && this.balance >= reward)
2018-11-1006:41:01 PM - INFO - DogRace.sol
2018-11-1006:41:01 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:01 PM - INFO - DonationSplitter.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(amount < this.balance)
2018-11-1006:41:02 PM - INFO - DoubleETH.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:02 PM - INFO - DPPCrowdsale.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:02 PM - INFO - DragonTreasureToken.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance - owner_balance >= 900 finney)
2018-11-1006:41:02 PM - INFO - Draw.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance > 0 )
2018-11-1006:41:02 PM - INFO - DRCCrowSale.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(address(this).balance >= change)
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(address(this).balance >= change)
2018-11-1006:41:02 PM - INFO - DRIVER.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(address(this).balance >= change)
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(address(this).balance >= change)
2018-11-1006:41:02 PM - INFO - DRIVER_ETHEREUM.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	if( this.balance < a.value )
2018-11-1006:41:02 PM - INFO - DSEasyMultisig.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(localAmount <= address(this).balance)
2018-11-1006:41:02 PM - INFO - DualSig.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:02 PM - INFO - DungeonCoreAlpha.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:02 PM - INFO - DungeonCoreAlpha2.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:02 PM - INFO - DungeonCoreBeta.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance == totalSupply)
2018-11-1006:41:02 PM - INFO - Duplicator.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(address(this).balance >= value)
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(address(this).balance >= _value)
2018-11-1006:41:02 PM - INFO - Dust.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:02 PM - INFO - DVChain.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:02 PM - INFO - DYC.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(address(this).balance >= CLAIM_AMOUNT_ETH)
2018-11-1006:41:02 PM - INFO - e2pAirEscrow.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(address(this).balance <= maxBalance, "the contract eth balance limit")
2018-11-1006:41:02 PM - INFO - EarnEveryDay_255.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(address(this).balance <= maxBalance, "the contract eth balance limit")
2018-11-1006:41:02 PM - INFO - EarnEveryDay_v1_355.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:02 PM - INFO - Eastcoin.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:02 PM - INFO - Easticoin.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= amount.mul(sellPrice)
2018-11-1006:41:02 PM - INFO - EASYLIFE.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(address(this).balance > success,"It is too early.")
2018-11-1006:41:02 PM - INFO - EasyStockExchange.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:02 PM - INFO - EBanker.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:02 PM - INFO - EBankerICO.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:02 PM - INFO - ECORP.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:02 PM - INFO - ECT2Crowdsale.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:02 PM - INFO - ECT2Crowdsale2.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:02 PM - INFO - EDCoreVersion1.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:02 PM - INFO - eddToken.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	assert(this.balance >= liquidationValue)
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	assert(this.balance < liquidationValue)
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= liquidationValue)
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:02 PM - INFO - EDEX.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:41:02 PM - INFO - EDT.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	assert(startingInvariant == this.balance.add(getWeiCollected()
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:02 PM - INFO - EESTSale.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	assert(startingInvariant == this.balance.add(getWeiCollected()
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:02 PM - INFO - EESTSale1.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	assert(startingInvariant == this.balance.add(getWeiCollected()
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:02 PM - INFO - EESTSale2.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	assert(startingInvariant == this.balance.add(getWeiCollected()
2018-11-1006:41:02 PM - INFO - EESTSale3.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	assert(startingInvariant == this.balance.add(getWeiCollected()
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:02 PM - INFO - EESTSale4.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	assert(startingInvariant == this.balance.add(getWeiCollected()
2018-11-1006:41:02 PM - INFO - EESTSale5.sol
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	assert(startingInvariant == this.balance.add(getWeiCollected()
2018-11-1006:41:02 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:02 PM - INFO - EESTSale6.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:41:03 PM - INFO - EKTSale.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	if( this.balance > 0 )
2018-11-1006:41:03 PM - INFO - ElecSaleSmartContract.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(address(this).balance != 0)
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(address(this).balance != 0)
2018-11-1006:41:03 PM - INFO - EligmaCrowdsaleContract.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:03 PM - INFO - EligmaMintingContract.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(now>roundEnd[3] && this.balance>softcap)
2018-11-1006:41:03 PM - INFO - ELOVEToken.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(address(this).balance >= amtEth && balances[this] >= amtToken )
2018-11-1006:41:03 PM - INFO - EMPR.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(this.balance >= _amount)
2018-11-1006:41:03 PM - INFO - EncryptedToken.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(this.balance==0)
2018-11-1006:41:03 PM - INFO - ENJ.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(this.balance < eth_cap)
2018-11-1006:41:03 PM - INFO - EnjinBuyer.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(_amount <= address(this).balance)
2018-11-1006:41:03 PM - INFO - ENTROPIUM.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:03 PM - INFO - ENTXSeedCrowdsale.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:03 PM - INFO - EpicPack.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:03 PM - INFO - EpicPackFour.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:03 PM - INFO - EpicPackThree.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:03 PM - INFO - EpicPackTwo.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:03 PM - INFO - EpiphanyCoin.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(address(this).balance >= safeMul(amount ,sellPrice)
2018-11-1006:41:03 PM - INFO - EPSBets.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(address(this).balance >= safeMul(amount ,sellPrice)
2018-11-1006:41:03 PM - INFO - EpsBonus.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(address(this).balance >= _value)
2018-11-1006:41:03 PM - INFO - EPVToken.sol
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(address(this).balance >= toBeTransferred, 'Contract has insufficient balance.')
2018-11-1006:41:03 PM - INFO - Code here may be Error:
	require(address(this).balance >= _amount, 'Unable to withdraw specified amount.')
2018-11-1006:41:03 PM - INFO - ERC20Extended.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	if(payment > this.balance)
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	if(_payment > this.balance)
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	if(feeFunds > this.balance)
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	if(payment > this.balance)
2018-11-1006:41:04 PM - INFO - EscrowGoods.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:04 PM - INFO - Essence.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:04 PM - INFO - ESTSToken.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(_value <= address(this).balance)
2018-11-1006:41:04 PM - INFO - EterArt.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:04 PM - INFO - ETH10K.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(address(this).balance > 0)
2018-11-1006:41:04 PM - INFO - Etharea.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(withdrawAmount <= address(this).balance, "Increase amount larger than balance.")
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(inviters[_inviter] <= address(this).balance)
2018-11-1006:41:04 PM - INFO - EthBox.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance &gt;= amt)
2018-11-1006:41:04 PM - INFO - Etheraffle.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(now > tier3End && this.balance > 0)
2018-11-1006:41:04 PM - INFO - EtheraffleICO.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(amount<=this.balance)
2018-11-1006:41:04 PM - INFO - EtherAthlete.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance &gt;= amount)
2018-11-1006:41:04 PM - INFO - EtherCityToken.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance >= value)
2018-11-1006:41:04 PM - INFO - EtherealCharity.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance >= value)
2018-11-1006:41:04 PM - INFO - EtherealTipJar.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance &gt;= amount * sellPrice)
2018-11-1006:41:04 PM - INFO - EtheremonToken.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:04 PM - INFO - Etherep.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	if(this.balance < tempWithdraw)
2018-11-1006:41:04 PM - INFO - EthereuMMM.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	if(address(this).balance < 5 ether && _airdrop_status == true)
2018-11-1006:41:04 PM - INFO - EthereumRisen.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	if(msg.value > (this.balance/4)
2018-11-1006:41:04 PM - INFO - Ethereum_doubler.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	assert(earnings[msg.sender] <= this.balance)
2018-11-1006:41:04 PM - INFO - EtherHell.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	assert(earnings[msg.sender] <= this.balance)
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	assert(_amount <= this.balance)
2018-11-1006:41:04 PM - INFO - EtherHellDeluxe.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	assert(earnings[msg.sender] <= this.balance)
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	assert(_amount <= this.balance)
2018-11-1006:41:04 PM - INFO - EtherHellFaucet.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	assert(earnings[msg.sender] <= this.balance)
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	assert(_amount <= this.balance)
2018-11-1006:41:04 PM - INFO - EtherHellHydrant.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(address(this).balance >= remain, 'contract balance is too small')
2018-11-1006:41:04 PM - INFO - Etherhero.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	if(amount < this.balance-totalBalances)
2018-11-1006:41:04 PM - INFO - Etherization.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	if(amount < this.balance-totalBalances)
2018-11-1006:41:04 PM - INFO - EtherizationUtils.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	if(amount < this.balance-totalBalances)
2018-11-1006:41:04 PM - INFO - EtherizationUtils2.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	assert(earnings[msg.sender] <= this.balance)
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	assert(_amount <= this.balance)
2018-11-1006:41:04 PM - INFO - EtherJackpot.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	if(reward > this.balance)
2018-11-1006:41:04 PM - INFO - etherKing.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:04 PM - INFO - EthernetCash.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(address(this).balance >= proceeds)
2018-11-1006:41:04 PM - INFO - EtherNomin.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:04 PM - INFO - EtherOlympics.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	if(address(this).balance < min_value)
2018-11-1006:41:04 PM - INFO - EtheroStabilizationFund.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:04 PM - INFO - EtherPizza.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance >= _amount)
2018-11-1006:41:04 PM - INFO - EtherRacing.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance >= _amount)
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance >= _amount)
2018-11-1006:41:04 PM - INFO - EtherRacingCore.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(address(this).balance >= balances[msg.sender])
2018-11-1006:41:04 PM - INFO - EtherSpaceCore.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance &gt;= _amount)
2018-11-1006:41:04 PM - INFO - EtherSportCrowdsale.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	if(this.balance > 0 && Owner.send(this.balance)
2018-11-1006:41:04 PM - INFO - EtherTransfer.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:04 PM - INFO - EtherTransferTo.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance >= DepositItems[adr].depositValue)
2018-11-1006:41:04 PM - INFO - ethKeepHand.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	assert(players[msg.sender].winnings <= this.balance)
2018-11-1006:41:04 PM - INFO - EthKing.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:04 PM - INFO - EthLendToken.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance == msg.value)
2018-11-1006:41:04 PM - INFO - EthMatch.sol
2018-11-1006:41:04 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:04 PM - INFO - Ethmoji.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:05 PM - INFO - EthsMePresale.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	if(this.balance >= oraclizeAllowance)
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	if(this.balance > oraclizeAllowance)
2018-11-1006:41:05 PM - INFO - EthsqrCore.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(_amount <= address(this).balance)
2018-11-1006:41:05 PM - INFO - EthTweetMe.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(this.balance == 0)
2018-11-1006:41:05 PM - INFO - EthVault.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(address(this).balance&gt;=listedEtherMonster[monsterId].balance)
2018-11-1006:41:05 PM - INFO - EthWuxia.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:05 PM - INFO - EvaCoin.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:05 PM - INFO - EvaCoinPreSale.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	assert(address(this).balance >= payment)
2018-11-1006:41:05 PM - INFO - EventaCrowdsale.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(_amount <= (this.balance)
2018-11-1006:41:05 PM - INFO - ExchangeManager.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(_value <= address(this).balance)
2018-11-1006:41:05 PM - INFO - ExeniumToken.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:05 PM - INFO - ExoplanetToken.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(_value <= this.balance)
2018-11-1006:41:05 PM - INFO - ExoTownIco.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(_value <= this.balance)
2018-11-1006:41:05 PM - INFO - ExoTownToken.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(this.balance >= amount / sellPrice)
2018-11-1006:41:05 PM - INFO - ExpToken.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	assert(earnings[msg.sender] <= this.balance)
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	assert(_amount <= this.balance)
2018-11-1006:41:05 PM - INFO - F2D.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(address(this).balance >= payment)
2018-11-1006:41:05 PM - INFO - FactbarDeed.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(address(this).balance <= totalPoolCap, "Deposit will put pool over limit. Reverting.")
2018-11-1006:41:05 PM - INFO - FacultyPool.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	if(_owing<=this.balance)
2018-11-1006:41:05 PM - INFO - FairDinkums.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(address(this).balance > 0 && msg.sender == creator)
2018-11-1006:41:05 PM - INFO - FangTangCoin.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:05 PM - INFO - FansChainToken.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(increaseAmount <= address(this).balance, "Increase amount larger than balance.")
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(jackpotSize + lockedInBets + increaseAmount <= address(this).balance, "Not enough funds.")
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(withdrawAmount <= address(this).balance, "Increase amount larger than balance.")
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(jackpotSize + lockedInBets + withdrawAmount <= address(this).balance, "Not enough funds.")
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(jackpotSize + lockedInBets <= address(this).balance, "Cannot afford to lose this bet.")
2018-11-1006:41:05 PM - INFO - FckDice.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(amount <= address(this).balance)
2018-11-1006:41:05 PM - INFO - FDataToken.sol
2018-11-1006:41:05 PM - INFO - Code here may be Error:
	require(this.balance >= _amount)
2018-11-1006:41:05 PM - INFO - Feed.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:41:06 PM - INFO - FHFTokenCrowdsale.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:06 PM - INFO - FILM.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(address(this).balance == 0)
2018-11-1006:41:06 PM - INFO - FinancialStrategy.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:06 PM - INFO - FirstCryptoBank.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(this.balance > moneyWorth)
2018-11-1006:41:06 PM - INFO - Fish.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(amount <= address(this).balance)
2018-11-1006:41:06 PM - INFO - Flame.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:06 PM - INFO - Flow.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	if(block.number <= endAtBlock || etherCollected >= softCap || this.balance == 0)
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	assert(block.number > endAtBlock && etherCollected < softCap && this.balance > 0)
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:06 PM - INFO - FluencePreSale.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(this.balance &gt;= amount * sellPrice)
2018-11-1006:41:06 PM - INFO - FNKToken.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(msg.value >= minValue && doubleValue <= address(this).balance)
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(value > 0 && value < address(this).balance)
2018-11-1006:41:06 PM - INFO - Fog.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	assert(earnings[msg.sender] <= this.balance)
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	assert(_amount <= this.balance)
2018-11-1006:41:06 PM - INFO - Fomo2D.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	assert(earnings[msg.sender] <= this.balance)
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	assert(_amount <= this.balance)
2018-11-1006:41:06 PM - INFO - FOMO3DLite.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	if(_value>this.balance)
2018-11-1006:41:06 PM - INFO - Fomo5d.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(address(this).balance >= payment)
2018-11-1006:41:06 PM - INFO - FootballPlayerOwnership.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(address(this).balance > amount * 1 ether)
2018-11-1006:41:06 PM - INFO - ForeverChain.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:06 PM - INFO - ForeverCoin.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:06 PM - INFO - FornicoinPresale.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:06 PM - INFO - fortunecoin.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(amount > 0 && amount <= address(this).balance, "Insufficient amount.")
2018-11-1006:41:06 PM - INFO - Foundation.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(amount <= address(this).balance)
2018-11-1006:41:06 PM - INFO - Founders.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	if(this.balance>0)
2018-11-1006:41:06 PM - INFO - FoundersVesting.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(this.balance >= requiredBalance)
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(_value <= this.balance)
2018-11-1006:41:06 PM - INFO - FourArt.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:06 PM - INFO - freedomcryptotoken.sol
2018-11-1006:41:06 PM - INFO - Code here may be Error:
	require(_weiValue <= this.balance)
2018-11-1006:41:06 PM - INFO - FsTkCMultiSigWallet.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance >= gain)
2018-11-1006:41:07 PM - INFO - FundsKeeper.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(value &gt; 0 &amp;&amp; this.balance &gt;= value)
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance &gt;= payment)
2018-11-1006:41:07 PM - INFO - FundsRegistry.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:07 PM - INFO - FutouristCrowdsale.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance == 0)
2018-11-1006:41:07 PM - INFO - FutureDeposit.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:07 PM - INFO - GalacticX.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(amount <= address(this).balance)
2018-11-1006:41:07 PM - INFO - GameGoldToken.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(address(this).balance >= value, " contract balance isn't enough ")
2018-11-1006:41:07 PM - INFO - GameLogic.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance >= _value)
2018-11-1006:41:07 PM - INFO - GameOne.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:07 PM - INFO - GamersToken.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount.mul(sellPrice)
2018-11-1006:41:07 PM - INFO - GammaToken.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:07 PM - INFO - GAP.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:07 PM - INFO - Garrys.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(amount < address(this).balance)
2018-11-1006:41:07 PM - INFO - GasFaucet.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(_this.balance >= _value)
2018-11-1006:41:07 PM - INFO - GAX.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:07 PM - INFO - GCCExchangeCore.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:07 PM - INFO - GCRTokenERC20.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount * sellPrice)
2018-11-1006:41:07 PM - INFO - GDO.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:07 PM - INFO - GdprCash.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:07 PM - INFO - GdprCrowdsale.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(address(this).balance >= weiAmount)
2018-11-1006:41:07 PM - INFO - GECOIN.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(valueAsEth <= this.balance)
2018-11-1006:41:07 PM - INFO - GEE.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	if(_value>this.balance)
2018-11-1006:41:07 PM - INFO - GEMCHAIN.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance >= commission)
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance >= commission)
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance >= commission)
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance >= amount_weis)
2018-11-1006:41:07 PM - INFO - GFCToken.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance >= amtEth && balances[this] >= amtToken )
2018-11-1006:41:07 PM - INFO - GiftzNetworkToken.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	if(this.balance==0 || msg.value > 1000000000000000000)
2018-11-1006:41:07 PM - INFO - GIFT_CARD.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:07 PM - INFO - GilgameshToken.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:07 PM - INFO - GilgameshTokenSale.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:07 PM - INFO - GirlAuction.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	if(msg.value >= this.balance && n == SecretNumber && msg.value >= 0.07 ether)
2018-11-1006:41:07 PM - INFO - Giveaway.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:07 PM - INFO - GladiEther.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:07 PM - INFO - GlobalARQ.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount * sellPrice)
2018-11-1006:41:07 PM - INFO - GlobalSuperGameToken.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:07 PM - INFO - GoGameLogic.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	if(this.balance>0)
2018-11-1006:41:07 PM - INFO - Goldmint.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	if(this.balance>0)
2018-11-1006:41:07 PM - INFO - GoldmintUnsold.sol
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:07 PM - INFO - Code here may be Error:
	require(this.balance > total)
2018-11-1006:41:07 PM - INFO - GoldRaffle.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:08 PM - INFO - GoodTimeCoin.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:08 PM - INFO - GoodTo.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(address(this).balance >= _withdrawAmount)
2018-11-1006:41:08 PM - INFO - GOOGToken.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(address(this).balance >= _withdrawAmount)
2018-11-1006:41:08 PM - INFO - GOOGTokenSale.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	assert(etherAmount <= this.balance)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	assert(balancesNum <= this.balance)
2018-11-1006:41:08 PM - INFO - GraceCoin.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(address(this).balance > amount * 1 ether)
2018-11-1006:41:08 PM - INFO - GraspSmartBlockchainLock.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:08 PM - INFO - GreenEnergyToken.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(_value < this.balance)
2018-11-1006:41:08 PM - INFO - GreensparcCrowdsale.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	assert(this.balance >= withdrawValue)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	assert(this.balance < withdrawValue)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance >= withdrawValue)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:08 PM - INFO - GRO.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	if(this.balance>0)
2018-11-1006:41:08 PM - INFO - GSI.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	if(address(this).balance < reservefund)
2018-11-1006:41:08 PM - INFO - GuessEth.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	if(msg.value >= this.balance && n == SecretNumber && msg.value >= 0.05 ether)
2018-11-1006:41:08 PM - INFO - GuessTheNumber.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance < softcap && now > endFinalStage2)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance >= softcap && now > endFinalStage2)
2018-11-1006:41:08 PM - INFO - GUT.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance + amount >= this.balance)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	if(amount > this.balance)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	if(amount > this.balance)
2018-11-1006:41:08 PM - INFO - hackethereumIco.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance >= investedAmount)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:08 PM - INFO - HandelionCrowdsale.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(address(this).balance >= proceeds)
2018-11-1006:41:08 PM - INFO - Havven.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(address(this).balance >= proceeds)
2018-11-1006:41:08 PM - INFO - HavvenEscrow.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(amount&lt;=this.balance)
2018-11-1006:41:08 PM - INFO - Hedgely.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:08 PM - INFO - HeliumNetwork.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:08 PM - INFO - HelloToken.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:08 PM - INFO - HereCoin.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance <= weiICOMaximum)
2018-11-1006:41:08 PM - INFO - HeroCoin.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	if(address(this).balance > 0)
2018-11-1006:41:08 PM - INFO - HEXCrowdSale.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:08 PM - INFO - HEY.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance >= weiAmount)
2018-11-1006:41:08 PM - INFO - HODLToken.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance >= balReleased)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance >= n)
2018-11-1006:41:08 PM - INFO - Hold.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	if(_amount >= this.balance)
2018-11-1006:41:08 PM - INFO - HONG.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance >= comision)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance >= comision)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance >= comision)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance >= amount_weis)
2018-11-1006:41:08 PM - INFO - HormitechToken.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	assert(collectedFees <= address(this).balance)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	if(balance > 0 && (address(this).balance >= balance)
2018-11-1006:41:08 PM - INFO - HorseyExchange.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	assert(collectedFees <= address(this).balance)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	if(balance > 0 && (address(this).balance >= balance)
2018-11-1006:41:08 PM - INFO - HorseyPilot.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	assert(collectedFees <= address(this).balance)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	if(balance > 0 && (address(this).balance >= balance)
2018-11-1006:41:08 PM - INFO - HorseyToken.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(amount <= address(this).balance)
2018-11-1006:41:08 PM - INFO - hotPotatoAuction.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(address(this).balance >= newRatePerHourInWei * dailyHourLimit)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(address(this).balance > earnings)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(address(this).balance - earnings >= ratePerHourInWei * (dailyHourLimit * 1 hours - workedTodayInSeconds)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(earnings <= address(this).balance)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(address(this).balance > 0)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(address(this).balance > earnings)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(address(this).balance > earnings)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(amount < address(this).balance)
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(address(this).balance - amount > earnings)
2018-11-1006:41:08 PM - INFO - HourlyPay.sol
2018-11-1006:41:08 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:08 PM - INFO - HouseCouponToken.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:09 PM - INFO - HRWtoken.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(this.balance >= amount / etherRate)
2018-11-1006:41:09 PM - INFO - Human.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:09 PM - INFO - HVB.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:09 PM - INFO - HybridHardFork.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:09 PM - INFO - IADOWR.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:09 PM - INFO - ICOBuyer.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(address(this).balance == 0)
2018-11-1006:41:09 PM - INFO - ICOPreSale.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(this.balance < eth_cap)
2018-11-1006:41:09 PM - INFO - ICOSyndicate.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(_ethers > 0 && _ethers <= address(this).balance)
2018-11-1006:41:09 PM - INFO - IDCSale.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(address(this).balance != 0)
2018-11-1006:41:09 PM - INFO - IMCToken.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:09 PM - INFO - IMMCOIN.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	assert(this.balance > 0)
2018-11-1006:41:09 PM - INFO - ImmlaIco.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	assert(this.balance > 0)
2018-11-1006:41:09 PM - INFO - ImmlaToken.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	assert(this.balance == 0)
2018-11-1006:41:09 PM - INFO - Immortals.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(address(this).balance >= amountToRefund)
2018-11-1006:41:09 PM - INFO - INCXCrowdsale.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(address(this).balance >= amountToRefund)
2018-11-1006:41:09 PM - INFO - INCXPresale.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(address(this).balance >= amountToRefund)
2018-11-1006:41:09 PM - INFO - INCXPrivateSale.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(address(this).balance >= amountToRefund)
2018-11-1006:41:09 PM - INFO - INCXSecondStrategicSale.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(address(this).balance >= amountToRefund)
2018-11-1006:41:09 PM - INFO - INCXStrategicSale.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	if(address(this).balance>=v)
2018-11-1006:41:09 PM - INFO - Infinitestars.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:09 PM - INFO - infrastructurePool.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(address(this).balance >= safeMul(amount ,sellPrice)
2018-11-1006:41:09 PM - INFO - InnovateToken.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(this.balance == 0)
2018-11-1006:41:09 PM - INFO - InsightsNetworkContributions.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:09 PM - INFO - InsurePalCrowdsale.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	if(this.balance>=value)
2018-11-1006:41:09 PM - INFO - Intermediary.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(this.balance >= amount / sellPrice)
2018-11-1006:41:09 PM - INFO - IPMCoin.sol
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(address(this).balance >= bprice)
2018-11-1006:41:09 PM - INFO - Code here may be Error:
	require(_amount <= address(this).balance)
2018-11-1006:41:09 PM - INFO - ItemSelling.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:10 PM - INFO - JackpotCore.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	assert(address(this).balance >= withdrawValue)
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	assert(address(this).balance < withdrawValue)
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(amount <= address(this).balance)
2018-11-1006:41:10 PM - INFO - JCFv2.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:10 PM - INFO - JeansToken.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:10 PM - INFO - Jingle.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount * price)
2018-11-1006:41:10 PM - INFO - JiucaiToken.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(amount <= address(this).balance)
2018-11-1006:41:10 PM - INFO - JokerToken.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:10 PM - INFO - JoyArt.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	if(address(this).balance >= TicketPool[_queryId].game_result)
2018-11-1006:41:10 PM - INFO - JungleScratch.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	if(now > endDate && address(this).balance > 0)
2018-11-1006:41:10 PM - INFO - KaasyToken.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:10 PM - INFO - KAPAYcoin.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:10 PM - INFO - KAPcoin.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	assert(address(this).balance >= payment)
2018-11-1006:41:10 PM - INFO - Karbon14Crowdsale.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(address(this).balance &lt;= hardcap)
2018-11-1006:41:10 PM - INFO - KassotToken.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:10 PM - INFO - KelvinToken.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	assert(address(this).balance >= payment)
2018-11-1006:41:10 PM - INFO - KHDonCrowdsale.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(amount <= address(this).balance)
2018-11-1006:41:10 PM - INFO - KittyKendoCore.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(msg.sender == owner && _amount > 0 && this.balance >= _amount)
2018-11-1006:41:10 PM - INFO - Kiyomi.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(this.balance >= halfTheGold)
2018-11-1006:41:10 PM - INFO - Klein.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(address(this).balance != 0)
2018-11-1006:41:10 PM - INFO - KMBToken.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:10 PM - INFO - KMCToken.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:10 PM - INFO - KpopArena.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:10 PM - INFO - KpopCeleb.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:10 PM - INFO - KpopItem.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:10 PM - INFO - KpopToken.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:10 PM - INFO - KryptoArmy.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	assert(address(this).balance == srcAmountBefore.sub(_srcAmount)
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	assert(address(this).balance == destAmountBefore.add(destAmount)
2018-11-1006:41:10 PM - INFO - KulapDex.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:10 PM - INFO - KyberHandler.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	if( this.balance < destAmount )
2018-11-1006:41:10 PM - INFO - KyberNetwork.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(amount <= address(this).balance)
2018-11-1006:41:10 PM - INFO - KyberNetworkAdapter.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	if( this.balance > 0 )
2018-11-1006:41:10 PM - INFO - KyberNetworkTokenSale.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	if( this.balance < destAmount )
2018-11-1006:41:10 PM - INFO - KyberReserve.sol
2018-11-1006:41:10 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount * sellPrice)
2018-11-1006:41:10 PM - INFO - LadaToken.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:11 PM - INFO - Lctest2.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(address(this).balance <= currentRound._hardCap)
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(amount <= address(this).balance)
2018-11-1006:41:11 PM - INFO - LDX.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:11 PM - INFO - LecBatchTransfer.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:11 PM - INFO - LegacySeedCrowdsale.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:11 PM - INFO - LegendaryPack.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:11 PM - INFO - LegendaryPackFour.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:11 PM - INFO - LegendaryPackThree.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:11 PM - INFO - LegendaryPackTwo.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:11 PM - INFO - LemoSale.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:11 PM - INFO - LexitToken.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:11 PM - INFO - LightFundsRegistry.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:11 PM - INFO - LigoToken.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:11 PM - INFO - LimeEyes.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(this.balance >= values[index])
2018-11-1006:41:11 PM - INFO - LineOfTransfers.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(this.balance >= amount / etherRate)
2018-11-1006:41:11 PM - INFO - LiquidityNetwork.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:11 PM - INFO - Listen.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(this.balance >= amountToReturn)
2018-11-1006:41:11 PM - INFO - LiveTreeCrowdsale.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:11 PM - INFO - LockedCash.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(this.balance >= value && value > 0)
2018-11-1006:41:11 PM - INFO - Locksmith.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	assert(this.balance == plannedBalance)
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	assert(this.balance == plannedBalance)
2018-11-1006:41:11 PM - INFO - Lotery.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	if(value>=(this.balance-jackpot)
2018-11-1006:41:11 PM - INFO - Lotto.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	if(address(this).balance > _todayDivided + _ttlInvtBalance && !gameCollapse)
2018-11-1006:41:11 PM - INFO - LottoPI.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	assert(this.balance &gt;= amount)
2018-11-1006:41:11 PM - INFO - LPPCappedMilestones.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(this.balance &gt;= _amount)
2018-11-1006:41:11 PM - INFO - LPVault.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:11 PM - INFO - LRCCcoin.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(address(this).balance >= reward)
2018-11-1006:41:11 PM - INFO - LuckyBaby.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:11 PM - INFO - LumenCoin.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:11 PM - INFO - LyuTestToken.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:11 PM - INFO - MaecenasCrowdsale.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(hardcap > _this.balance)
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(_this.balance < softcap && now > endIco)
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(_this.balance < softcap && now > endIco)
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(_this.balance >= softcap && now > endIco)
2018-11-1006:41:11 PM - INFO - MahalaCoin.sol
2018-11-1006:41:11 PM - INFO - Code here may be Error:
	require(_this.balance >= amount.div(sellPrice)
2018-11-1006:41:11 PM - INFO - MahalaToken.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(address(this).balance>=.1 ether)
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(address(this).balance>=.1 ether)
2018-11-1006:41:12 PM - INFO - MainHub.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:12 PM - INFO - MakeupMinter.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:12 PM - INFO - MallToken.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	if(address(this).balance > preBatchBalance)
2018-11-1006:41:12 PM - INFO - Manager.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= finishedRound.jackpot1.balance)
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= finishedRound.jackpot2.balance)
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= finishedRound.jackpot3.balance)
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= finishedRound.jackpot4.balance)
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= finishedRound.jackpot5.balance)
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= finishedRound.globalJackpot.balance)
2018-11-1006:41:12 PM - INFO - MAP.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	if(this.balance >= balWei)
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	if(this.balance >= sumWei)
2018-11-1006:41:12 PM - INFO - MaptPresale2Token.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	if(this.balance >= bal)
2018-11-1006:41:12 PM - INFO - MaptPresaleToken.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance > ethAmount)
2018-11-1006:41:12 PM - INFO - Market.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(basePrice < this.balance)
2018-11-1006:41:12 PM - INFO - MarketboardERC20Listing.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:12 PM - INFO - Marketplace.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= masternode.totalBalanceWei + tokensale.totalWeiInFallback)
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= tokensale.totalWeiInFallback)
2018-11-1006:41:12 PM - INFO - MasteriumToken.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:12 PM - INFO - MaxHouse.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:12 PM - INFO - MaxToken.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	if(this.balance >= tokenSupportSoftLimit * 4 / 10)
2018-11-1006:41:12 PM - INFO - MCTContractToken.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	if(this.balance >= tokenSupportSoftLimit * 4 / 10)
2018-11-1006:41:12 PM - INFO - MCTCrowdsale.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	assert(address(this).balance >= payment)
2018-11-1006:41:12 PM - INFO - MDAPPSale.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance == 0)
2018-11-1006:41:12 PM - INFO - mdbToken.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:12 PM - INFO - MediaCubeToken.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:12 PM - INFO - MediaSifterSeedCrowdsale.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:12 PM - INFO - MedicayunLink.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	assert(address(this).balance >= payment)
2018-11-1006:41:12 PM - INFO - MEH.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:12 PM - INFO - MehdiTAZIToken.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	if(this.balance >= amount)
2018-11-1006:41:12 PM - INFO - Merchant.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance == 0)
2018-11-1006:41:12 PM - INFO - MerchantWallet.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:12 PM - INFO - MetaGameCore.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(value &gt; 0 &amp;&amp; this.balance &gt;= value)
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance &gt;= payment)
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	assert(startingInvariant == this.balance.add(getWeiCollected()
2018-11-1006:41:12 PM - INFO - MetropolCrowdsale.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(address(this).balance >= 200 ether)
2018-11-1006:41:12 PM - INFO - MiBoodleToken.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:12 PM - INFO - MichCoin.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:12 PM - INFO - MicoinNetworkToken.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:12 PM - INFO - MicoinToken.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:12 PM - INFO - Mimicoin.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:12 PM - INFO - Mindexcoin.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(msg.value <= this.balance.sub(reserved)
2018-11-1006:41:12 PM - INFO - MinerOneCrowdsale.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(msg.value <= this.balance.sub(reserved)
2018-11-1006:41:12 PM - INFO - MinerOneToken.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	if(address(this).balance > 3 ether)
2018-11-1006:41:12 PM - INFO - miner_winner.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:12 PM - INFO - MinesFactory.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance>min4payout)
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:12 PM - INFO - MiningToken.sol
2018-11-1006:41:12 PM - INFO - Code here may be Error:
	if(this.balance>0)
2018-11-1006:41:12 PM - INFO - Minter.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:13 PM - INFO - MJCToken.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:13 PM - INFO - MKTcoin.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	if(req>=this.balance)
2018-11-1006:41:13 PM - INFO - MMMTokenCoin.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:13 PM - INFO - MMTCoinToken.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	if(this.balance>0)
2018-11-1006:41:13 PM - INFO - MNTP.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(_value <= this.balance)
2018-11-1006:41:13 PM - INFO - MNY.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance>whackingPool)
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(amount<=this.balance-whackingPool)
2018-11-1006:41:13 PM - INFO - MobSquads2.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:13 PM - INFO - ModiTokenERC20.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	if(this.balance <msg.value)
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	if(stageEnd[stageIndex]>now &&  this.balance < stageMaxEthAmount)
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	if( this.balance >=stageMaxEthAmount)
2018-11-1006:41:13 PM - INFO - MON.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance < eth_cap)
2018-11-1006:41:13 PM - INFO - MonethaBuyer.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(_amount <= address(this).balance - alfatokenFee)
2018-11-1006:41:13 PM - INFO - Moneto.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(_amount <= address(this).balance - alfatokenFee)
2018-11-1006:41:13 PM - INFO - MonetoSale.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(address(this).balance != 0)
2018-11-1006:41:13 PM - INFO - MoneyRebelCrowdsaleContract.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:13 PM - INFO - MooAdvToken.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance >= correct_amount)
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(max_amount == 0 || this.balance <= correct_amount)
2018-11-1006:41:13 PM - INFO - Moongang.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:13 PM - INFO - MowjowBounty.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance &gt;= ethAmount)
2018-11-1006:41:13 PM - INFO - msc.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance &gt;= ethAmount)
2018-11-1006:41:13 PM - INFO - MSCE.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance >= ethAmount)
2018-11-1006:41:13 PM - INFO - MSCEVote.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require( address(this).balance > amount.mul(_userCount)
2018-11-1006:41:13 PM - INFO - MultiEthSender.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:13 PM - INFO - MultiGamesToken.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:41:13 PM - INFO - MultiKeyDailyLimitWallet.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	if(msg.value>=this.balance)
2018-11-1006:41:13 PM - INFO - Multiplicator.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	if(msg.value>=this.balance)
2018-11-1006:41:13 PM - INFO - MultiplicatorX2.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	if(msg.value>=this.balance)
2018-11-1006:41:13 PM - INFO - MultiplicatorX3.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	if(msg.value>=this.balance)
2018-11-1006:41:13 PM - INFO - MultiplicatorX4.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	if(msg.value>=this.balance)
2018-11-1006:41:13 PM - INFO - Multiply.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance>=values[i])
2018-11-1006:41:13 PM - INFO - MultiSendEth.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require( this.balance >= amount)
2018-11-1006:41:13 PM - INFO - MultiSig.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(address(this).balance >= value, "3")
2018-11-1006:41:13 PM - INFO - MultiSig2of3.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:13 PM - INFO - MusiconomiCrowdsale.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	if(address(this).balance&gt;=CurrentPackFee)
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	if(address(this).balance&gt;=userAmtOverloadToSend)
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	if(address(this).balance&lt;=CurrentPackTotalToPayDisparity)
2018-11-1006:41:13 PM - INFO - MUSystem.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:13 PM - INFO - MVGcoin.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(
            address(this).balance <= TOTAL_ETHER_HARD_CAP,
            "Contract balance hardcap reachead"
        )
2018-11-1006:41:13 PM - INFO - MyanmarDonations.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:13 PM - INFO - MyEPPToken.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance > _gasPrice)
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance >= totalAmount)
2018-11-1006:41:13 PM - INFO - MyFirstEthereumToken.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	if(this.balance==0)
2018-11-1006:41:13 PM - INFO - MyNewBank.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:13 PM - INFO - MyShareToken.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	if(this.balance < maxReserve)
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	if(einsatz * winFaktor > this.balance)
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	if(this.balance < minReserve)
2018-11-1006:41:13 PM - INFO - MyTokenShr.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(_amount <= address(this).balance)
2018-11-1006:41:13 PM - INFO - NaviCrowdSale.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:13 PM - INFO - NCU.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	assert(address(this).balance >= payment)
2018-11-1006:41:13 PM - INFO - NeLunaCoinCrowdsale.sol
2018-11-1006:41:13 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:13 PM - INFO - NEOCASHToken.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(address(this).balance >= EthToSend)
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount * 1 ether)
2018-11-1006:41:14 PM - INFO - NervesStakeTestingPremium.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:14 PM - INFO - NetkingToken.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(_value <= this.balance)
2018-11-1006:41:14 PM - INFO - NEToken.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	if(address(this).balance > 0)
2018-11-1006:41:14 PM - INFO - NETRico.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:14 PM - INFO - NeuroToken.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:14 PM - INFO - NewTokenBitCoinAir.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:14 PM - INFO - NEXPARA.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	if( softCap &lt;= Eth2USD(address(this).balance)
2018-11-1006:41:14 PM - INFO - NomadPreICO.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(_amount <= address(this).balance)
2018-11-1006:41:14 PM - INFO - NoteChain.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	if(address(this).balance > 1 ether)
2018-11-1006:41:14 PM - INFO - NoWhammies.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(address(this).balance > 0)
2018-11-1006:41:14 PM - INFO - NSD.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	assert(_amountWei <= this.balance)
2018-11-1006:41:14 PM - INFO - Nutz.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:14 PM - INFO - NYX.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:14 PM - INFO - NYXAccount.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	if(address(this).balance >= amount)
2018-11-1006:41:14 PM - INFO - ObirumCrowdsale.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:14 PM - INFO - OBTCoin.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:14 PM - INFO - OFC.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:14 PM - INFO - OllisCoin.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:14 PM - INFO - OneExchangeToken.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	if(msg.value == address(this).balance * 100)
2018-11-1006:41:14 PM - INFO - OnePercentGift.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	if(win>this.balance)
2018-11-1006:41:14 PM - INFO - OpenAddressLottery.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:14 PM - INFO - OpenMoneyPresale.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:14 PM - INFO - OpportyPresale.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:14 PM - INFO - OpportyPresale2.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:14 PM - INFO - OpportySale.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:14 PM - INFO - OpportyWhiteList.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(address(this).balance > 0)
2018-11-1006:41:14 PM - INFO - OracleEscrow.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:14 PM - INFO - OracleRoulette.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(this.balance >= min_required_amount)
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	require(this.balance + msg.value < eth_cap)
2018-11-1006:41:14 PM - INFO - OraclesPresale.sol
2018-11-1006:41:14 PM - INFO - Code here may be Error:
	assert(this.balance > 0)
2018-11-1006:41:14 PM - INFO - OrganicumOrders.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:15 PM - INFO - OwnTheDayContract.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance == 0)
2018-11-1006:41:15 PM - INFO - OZRealestatesToken.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:15 PM - INFO - PACCOIN.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:15 PM - INFO - PACOIN.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:15 PM - INFO - PaisaCoin.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance - msg.value < deadline)
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	if(this.balance >= deadline)
2018-11-1006:41:15 PM - INFO - Parallax.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(value <= address(this).balance)
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(address(this).balance >= raisedFunding)
2018-11-1006:41:15 PM - INFO - ParsecCrowdsale.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(amount > 0 && amount <= address(this).balance, "Insufficient amount.")
2018-11-1006:41:15 PM - INFO - Partnership.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(address(this).balance <= 0, 
                "Balance is not 0")
2018-11-1006:41:15 PM - INFO - PayItBack.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	if(address(this).balance < (opThreshold - operatingAddress.balance)
2018-11-1006:41:15 PM - INFO - paymentContract.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance == 0)
2018-11-1006:41:15 PM - INFO - PaymentProcessor.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(rewardAmount <= address(this).balance)
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(_amount <= address(this).balance)
2018-11-1006:41:15 PM - INFO - Payout.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(amount >= _amount && address(this).balance >= _amount)
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(address(this).balance >= _amount)
2018-11-1006:41:15 PM - INFO - PChannelBct.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(divs > 0 && this.balance >= divs)
2018-11-1006:41:15 PM - INFO - PDT.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:41:15 PM - INFO - PEF.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:15 PM - INFO - PELOCoinToken.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	assert(amount > 0 && amount <= this.balance)
2018-11-1006:41:15 PM - INFO - PembiCoinICO.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(address(this).balance >= payment)
2018-11-1006:41:15 PM - INFO - PepeCore.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(address(this).balance >= payment)
2018-11-1006:41:15 PM - INFO - PFMToken.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:15 PM - INFO - PHILCOIN.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	if(money2send <= this.balance)
2018-11-1006:41:15 PM - INFO - PhoenixLite.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	if(msg.value >= this.balance && msg.value > 0.1 ether)
2018-11-1006:41:15 PM - INFO - PinCodeEtherStorage.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	if(msg.value >= this.balance && msg.value > 0.1 ether)
2018-11-1006:41:15 PM - INFO - PinCodeMoneyStorage.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	if(msg.value >= this.balance && msg.value > 0.1 ether)
2018-11-1006:41:15 PM - INFO - PinCodeStorage.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:15 PM - INFO - PiranhasBattle.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:15 PM - INFO - PiToken.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance > _withdraw)
2018-11-1006:41:15 PM - INFO - Pixiu.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance > _withdraw)
2018-11-1006:41:15 PM - INFO - Pixiu_Beta.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(amount <= address(this).balance)
2018-11-1006:41:15 PM - INFO - PixoArenaFounderToken.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:15 PM - INFO - PMET.sol
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance >= comision)
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance >= comision)
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance >= comision)
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance >= amount_weis)
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance >= _totalAmount )
2018-11-1006:41:15 PM - INFO - Code here may be Error:
	require(this.balance >= qtyDividends)
2018-11-1006:41:15 PM - INFO - PMHToken.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(this.balance &gt;= amount)
2018-11-1006:41:16 PM - INFO - PoliticianToken.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:16 PM - INFO - PoliticoinToken.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	if(address(this).balance < amount)
2018-11-1006:41:16 PM - INFO - PollManagedFund.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount * sellPrice)
2018-11-1006:41:16 PM - INFO - PONTEM.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(address(this).balance > 0)
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	assert(address(this).balance < b)
2018-11-1006:41:16 PM - INFO - PonziSeller.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	if(gains > 0 && this.balance > payableAmount)
2018-11-1006:41:16 PM - INFO - PonziUnlimited.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:16 PM - INFO - PowermerchCoin.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(_amount <= this.balance - totalPayments)
2018-11-1006:41:16 PM - INFO - PoWTFCommunityFund.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(_value <= this.balance)
2018-11-1006:41:16 PM - INFO - PRECOE.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	if(this.balance + msg.value > maxAmountSupply)
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	if(this.balance == maxAmountSupply)
2018-11-1006:41:16 PM - INFO - PreICO.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(this.balance <= hardcap)
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	if(now > start + period * 1 days || this.balance >= hardcap)
2018-11-1006:41:16 PM - INFO - preSale2.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(this.balance <= hardcap)
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	if(now > end || this.balance >= hardcap)
2018-11-1006:41:16 PM - INFO - preSale3.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(this.balance <= hardcap)
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	if(now > end || this.balance >= hardcap)
2018-11-1006:41:16 PM - INFO - preSale4.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(this.balance <= hardcap)
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	if(now > end || this.balance >= hardcap)
2018-11-1006:41:16 PM - INFO - preSale5.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:16 PM - INFO - PreSaleToken.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(this.balance == 0)
2018-11-1006:41:16 PM - INFO - PrivatePaymentProcessor.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	assert(this.balance >= payment)
2018-11-1006:41:16 PM - INFO - ProfitSharingV2.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:16 PM - INFO - ProfytPro.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(this.balance > total)
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(this.balance > total)
2018-11-1006:41:16 PM - INFO - ProgressiveRaffle.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(weiReqFund == 0 && _weiReqFund > 0 && _weiReqFund <= this.balance)
2018-11-1006:41:16 PM - INFO - Proof.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:16 PM - INFO - Protocol108.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:16 PM - INFO - Protocol108v2.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(this.balance >= _ethers)
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(this.balance >= ether_value)
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(this.balance >= ether_value)
2018-11-1006:41:16 PM - INFO - PulsarToken.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount.mul(sellPrice)
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(this.balance >= amount.mul(sellPrice)
2018-11-1006:41:16 PM - INFO - PumpkinToken.sol
2018-11-1006:41:16 PM - INFO - Code here may be Error:
	require(this.balance >= ethAmount)
2018-11-1006:41:16 PM - INFO - QIUToken.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(this.balance < max_raised_amount)
2018-11-1006:41:17 PM - INFO - QUANTFund.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	if(this.balance <= 50 ether)
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	if(this.balance >= 50 ether)
2018-11-1006:41:17 PM - INFO - RabbitHub.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(this.balance >= msg.value && msg.value>0)
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:17 PM - INFO - Races.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	assert(this.balance == 0)
2018-11-1006:41:17 PM - INFO - RaiseFundsForACause.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(_amount <= this.balance - totalPayments)
2018-11-1006:41:17 PM - INFO - RAMENCommunityFund.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:17 PM - INFO - RAM_Token.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	if(this.balance < _val)
2018-11-1006:41:17 PM - INFO - RandomM.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(this.balance >= _amount)
2018-11-1006:41:17 PM - INFO - RapidProfit.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:17 PM - INFO - RarePack.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:17 PM - INFO - RarePackFour.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:17 PM - INFO - RarePackThree.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:17 PM - INFO - RarePackTwo.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(address(this).balance >= amtEth && balances[this] >= amtToken )
2018-11-1006:41:17 PM - INFO - Rbank.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	if( money > address(this).balance )
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	if( amountApplied > address(this).balance || time.length == step+1)
2018-11-1006:41:17 PM - INFO - RC_KYC.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	if( money > address(this).balance )
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	if( amountApplied > address(this).balance || time.length == step+1)
2018-11-1006:41:17 PM - INFO - RC_KYC_ADV.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:17 PM - INFO - RealEstateCouponToken.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:17 PM - INFO - RealTract.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(value <= this.balance)
2018-11-1006:41:17 PM - INFO - Receiver.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:17 PM - INFO - RecoverableBank.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(amount >= _amount && this.balance >= _amount)
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(this.balance >= _amount)
2018-11-1006:41:17 PM - INFO - Referral.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:17 PM - INFO - Registration.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	if( this.balance > 0 )
2018-11-1006:41:17 PM - INFO - REKT.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	if( this.balance > 0 )
2018-11-1006:41:17 PM - INFO - REKTTokenSale.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(this.balance <= max_amount)
2018-11-1006:41:17 PM - INFO - RemmeSANITY.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	assert(address(this).balance &gt;= payment)
2018-11-1006:41:17 PM - INFO - Rentals.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(address(this).balance > _value.add(3 ether)
2018-11-1006:41:17 PM - INFO - Reoraclizer.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	assert(address(this).balance >= value)
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(address(this).balance >= paymentValue)
2018-11-1006:41:17 PM - INFO - RequestFactory.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(this.balance >= min_required_amount)
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(this.balance < eth_cap)
2018-11-1006:41:17 PM - INFO - RequestSale.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(address(this).balance == 0)
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(weiCap == 0 || this.balance <= weiCap)
2018-11-1006:41:17 PM - INFO - Reservation2.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice / 1000)
2018-11-1006:41:17 PM - INFO - RESToken.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(address(this).balance <= maxBalance, "the contract eth balance limit")
2018-11-1006:41:17 PM - INFO - Revolution.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(address(this).balance <= maxBalance, "the contract eth balance limit")
2018-11-1006:41:17 PM - INFO - Revolution2.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(this.balance >= _value)
2018-11-1006:41:17 PM - INFO - Rexpax.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:17 PM - INFO - Rice.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(address(this).balance >= e)
2018-11-1006:41:17 PM - INFO - RichiumToken.sol
2018-11-1006:41:17 PM - INFO - Code here may be Error:
	require(this.balance >= amtEth && balances[this] >= amtToken )
2018-11-1006:41:17 PM - INFO - RiemannianNonorientableManifolds.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance >= min_required_amount)
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance <= max_amount)
2018-11-1006:41:18 PM - INFO - RipioFUND.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	if(_dividends > address(this).balance/2)
2018-11-1006:41:18 PM - INFO - risebox.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(summ < address(this).balance)
2018-11-1006:41:18 PM - INFO - RNDInvestor.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:18 PM - INFO - RobotBTC.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance >= etherAmmount)
2018-11-1006:41:18 PM - INFO - RobotCoin.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance >= etherAmmount)
2018-11-1006:41:18 PM - INFO - RobotCoinSeller.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	assert(_value <= this.balance)
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:18 PM - INFO - RobotTradingIco.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	assert(_value <= this.balance)
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:18 PM - INFO - RobotTradingToken.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(address(this).balance > smallRound[bigId][smallId].winnerProfit)
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(address(this).balance >= bigRound[bigId].jackpotBalance)
2018-11-1006:41:18 PM - INFO - RobTheBank.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:18 PM - INFO - ROSCcoin.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:18 PM - INFO - ROSCtoken.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:18 PM - INFO - RozelCoin.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(weiAmount <= uint256(address(this).balance)
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(weiAmount <= uint256(address(this).balance)
2018-11-1006:41:18 PM - INFO - RubusFundBlackToken.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(address(this).balance &gt;= 1 ether)
2018-11-1006:41:18 PM - INFO - S3DContract.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance == 0)
2018-11-1006:41:18 PM - INFO - SafeDeposit.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	assert(this.balance > 0)
2018-11-1006:41:18 PM - INFO - SaleTokens.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:18 PM - INFO - Sample.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(totalProcessingFee <= address(this).balance, "not enough fund")
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(balance <= address(this).balance, "not enough fund")
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(theLastSamuraiPot <= address(this).balance, "not enough fund")
2018-11-1006:41:18 PM - INFO - SamuraiQuest.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance &gt;= allOpenTradesAmounts)
2018-11-1006:41:18 PM - INFO - SatoshiFutures.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance >= amount / sellPrice)
2018-11-1006:41:18 PM - INFO - SATTToken.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:18 PM - INFO - SaveToken.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:18 PM - INFO - ScamCoin.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:18 PM - INFO - SDR.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:18 PM - INFO - SDR22.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:18 PM - INFO - SECoin.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:18 PM - INFO - SectorCoin.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance == 0)
2018-11-1006:41:18 PM - INFO - SecureDeposit.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(value <= address(this).balance)
2018-11-1006:41:18 PM - INFO - SecurityController.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(value <= address(this).balance)
2018-11-1006:41:18 PM - INFO - SecurityLedger.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(value <= address(this).balance)
2018-11-1006:41:18 PM - INFO - SecuritySale.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(value <= address(this).balance)
2018-11-1006:41:18 PM - INFO - SecurityToken.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:18 PM - INFO - Seed.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:18 PM - INFO - SeedPreSale.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:18 PM - INFO - SeedRound.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:18 PM - INFO - SendMe.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(address(this).balance &gt;= amountToCollect)
2018-11-1006:41:18 PM - INFO - Serpent.sol
2018-11-1006:41:18 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:18 PM - INFO - SERVVIZIOToken.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:19 PM - INFO - SfomoToken.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance == 0)
2018-11-1006:41:19 PM - INFO - SharedBank.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	if(this.balance<_qty*price)
2018-11-1006:41:19 PM - INFO - Shark.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance >= amount * price / 10 ** decimals)
2018-11-1006:41:19 PM - INFO - Shaycoin.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:19 PM - INFO - ShiftCashIco.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:19 PM - INFO - ShiftCashToken.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(balance <= address(this).balance)
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(balance <= address(this).balance)
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(balance <= address(this).balance)
2018-11-1006:41:19 PM - INFO - ShintakuToken.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:19 PM - INFO - ShinyLegendaryPack.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:19 PM - INFO - ShinyLegendaryPackFour.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:19 PM - INFO - ShinyLegendaryPackThree.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:19 PM - INFO - ShinyLegendaryPackTwo.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	if(address(this).balance > balance + feeBalance)
2018-11-1006:41:19 PM - INFO - ShinySquirrels.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:19 PM - INFO - Shmoo.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	if(address(this).balance >= TicketPool[secretKey_D_hash].Result)
2018-11-1006:41:19 PM - INFO - SicBo.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance == 0)
2018-11-1006:41:19 PM - INFO - SignalsSociety.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance >= _amount)
2018-11-1006:41:19 PM - INFO - SilentNotaryCrowdsale.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance >= _amount)
2018-11-1006:41:19 PM - INFO - SilentNotaryToken.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(_value <= address(this).balance)
2018-11-1006:41:19 PM - INFO - SiliconValleyToken.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:19 PM - INFO - SilkToken.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance > total)
2018-11-1006:41:19 PM - INFO - SilverRaffle.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:41:19 PM - INFO - SimpleChildToken.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(value &gt; 0 &amp;&amp; this.balance &gt;= value)
2018-11-1006:41:19 PM - INFO - SimpleMultiSigWallet.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	if(msg.sender==creator && this.balance>= MinSum)
2018-11-1006:41:19 PM - INFO - SIMPLE_PIGGY_BANK.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance >= amountInWei)
2018-11-1006:41:19 PM - INFO - SingleMessage.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:19 PM - INFO - SIPCOIN.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:19 PM - INFO - SIPCToken.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance &gt;= _amount)
2018-11-1006:41:19 PM - INFO - SlammerTime.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:19 PM - INFO - SLCAdvancedToken.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:19 PM - INFO - SlidebitsToken.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	if(this.balance < value)
2018-11-1006:41:19 PM - INFO - SlognToken.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	if(address(this).balance < msg.value/100*prizes[0])
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	if( address(this).balance < amount)
2018-11-1006:41:19 PM - INFO - Slot.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance >= game.rules.jackpot)
2018-11-1006:41:19 PM - INFO - SlotLottery.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(_amount > 0 && this.balance >= (investBalance * 9 / 10)
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require((_amount <= this.balance / 400)
2018-11-1006:41:19 PM - INFO - SmartBillions.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	if(this.balance < amountToInvestor)
2018-11-1006:41:19 PM - INFO - SmartMMM.sol
2018-11-1006:41:19 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:19 PM - INFO - SmartPayment.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:20 PM - INFO - SmatrOCrowdsale.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:20 PM - INFO - SMUToken.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(address(this).balance>=amount*10**18)
2018-11-1006:41:20 PM - INFO - SnailToken.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(this.balance >= ethAmount)
2018-11-1006:41:20 PM - INFO - SoccerChampion.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(this.balance >= ethAmount)
2018-11-1006:41:20 PM - INFO - SoccerGamblingV_QIU.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(this.balance - amount > totalEthInWei/5)
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(this.balance >= amount/amountSellForOneEth)
2018-11-1006:41:20 PM - INFO - SOCWARECoin.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(address(this).balance > _amountInwei)
2018-11-1006:41:20 PM - INFO - Solarex.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(address(this).balance >= payment)
2018-11-1006:41:20 PM - INFO - SontakuToken.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:20 PM - INFO - SOSCoin.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(amount <= address(this).balance)
2018-11-1006:41:20 PM - INFO - SpaceXToken.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:20 PM - INFO - SPARCPresale.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(address(this).balance &gt;= totalCost)
2018-11-1006:41:20 PM - INFO - SparksterToken.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:20 PM - INFO - SpaToken.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:20 PM - INFO - SpectreSubscriberToken.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:20 PM - INFO - SpeedCashTokenContract.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(ownerBalance <= this.balance)
2018-11-1006:41:20 PM - INFO - SpinnerProcessor.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(address(this).balance >= payment)
2018-11-1006:41:20 PM - INFO - SplitPayment.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(address(this).balance >= contractEarnings)
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:20 PM - INFO - SplitStealContract.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:20 PM - INFO - SportifyCrowdsale.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:20 PM - INFO - SrcToken.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(this.balance == 0)
2018-11-1006:41:20 PM - INFO - StaffFunds.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(address(this).balance > 0)
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	if(funds > address(this).balance)
2018-11-1006:41:20 PM - INFO - Stage1MEI.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	assert(this.balance == walletBalance-amount)
2018-11-1006:41:20 PM - INFO - StakeTreeMVP.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	assert(this.balance == walletBalance-amount)
2018-11-1006:41:20 PM - INFO - StakeTreeWithTokenization.sol
2018-11-1006:41:20 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:20 PM - INFO - STANToken.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(msg.value &gt; 0 &amp;&amp; this.balance &lt;= maxCap)
2018-11-1006:41:21 PM - INFO - StarbasePresaleWallet.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(value < address(this).balance)
2018-11-1006:41:21 PM - INFO - Stars.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:21 PM - INFO - StcToken.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(this.balance >= 1000000000000000)
2018-11-1006:41:21 PM - INFO - Story.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(value &gt; 0 &amp;&amp; this.balance &gt;= value)
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(this.balance &gt;= payment)
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	assert(startingInvariant == this.balance.add(m_funds.balance)
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	assert(startingInvariant == this.balance.add(m_funds.balance)
2018-11-1006:41:21 PM - INFO - STQCrowdsale.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	assert(startingInvariant == this.balance.add(m_funds.balance)
2018-11-1006:41:21 PM - INFO - STQPreICO.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	assert(startingInvariant == this.balance.add(getWeiCollected()
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(value &gt; 0 &amp;&amp; this.balance &gt;= value)
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(this.balance &gt;= payment)
2018-11-1006:41:21 PM - INFO - STQPreICO2.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	assert(startingInvariant == this.balance.add(getWeiCollected()
2018-11-1006:41:21 PM - INFO - STQPreICO3.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(address(this).balance &gt;= MIN_WITHDRAW_WEI)
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(_targetWei &gt;= MIN_WITHDRAW_WEI &amp;&amp; _targetWei &lt;= address(this).balance)
2018-11-1006:41:21 PM - INFO - StrayFund.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(this.balance >= weiAmount)
2018-11-1006:41:21 PM - INFO - StyrasCrowdsale.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(this.balance >= weiAmount)
2018-11-1006:41:21 PM - INFO - StyrasToken.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(this.balance >= weiAmount)
2018-11-1006:41:21 PM - INFO - StyrasVault.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(this.balance >= min_amount)
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(max_amount == 0 || this.balance <= max_amount)
2018-11-1006:41:21 PM - INFO - SuperbContract.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:21 PM - INFO - SuperCarbonCoinToken.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(address(this).balance > 100000000)
2018-11-1006:41:21 PM - INFO - SuperCountriesEth.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(address(this).balance >= _bonus,'out of balance')
2018-11-1006:41:21 PM - INFO - SuperFoMo3D.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(this.balance >= _value)
2018-11-1006:41:21 PM - INFO - SUPERIUM.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:21 PM - INFO - SuperNebulaChain.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(this.balance < softcap && now > start + period * 1 days)
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	if(this.balance > softcap)
2018-11-1006:41:21 PM - INFO - SupportCoin.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:21 PM - INFO - SurfersBeach.sol
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	if((address(this).balance >= 1 wei)
2018-11-1006:41:21 PM - INFO - Code here may be Error:
	if(address(this).balance > 42000)
2018-11-1006:41:21 PM - INFO - SweepsToken.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(_amount <= address(this).balance)
2018-11-1006:41:22 PM - INFO - TakeoutController.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance >= amountToReturn)
2018-11-1006:41:22 PM - INFO - TaklimakanCrowdsale.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance >= amountToReturn)
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:41:22 PM - INFO - TaklimakanPreICO.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice / 10000)
2018-11-1006:41:22 PM - INFO - TCDC.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(address(this).balance > 0)
2018-11-1006:41:22 PM - INFO - TeamTokens.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(_amount<=address(this).balance)
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(_amount<=address(this).balance)
2018-11-1006:41:22 PM - INFO - TeamVersus.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:22 PM - INFO - TeaToken.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice / 10000)
2018-11-1006:41:22 PM - INFO - TEGTY.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(_value <= address(this).balance)
2018-11-1006:41:22 PM - INFO - TenderToken.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	if(address(this).balance < 625000000000000000)
2018-11-1006:41:22 PM - INFO - Teris.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:41:22 PM - INFO - Terrus.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance >= ((minBalanceForAccounts - _to.balance)
2018-11-1006:41:22 PM - INFO - TESTAhihi.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:22 PM - INFO - testBank.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance >= _value)
2018-11-1006:41:22 PM - INFO - TESTERIUM.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance >= _value)
2018-11-1006:41:22 PM - INFO - TESTERIUM2.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance >= _value)
2018-11-1006:41:22 PM - INFO - TESTERIUM3.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	assert(address(this).balance >= payment)
2018-11-1006:41:22 PM - INFO - TezaCrowdsale.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(address(this).balance >= totalETH.add(_value)
2018-11-1006:41:22 PM - INFO - TheButton.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:22 PM - INFO - TheFlashToken.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount.mul(sellPrice)
2018-11-1006:41:22 PM - INFO - THEFORTUNEFUND.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(address(this).balance > amount * 1 ether)
2018-11-1006:41:22 PM - INFO - ThingsbookChain.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:22 PM - INFO - Thread.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:22 PM - INFO - THTokenSale.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance >= _amountWei)
2018-11-1006:41:22 PM - INFO - TicketHolder.sol
2018-11-1006:41:22 PM - INFO - Code here may be Error:
	require(this.balance >= _amountWei)
2018-11-1006:41:22 PM - INFO - TicketSale.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	if( this.balance == 0 )
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	if( this.balance == 0 )
2018-11-1006:41:23 PM - INFO - TimeCapsuleEvent.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(this.balance == 0)
2018-11-1006:41:23 PM - INFO - TimeLocker.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	assert(address(this).balance >= value)
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(address(this).balance >= paymentValue)
2018-11-1006:41:23 PM - INFO - TimestampScheduler.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(address(this).balance >= change)
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(address(this).balance >= change)
2018-11-1006:41:23 PM - INFO - TLIFE.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	if( money > address(this).balance )
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	if( amountApplied > address(this).balance || time.length == step+1)
2018-11-1006:41:23 PM - INFO - TokedoDaico.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:23 PM - INFO - TokenAGC.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount / sellScale)
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(address(this).balance > sellAmount / sellScale)
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount / sellScale)
2018-11-1006:41:23 PM - INFO - TokenBBBasic.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(weiValue <= loadedRefund && weiValue <= this.balance)
2018-11-1006:41:23 PM - INFO - TokenDistribution.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:23 PM - INFO - TokenGAC.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:23 PM - INFO - TokenGame.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:23 PM - INFO - TokenHNC.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:41:23 PM - INFO - TokenLayer.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(wad < this.balance)
2018-11-1006:41:23 PM - INFO - TokenLogic.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(this.balance >= etherAmount)
2018-11-1006:41:23 PM - INFO - TokenNWTC.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:23 PM - INFO - TokenRWC.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	if(this.balance >= _value)
2018-11-1006:41:23 PM - INFO - TokenSale.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	if(address(this).balance > 0)
2018-11-1006:41:23 PM - INFO - TokenSaleManager.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:23 PM - INFO - TokenSGC.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(address(this).balance  >= amount * sellPrice)
2018-11-1006:41:23 PM - INFO - TokenShares.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:23 PM - INFO - TokenSTC.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(this.balance >= totalPresale)
2018-11-1006:41:23 PM - INFO - TokenSyndicate.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	if(this.balance >= _value)
2018-11-1006:41:23 PM - INFO - TokenTraderFactory.sol
2018-11-1006:41:23 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:23 PM - INFO - TournamentPass.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= 100 ether)
2018-11-1006:41:24 PM - INFO - TPIToken.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:24 PM - INFO - TraceTokenSale.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	if(this.balance &lt;= obligations)
2018-11-1006:41:24 PM - INFO - Tracker.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	if(this.balance > 1000000000000000000)
2018-11-1006:41:24 PM - INFO - Tracto.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice / sellMultiplier)
2018-11-1006:41:24 PM - INFO - Tradesman.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	assert(address(this).balance >= value)
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(address(this).balance >= paymentValue)
2018-11-1006:41:24 PM - INFO - TransactionRequestCore.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(amount < address(this).balance)
2018-11-1006:41:24 PM - INFO - TranslatixToken.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require( this.balance >= proposals[pix].amount )
2018-11-1006:41:24 PM - INFO - Treasury.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= value)
2018-11-1006:41:24 PM - INFO - TrezorMultiSig2of3.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:24 PM - INFO - TripCash.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	if(this.balance >= periodITO_softCapInWei)
2018-11-1006:41:24 PM - INFO - TripleAlphaCrowdsale.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	if(this.balance >= periodITO_softCapInWei)
2018-11-1006:41:24 PM - INFO - TripleAlphaToken.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:24 PM - INFO - TripPay.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:24 PM - INFO - TRIUM.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= payment)
2018-11-1006:41:24 PM - INFO - TrivialToken.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:24 PM - INFO - Troo.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:24 PM - INFO - TrueGoldCoinToken.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= revenue)
2018-11-1006:41:24 PM - INFO - TrumpFullTermToken.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= revenue)
2018-11-1006:41:24 PM - INFO - TrumpImpeachmentToken.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:24 PM - INFO - TrustZen.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice / 10000)
2018-11-1006:41:24 PM - INFO - TTOH.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:24 PM - INFO - TulipCore.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:24 PM - INFO - TurdCoin.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount * sellPrice)
2018-11-1006:41:24 PM - INFO - Ubiou.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:24 PM - INFO - Ublasti.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	if(address(this).balance > 0)
2018-11-1006:41:24 PM - INFO - Ubricoin.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:24 PM - INFO - UCoinToken.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(value < this.balance)
2018-11-1006:41:24 PM - INFO - UET.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:24 PM - INFO - UHubToken.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:24 PM - INFO - UltimateCoin.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(address(this).balance >= _value)
2018-11-1006:41:24 PM - INFO - UnicornBreeding.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(address(this).balance >= _value)
2018-11-1006:41:24 PM - INFO - UnicornContract.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:24 PM - INFO - UnicoSeedCrowdsale.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:24 PM - INFO - UnitToken.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:24 PM - INFO - UnlimitedIPToken.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:24 PM - INFO - UPayToken.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= amountWei)
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	assert(_amountWei <= this.balance)
2018-11-1006:41:24 PM - INFO - UpgradeEventCompact.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	if(this.balance >= 10 ether)
2018-11-1006:41:24 PM - INFO - UseChainToken.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(ethersToSend > 0 && 
            ethersToSend <= (this.balance * (100 - LIQUIDATION_RESERVE_RATIO)
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(amount > this.balance)
2018-11-1006:41:24 PM - INFO - UselessReserveBank.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:24 PM - INFO - UTBTokenTest.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:24 PM - INFO - UTCT.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= ethers_collected)
2018-11-1006:41:24 PM - INFO - UTEMIS.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(_value <= this.balance)
2018-11-1006:41:24 PM - INFO - UTU.sol
2018-11-1006:41:24 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:41:24 PM - INFO - VAAToken.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(address(this).balance > amount * 1 ether)
2018-11-1006:41:25 PM - INFO - VanHardwareResourcesChain.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	if(amount > this.balance)
2018-11-1006:41:25 PM - INFO - Vault.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:41:25 PM - INFO - VBToken.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount * sellPrice)
2018-11-1006:41:25 PM - INFO - VCCToken.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	if(this.balance > 1000000000000000000)
2018-11-1006:41:25 PM - INFO - VEGIGCrypto.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance == 0)
2018-11-1006:41:25 PM - INFO - VentanaToken.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(amount < this.balance)
2018-11-1006:41:25 PM - INFO - Vertex_Token.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(address(this).balance >= value)
2018-11-1006:41:25 PM - INFO - VestedMultisigWallet.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:25 PM - INFO - VEU_TokenERC20.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance < eth_cap)
2018-11-1006:41:25 PM - INFO - ViberateBuyer.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance != 0)
2018-11-1006:41:25 PM - INFO - ViberateCrowdsale.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance >= amount)
2018-11-1006:41:25 PM - INFO - ViewlyMainSale.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:25 PM - INFO - ViewlySeedSale.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(msg.value <= SafeMath.sub(this.balance,msg.value)
2018-11-1006:41:25 PM - INFO - Vineyard.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	assert(this.balance == 0)
2018-11-1006:41:25 PM - INFO - ViolaCrowdsale.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:25 PM - INFO - VITToken.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:25 PM - INFO - VOLOP.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	assert(pendingWeiAmount <= address(this).balance)
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	assert(pendingWeiAmount <= address(this).balance)
2018-11-1006:41:25 PM - INFO - VreoTokenSale.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:25 PM - INFO - VSCToken.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:25 PM - INFO - VuePayToken.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:25 PM - INFO - VuePayTokenSale.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:25 PM - INFO - WABnetwork.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance < softcap && now > start + period * 1 days)
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	if(this.balance > softcap)
2018-11-1006:41:25 PM - INFO - WaboTokenCoin.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(address(this).balance>=_amount)
2018-11-1006:41:25 PM - INFO - WalletFactory.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(amount <= this.balance)
2018-11-1006:41:25 PM - INFO - WalletWithEmergencyTransfer.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:25 PM - INFO - WanersiLinkToken.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance >= need_to_pay)
2018-11-1006:41:25 PM - INFO - WaraCoin.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(address(this).balance >= _amount * sellPrice)
2018-11-1006:41:25 PM - INFO - WeiFangQiCoin.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance > 0)
2018-11-1006:41:25 PM - INFO - Wforcer.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance >= _value)
2018-11-1006:41:25 PM - INFO - WhitelistSale.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:25 PM - INFO - WHOIS.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:25 PM - INFO - WHOISCrowdsale.sol
2018-11-1006:41:25 PM - INFO - Code here may be Error:
	require(msg.value <= SafeMath.sub(this.balance,msg.value)
2018-11-1006:41:25 PM - INFO - WineMarket.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(address(this).balance < softcap && now > endICO)
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(address(this).balance >= softcap && now > endICO14)
2018-11-1006:41:26 PM - INFO - WOLF.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(address(this).balance > _amount)
2018-11-1006:41:26 PM - INFO - WolfSale.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	assert(this.balance >= amount)
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	assert(this.balance - amount >= 0)
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	assert(this.balance - amount >= 0)
2018-11-1006:41:26 PM - INFO - WordCoin.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(address(this).balance >= weiToSend)
2018-11-1006:41:26 PM - INFO - WorkIt.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(address(this).balance >= payment)
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount)
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(address(this).balance >= tempTotalPayments)
2018-11-1006:41:26 PM - INFO - WorldCup2018.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	if(this.balance >= uint256(3.2 ether)
2018-11-1006:41:26 PM - INFO - WorldCupToken.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(address(this).balance>=amount)
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(address(this).balance>=amount_total)
2018-11-1006:41:26 PM - INFO - WorldCupWinner.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:26 PM - INFO - WorldOpctionChain.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:26 PM - INFO - WorldSafetySecurityToken.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:26 PM - INFO - WorldTrade.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	if( this.balance < destAmount )
2018-11-1006:41:26 PM - INFO - Wrapper.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:26 PM - INFO - WXSLToken.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	if(msg.value>=this.balance)
2018-11-1006:41:26 PM - INFO - X2.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(value > 0 && value >= address(this).balance)
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(value > 0 && value >= address(this).balance)
2018-11-1006:41:26 PM - INFO - XC.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(value > 0 && value >= address(this).balance)
2018-11-1006:41:26 PM - INFO - XCPlugin.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:26 PM - INFO - XYZToken.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(this.balance &gt;= amount * sellPrice)
2018-11-1006:41:26 PM - INFO - YAMBYO.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:26 PM - INFO - YiTongCoin.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:26 PM - INFO - YoobaBatchTransfer.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:26 PM - INFO - YoobaEarlyInvest.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(_amount <= this.balance)
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	if(totalBuyerETHMap[_to[i]] <= this.balance)
2018-11-1006:41:26 PM - INFO - YoobaICO.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount * sellPrice)
2018-11-1006:41:26 PM - INFO - YOUQIANBI.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(this.balance > 0 )
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	if(this.balance >= etherBalanceOf[msg.sender])
2018-11-1006:41:26 PM - INFO - YourMomTokenCrowdsale.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(this.balance >= Ether && balances[this] >= Token )
2018-11-1006:41:26 PM - INFO - ZegartToken.sol
2018-11-1006:41:26 PM - INFO - Code here may be Error:
	require(_amount <= address(this).balance)
2018-11-1006:41:26 PM - INFO - ZenArt.sol
2018-11-1006:41:27 PM - INFO - Code here may be Error:
	require(address(this).balance > 0)
2018-11-1006:41:27 PM - INFO - ZenswapDistribution_ZNTZLTU.sol
2018-11-1006:41:27 PM - INFO - Code here may be Error:
	require(devBalance <= address(this).balance, "you cannot print money")
2018-11-1006:41:27 PM - INFO - Code here may be Error:
	assert(userDivsTeamOneUnclaimed[msg.sender] <= address(this).balance && userDivsTeamOneUnclaimed[msg.sender] <= teamOneDivsUnclaimed)
2018-11-1006:41:27 PM - INFO - Code here may be Error:
	assert(userDivsTeamTwoUnclaimed[msg.sender] <= address(this).balance && userDivsTeamTwoUnclaimed[msg.sender] <= teamTwoDivsUnclaimed)
2018-11-1006:41:27 PM - INFO - ZEROxRACER.sol
2018-11-1006:41:27 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount * sellPrice)
2018-11-1006:41:27 PM - INFO - ZIBToken.sol
2018-11-1006:41:27 PM - INFO - Code here may be Error:
	require(_amount <= address(this).balance, "Amount should be less than total balance of the contract")
2018-11-1006:41:27 PM - INFO - ZincAccessor.sol
2018-11-1006:41:27 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:27 PM - INFO - ZIP.sol
2018-11-1006:41:27 PM - INFO - Code here may be Error:
	if(address(this).balance > 0)
2018-11-1006:41:27 PM - INFO - ZipFlaxICO.sol
2018-11-1006:41:27 PM - INFO - Code here may be Error:
	require(address(this).balance >= amount * sellPrice)
2018-11-1006:41:27 PM - INFO - Zmbc.sol
2018-11-1006:41:27 PM - INFO - Code here may be Error:
	require(this.balance >= amount * sellPrice)
2018-11-1006:41:27 PM - INFO - ZPEcoin.sol
2018-11-1006:41:27 PM - INFO - Code here may be Error:
	if(this.balance > 0)
2018-11-1006:41:27 PM - INFO - ZupplyToken.sol
2018-11-1006:41:27 PM - INFO - Code here may be Error:
	require(address(this).balance >= payment)
2018-11-1006:41:27 PM - INFO - ZUR.sol
2018-11-1006:41:27 PM - INFO - detectAllUexpectedEther finish !!!!!======================================
2018-11-1006:41:49 PM - INFO - ['A2ACrowdsalePartner.sol', 'AALMCrowdsale.sol', 'ABCTokenCrowdsale.sol', 'ABLGenesisToken.sol', 'Abloxx.sol', 'Accessibility.sol', 'AccEthRegCenter.sol', 'Adamcoins.sol', 'Ads.sol', 'AdsharesToken.sol', 'AdsVenture.sol', 'AdvancedToken365.sol', 'AdvancedTokenEIC.sol', 'AdvancedTokenGTH.sol', 'AdvancedTokenIPFS.sol', 'AdvancedTokenRedPacket.sol', 'AgroTechFarmCrowdsale.sol', 'AIChain.sol', 'AKCCrowdsale.sol', 'Aligato.sol', 'AlphaMarketCoinExchanger.sol', 'AlphaMarketICO.sol', 'AlsIco.sol', 'AltCrowdsalePhaseOne.sol', 'Amber.sol', 'AMBTICO.sol', 'AMToken.sol', 'AndreisToken.sol', 'ANTA.sol', 'APICalls.sol', 'APP.sol', 'APSP.sol', 'ARChain.sol', 'archercoin.sol', 'ARIToken.sol', 'ArnaCrowdsale.sol', 'Articoin.sol', 'ArtMuseumV1.sol', 'ArtMuseumV2.sol', 'ArtyCoin.sol', 'Askcoin.sol', 'AtisiosICO.sol', 'AtlantBuyer.sol', 'ATP.sol', 'Auction.sol', 'AutoCoinToken.sol', 'AversafeSeedCrowdsale.sol', 'AXPRV.sol', 'A_NEXT_LEVEL.sol', 'A_TAXPHONE.sol', 'BablosCrowdsaleWallet.sol', 'BaktFactory.sol', 'BallerToken.sol', 'BankCore.sol', 'BankDeposit.sol', 'BankeraToken.sol', 'bar.sol', 'Bassdrops.sol', 'BatchTransferContract.sol', 'BattleDromeICO.sol', 'BazistaICO.sol', 'BBDExchange.sol', 'BCaaS.sol', 'BCDToken.sol', 'BCFLeague.sol', 'BCTToken.sol', 'BeggarBetting.sol', 'BelarusCoin.sol', 'BetContract.sol', 'BetexICO.sol', 'BetexSAFT.sol', 'BetterThanAdrien.sol', 'Betting.sol', 'BettingController.sol', 'BeyondCashToken.sol', 'BFreeContract.sol', 'BGAudit.sol', 'BidAskX.sol', 'Bidding.sol', 'BiddingCustom.sol', 'BiddingUnique.sol', 'BigbomCrowdSale.sol', 'BigbomTokenSale.sol', 'BIGCAdvancedToken.sol', 'BiGeCoin.sol', 'BILLCRYPT.sol', 'Biotoken.sol', 'BiquToken.sol', 'BitandPay.sol', 'BitcoinAgileToken.sol', 'BitcoinQuick.sol', 'BitDegreeCrowdsale.sol', 'BitGame.sol', 'BithToken.sol', 'BitImageTokenSale.sol', 'BitmaxerToken.sol', 'BitProCoinX.sol', 'Bitstarti.sol', 'BitStore.sol', 'BitWichLoom.sol', 'BiyuleCoin.sol', 'BlindCroupierTokenDistribution.sol', 'blockcdn.sol', 'BlockchainDeposit.sol', 'Blockgame.sol', 'BlockhashFetch.sol', 'BlockMarket.sol', 'BlockScheduler.sol', 'BlocksquareSeedSale.sol', 'BlocksquareSeriesA.sol', 'BMVCoin.sol', 'BM_ICO.sol', 'BNDToken.sol', 'BONUSROLL.sol', 'bonusToken.sol', 'BoomerCoin.sol', 'BoomstarterICO.sol', 'BoomstarterSale.sol', 'BoostoPoolFactory.sol', 'BpsToken.sol', 'BrandsRefundFond.sol', 'BrickblockAccount.sol', 'Bridge.sol', 'BronzeRaffle.sol', 'BSCToken.sol', 'BTHToken.sol', 'BTPCoin.sol', 'BullTokenCrowdsale.sol', 'BunnyGame.sol', 'BurnupGameCore.sol', 'buyable.sol', 'Buyer.sol', 'BuyerFund.sol', 'BuyFlowingHair.sol', 'BuyFlowingHair100ETH.sol', 'BuyFlowingHair10ETH.sol', 'BuyFlowingHair1ETH.sol', 'BuyZygoma.sol', 'BVTCcoin.sol', 'BwenCoin.sol', 'C20.sol', 'CABCoinICO.sol', 'CandyLandSale.sol', 'CappedVault.sol', 'Capsule.sol', 'CAPTOZ.sol', 'CarbonExchangeCoinToken.sol', 'CardsTrade.sol', 'CareerForLife.sol', 'CareerToken.sol', 'CarTaxiBonus.sol', 'CarTaxiIco.sol', 'Cash.sol', 'Casino.sol', 'CAST.sol', 'CBR.sol', 'CCASH.sol', 'CCXToken.sol', 'CDcurrency.sol', 'CentraAsiaWhiteList.sol', 'CesaireICO.sol', 'CesiraeICO.sol', 'ChainKey.sol', 'Challenge.sol', 'CharToken.sol', 'CHERRY.sol', 'CHERRYCOIN.sol', 'CherryCoinFoundation.sol', 'ChibiFighters.sol', 'ChiMarket.sol', 'CHIPSale.sol', 'ChronosCore.sol', 'CIBNLiveInteractiveToken.sol', 'CIDCrowdsale.sol', 'CIDToken.sol', 'CINDICATORFund.sol', 'Claes.sol', 'CLC.sol', 'ClinicAllCrowdsale.sol', 'ClinicAllRefundEscrow.sol', 'ClusterToken.sol', 'CM.sol', 'CNODStandart.sol', 'CobinhoodBuyer.sol', 'COBToken.sol', 'COE.sol', 'CoinAdvisorCrowdSale.sol', 'CoinAdvisorPreIco.sol', 'coinback.sol', 'CoinEt.sol', 'CoinFlc.sol', 'CoinGlnc.sol', 'CoinHfcc.sol', 'CoinHow.sol', 'CoinIpr.sol', 'CoinRgit.sol', 'CoinstocksToken.sol', 'ComBillAdvancedToken.sol', 'CommonToken.sol', 'CommonTokensale.sol', 'CommonWhitelist.sol', 'Company.sol', 'ComplexChildToken.sol', 'CONEGTY.sol', 'Contest.sol', 'Contract.sol', 'ContractFactory.sol', 'ContractStakeToken.sol', 'ContribToken.sol', 'CoolTourToken.sol', 'CoreContract.sol', 'Cornerstone.sol', 'CorsariumCore.sol', 'COSMOTokenERC20.sol', 'Couchain.sol', 'CPAYToken.sol', 'CraigHester.sol', 'CranooAdvanced.sol', 'CreateCodeToken.sol', 'CrowdSaleDapCar.sol', 'CrowdSaleMacroansyA.sol', 'CrowdsaleMain.sol', 'CrowdsalePre.sol', 'CrowdSales.sol', 'CrowdWallet.sol', 'CrwdToken.sol', 'CrypotaTestToken.sol', 'CryptoAdrian.sol', 'CryptoArteSales.sol', 'CryptoArtsToken.sol', 'CryptoBetOn.sol', 'CRYPTOBITECOIN.sol', 'CryptoBossWannaCry.sol', 'CryptoCrystal.sol', 'CryptoDays.sol', 'CryptoDivert.sol', 'CryptoDoggies.sol', 'CryptoEngineer.sol', 'Cryptogs.sol', 'CryptoJingles.sol', 'CryptoKittenToken.sol', 'CryptoLeu.sol', 'Cryptoloans.sol', 'CryptoMarketShortCoin.sol', 'CryptoMastersToken.sol', 'CryptoMiningWar.sol', 'CryptonitexCoin.sol', 'CryptoNumismat.sol', 'CryptosisToken.sol', 'CryptoTestToken.sol', 'CryptoTrader.sol', 'Cryptoya.sol', 'CRYSTALCOIN.sol', 'CSAToken.sol', 'CTB.sol', 'CTBSale.sol', 'CTESale.sol', 'CustomContract.sol', 'CWC_Sale.sol', 'CWS.sol', 'CWTPTokenSale.sol', 'DadaPresaleFundCollector.sol', 'DaddyToken.sol', 'DaicoCoinCrowd.sol', 'DAILYC.sol', 'DailyRewards.sol', 'DapCarToken.sol', 'DataFundSeedCrowdsale.sol', 'DataShieldCoin.sol', 'DCCAdvancedToken.sol', 'DCoin.sol', 'DcorpProxy.sol', 'DeCenterToken.sol', 'DECToken.sol', 'depositofferToken.sol', 'deposittest.sol', 'DeSocializedMain.sol', 'DET.sol', 'DeveryFUND.sol', 'DevTeamContract.sol', 'DeWeiSecurityServiceToken.sol', 'Dextera.sol', 'DFS.sol', 'DGTX.sol', 'DhaCoin.sol', 'Dice1.sol', 'DiceForSlice.sol', 'DiceGame.sol', 'DickMeasurementContest.sol', 'DinarETHCrypto.sol', 'DinsteinCoin.sol', 'DistributionTokens.sol', 'DITECHCOIN.sol', 'DIVXToken.sol', 'DMPToken.sol', 'DNTXCrowdsale.sol', 'DoacaoEvento.sol', 'Doftcoin.sol', 'DoftToken.sol', 'DogCore.sol', 'DogRace.sol', 'DonationSplitter.sol', 'DoubleETH.sol', 'DPPCrowdsale.sol', 'DragonTreasureToken.sol', 'Draw.sol', 'DRCCrowSale.sol', 'DRIVER.sol', 'DRIVER_ETHEREUM.sol', 'DSEasyMultisig.sol', 'DualSig.sol', 'DungeonCoreAlpha.sol', 'DungeonCoreAlpha2.sol', 'DungeonCoreBeta.sol', 'Duplicator.sol', 'Dust.sol', 'DVChain.sol', 'DYC.sol', 'e2pAirEscrow.sol', 'EarnEveryDay_255.sol', 'EarnEveryDay_v1_355.sol', 'Eastcoin.sol', 'Easticoin.sol', 'EASYLIFE.sol', 'EasyStockExchange.sol', 'EBanker.sol', 'EBankerICO.sol', 'ECORP.sol', 'ECT2Crowdsale.sol', 'ECT2Crowdsale2.sol', 'EDCoreVersion1.sol', 'eddToken.sol', 'EDEX.sol', 'EDT.sol', 'EESTSale.sol', 'EESTSale1.sol', 'EESTSale2.sol', 'EESTSale3.sol', 'EESTSale4.sol', 'EESTSale5.sol', 'EESTSale6.sol', 'EKTSale.sol', 'ElecSaleSmartContract.sol', 'EligmaCrowdsaleContract.sol', 'EligmaMintingContract.sol', 'ELOVEToken.sol', 'EMPR.sol', 'EncryptedToken.sol', 'ENJ.sol', 'EnjinBuyer.sol', 'ENTROPIUM.sol', 'ENTXSeedCrowdsale.sol', 'EpicPack.sol', 'EpicPackFour.sol', 'EpicPackThree.sol', 'EpicPackTwo.sol', 'EpiphanyCoin.sol', 'EPSBets.sol', 'EpsBonus.sol', 'EPVToken.sol', 'ERC20Extended.sol', 'EscrowGoods.sol', 'Essence.sol', 'ESTSToken.sol', 'EterArt.sol', 'ETH10K.sol', 'Etharea.sol', 'EthBox.sol', 'Etheraffle.sol', 'EtheraffleICO.sol', 'EtherAthlete.sol', 'EtherCityToken.sol', 'EtherealCharity.sol', 'EtherealTipJar.sol', 'EtheremonToken.sol', 'Etherep.sol', 'EthereuMMM.sol', 'EthereumRisen.sol', 'Ethereum_doubler.sol', 'EtherHell.sol', 'EtherHellDeluxe.sol', 'EtherHellFaucet.sol', 'EtherHellHydrant.sol', 'Etherhero.sol', 'Etherization.sol', 'EtherizationUtils.sol', 'EtherizationUtils2.sol', 'EtherJackpot.sol', 'etherKing.sol', 'EthernetCash.sol', 'EtherNomin.sol', 'EtherOlympics.sol', 'EtheroStabilizationFund.sol', 'EtherPizza.sol', 'EtherRacing.sol', 'EtherRacingCore.sol', 'EtherSpaceCore.sol', 'EtherSportCrowdsale.sol', 'EtherTransfer.sol', 'EtherTransferTo.sol', 'ethKeepHand.sol', 'EthKing.sol', 'EthLendToken.sol', 'EthMatch.sol', 'Ethmoji.sol', 'EthsMePresale.sol', 'EthsqrCore.sol', 'EthTweetMe.sol', 'EthVault.sol', 'EthWuxia.sol', 'EvaCoin.sol', 'EvaCoinPreSale.sol', 'EventaCrowdsale.sol', 'ExchangeManager.sol', 'ExeniumToken.sol', 'ExoplanetToken.sol', 'ExoTownIco.sol', 'ExoTownToken.sol', 'ExpToken.sol', 'F2D.sol', 'FactbarDeed.sol', 'FacultyPool.sol', 'FairDinkums.sol', 'FangTangCoin.sol', 'FansChainToken.sol', 'FckDice.sol', 'FDataToken.sol', 'Feed.sol', 'FHFTokenCrowdsale.sol', 'FILM.sol', 'FinancialStrategy.sol', 'FirstCryptoBank.sol', 'Fish.sol', 'Flame.sol', 'Flow.sol', 'FluencePreSale.sol', 'FNKToken.sol', 'Fog.sol', 'Fomo2D.sol', 'FOMO3DLite.sol', 'Fomo5d.sol', 'FootballPlayerOwnership.sol', 'ForeverChain.sol', 'ForeverCoin.sol', 'FornicoinPresale.sol', 'fortunecoin.sol', 'Foundation.sol', 'Founders.sol', 'FoundersVesting.sol', 'FourArt.sol', 'freedomcryptotoken.sol', 'FsTkCMultiSigWallet.sol', 'FundsKeeper.sol', 'FundsRegistry.sol', 'FutouristCrowdsale.sol', 'FutureDeposit.sol', 'GalacticX.sol', 'GameGoldToken.sol', 'GameLogic.sol', 'GameOne.sol', 'GamersToken.sol', 'GammaToken.sol', 'GAP.sol', 'Garrys.sol', 'GasFaucet.sol', 'GAX.sol', 'GCCExchangeCore.sol', 'GCRTokenERC20.sol', 'GDO.sol', 'GdprCash.sol', 'GdprCrowdsale.sol', 'GECOIN.sol', 'GEE.sol', 'GEMCHAIN.sol', 'GFCToken.sol', 'GiftzNetworkToken.sol', 'GIFT_CARD.sol', 'GilgameshToken.sol', 'GilgameshTokenSale.sol', 'GirlAuction.sol', 'Giveaway.sol', 'GladiEther.sol', 'GlobalARQ.sol', 'GlobalSuperGameToken.sol', 'GoGameLogic.sol', 'Goldmint.sol', 'GoldmintUnsold.sol', 'GoldRaffle.sol', 'GoodTimeCoin.sol', 'GoodTo.sol', 'GOOGToken.sol', 'GOOGTokenSale.sol', 'GraceCoin.sol', 'GraspSmartBlockchainLock.sol', 'GreenEnergyToken.sol', 'GreensparcCrowdsale.sol', 'GRO.sol', 'GSI.sol', 'GuessEth.sol', 'GuessTheNumber.sol', 'GUT.sol', 'hackethereumIco.sol', 'HandelionCrowdsale.sol', 'Havven.sol', 'HavvenEscrow.sol', 'Hedgely.sol', 'HeliumNetwork.sol', 'HelloToken.sol', 'HereCoin.sol', 'HeroCoin.sol', 'HEXCrowdSale.sol', 'HEY.sol', 'HODLToken.sol', 'Hold.sol', 'HONG.sol', 'HormitechToken.sol', 'HorseyExchange.sol', 'HorseyPilot.sol', 'HorseyToken.sol', 'hotPotatoAuction.sol', 'HourlyPay.sol', 'HouseCouponToken.sol', 'HRWtoken.sol', 'Human.sol', 'HVB.sol', 'HybridHardFork.sol', 'IADOWR.sol', 'ICOBuyer.sol', 'ICOPreSale.sol', 'ICOSyndicate.sol', 'IDCSale.sol', 'IMCToken.sol', 'IMMCOIN.sol', 'ImmlaIco.sol', 'ImmlaToken.sol', 'Immortals.sol', 'INCXCrowdsale.sol', 'INCXPresale.sol', 'INCXPrivateSale.sol', 'INCXSecondStrategicSale.sol', 'INCXStrategicSale.sol', 'Infinitestars.sol', 'infrastructurePool.sol', 'InnovateToken.sol', 'InsightsNetworkContributions.sol', 'InsurePalCrowdsale.sol', 'Intermediary.sol', 'IPMCoin.sol', 'ItemSelling.sol', 'JackpotCore.sol', 'JCFv2.sol', 'JeansToken.sol', 'Jingle.sol', 'JiucaiToken.sol', 'JokerToken.sol', 'JoyArt.sol', 'JungleScratch.sol', 'KaasyToken.sol', 'KAPAYcoin.sol', 'KAPcoin.sol', 'Karbon14Crowdsale.sol', 'KassotToken.sol', 'KelvinToken.sol', 'KHDonCrowdsale.sol', 'KittyKendoCore.sol', 'Kiyomi.sol', 'Klein.sol', 'KMBToken.sol', 'KMCToken.sol', 'KpopArena.sol', 'KpopCeleb.sol', 'KpopItem.sol', 'KpopToken.sol', 'KryptoArmy.sol', 'KulapDex.sol', 'KyberHandler.sol', 'KyberNetwork.sol', 'KyberNetworkAdapter.sol', 'KyberNetworkTokenSale.sol', 'KyberReserve.sol', 'LadaToken.sol', 'Lctest2.sol', 'LDX.sol', 'LecBatchTransfer.sol', 'LegacySeedCrowdsale.sol', 'LegendaryPack.sol', 'LegendaryPackFour.sol', 'LegendaryPackThree.sol', 'LegendaryPackTwo.sol', 'LemoSale.sol', 'LexitToken.sol', 'LightFundsRegistry.sol', 'LigoToken.sol', 'LimeEyes.sol', 'LineOfTransfers.sol', 'LiquidityNetwork.sol', 'Listen.sol', 'LiveTreeCrowdsale.sol', 'LockedCash.sol', 'Locksmith.sol', 'Lotery.sol', 'Lotto.sol', 'LottoPI.sol', 'LPPCappedMilestones.sol', 'LPVault.sol', 'LRCCcoin.sol', 'LuckyBaby.sol', 'LumenCoin.sol', 'LyuTestToken.sol', 'MaecenasCrowdsale.sol', 'MahalaCoin.sol', 'MahalaToken.sol', 'MainHub.sol', 'MakeupMinter.sol', 'MallToken.sol', 'Manager.sol', 'MAP.sol', 'MaptPresale2Token.sol', 'MaptPresaleToken.sol', 'Market.sol', 'MarketboardERC20Listing.sol', 'Marketplace.sol', 'MasteriumToken.sol', 'MaxHouse.sol', 'MaxToken.sol', 'MCTContractToken.sol', 'MCTCrowdsale.sol', 'MDAPPSale.sol', 'mdbToken.sol', 'MediaCubeToken.sol', 'MediaSifterSeedCrowdsale.sol', 'MedicayunLink.sol', 'MEH.sol', 'MehdiTAZIToken.sol', 'Merchant.sol', 'MerchantWallet.sol', 'MetaGameCore.sol', 'MetropolCrowdsale.sol', 'MiBoodleToken.sol', 'MichCoin.sol', 'MicoinNetworkToken.sol', 'MicoinToken.sol', 'Mimicoin.sol', 'Mindexcoin.sol', 'MinerOneCrowdsale.sol', 'MinerOneToken.sol', 'miner_winner.sol', 'MinesFactory.sol', 'MiningToken.sol', 'Minter.sol', 'MJCToken.sol', 'MKTcoin.sol', 'MMMTokenCoin.sol', 'MMTCoinToken.sol', 'MNTP.sol', 'MNY.sol', 'MobSquads2.sol', 'ModiTokenERC20.sol', 'MON.sol', 'MonethaBuyer.sol', 'Moneto.sol', 'MonetoSale.sol', 'MoneyRebelCrowdsaleContract.sol', 'MooAdvToken.sol', 'Moongang.sol', 'MowjowBounty.sol', 'msc.sol', 'MSCE.sol', 'MSCEVote.sol', 'MultiEthSender.sol', 'MultiGamesToken.sol', 'MultiKeyDailyLimitWallet.sol', 'Multiplicator.sol', 'MultiplicatorX2.sol', 'MultiplicatorX3.sol', 'MultiplicatorX4.sol', 'Multiply.sol', 'MultiSendEth.sol', 'MultiSig.sol', 'MultiSig2of3.sol', 'MusiconomiCrowdsale.sol', 'MUSystem.sol', 'MVGcoin.sol', 'MyanmarDonations.sol', 'MyEPPToken.sol', 'MyFirstEthereumToken.sol', 'MyNewBank.sol', 'MyShareToken.sol', 'MyTokenShr.sol', 'NaviCrowdSale.sol', 'NCU.sol', 'NeLunaCoinCrowdsale.sol', 'NEOCASHToken.sol', 'NervesStakeTestingPremium.sol', 'NetkingToken.sol', 'NEToken.sol', 'NETRico.sol', 'NeuroToken.sol', 'NewTokenBitCoinAir.sol', 'NEXPARA.sol', 'NomadPreICO.sol', 'NoteChain.sol', 'NoWhammies.sol', 'NSD.sol', 'Nutz.sol', 'NYX.sol', 'NYXAccount.sol', 'ObirumCrowdsale.sol', 'OBTCoin.sol', 'OFC.sol', 'OllisCoin.sol', 'OneExchangeToken.sol', 'OnePercentGift.sol', 'OpenAddressLottery.sol', 'OpenMoneyPresale.sol', 'OpportyPresale.sol', 'OpportyPresale2.sol', 'OpportySale.sol', 'OpportyWhiteList.sol', 'OracleEscrow.sol', 'OracleRoulette.sol', 'OraclesPresale.sol', 'OrganicumOrders.sol', 'OwnTheDayContract.sol', 'OZRealestatesToken.sol', 'PACCOIN.sol', 'PACOIN.sol', 'PaisaCoin.sol', 'Parallax.sol', 'ParsecCrowdsale.sol', 'Partnership.sol', 'PayItBack.sol', 'paymentContract.sol', 'PaymentProcessor.sol', 'Payout.sol', 'PChannelBct.sol', 'PDT.sol', 'PEF.sol', 'PELOCoinToken.sol', 'PembiCoinICO.sol', 'PepeCore.sol', 'PFMToken.sol', 'PHILCOIN.sol', 'PhoenixLite.sol', 'PinCodeEtherStorage.sol', 'PinCodeMoneyStorage.sol', 'PinCodeStorage.sol', 'PiranhasBattle.sol', 'PiToken.sol', 'Pixiu.sol', 'Pixiu_Beta.sol', 'PixoArenaFounderToken.sol', 'PMET.sol', 'PMHToken.sol', 'PoliticianToken.sol', 'PoliticoinToken.sol', 'PollManagedFund.sol', 'PONTEM.sol', 'PonziSeller.sol', 'PonziUnlimited.sol', 'PowermerchCoin.sol', 'PoWTFCommunityFund.sol', 'PRECOE.sol', 'PreICO.sol', 'preSale2.sol', 'preSale3.sol', 'preSale4.sol', 'preSale5.sol', 'PreSaleToken.sol', 'PrivatePaymentProcessor.sol', 'ProfitSharingV2.sol', 'ProfytPro.sol', 'ProgressiveRaffle.sol', 'Proof.sol', 'Protocol108.sol', 'Protocol108v2.sol', 'PulsarToken.sol', 'PumpkinToken.sol', 'QIUToken.sol', 'QUANTFund.sol', 'RabbitHub.sol', 'Races.sol', 'RaiseFundsForACause.sol', 'RAMENCommunityFund.sol', 'RAM_Token.sol', 'RandomM.sol', 'RapidProfit.sol', 'RarePack.sol', 'RarePackFour.sol', 'RarePackThree.sol', 'RarePackTwo.sol', 'Rbank.sol', 'RC_KYC.sol', 'RC_KYC_ADV.sol', 'RealEstateCouponToken.sol', 'RealTract.sol', 'Receiver.sol', 'RecoverableBank.sol', 'Referral.sol', 'Registration.sol', 'REKT.sol', 'REKTTokenSale.sol', 'RemmeSANITY.sol', 'Rentals.sol', 'Reoraclizer.sol', 'RequestFactory.sol', 'RequestSale.sol', 'Reservation2.sol', 'RESToken.sol', 'Revolution.sol', 'Revolution2.sol', 'Rexpax.sol', 'Rice.sol', 'RichiumToken.sol', 'RiemannianNonorientableManifolds.sol', 'RipioFUND.sol', 'risebox.sol', 'RNDInvestor.sol', 'RobotBTC.sol', 'RobotCoin.sol', 'RobotCoinSeller.sol', 'RobotTradingIco.sol', 'RobotTradingToken.sol', 'RobTheBank.sol', 'ROSCcoin.sol', 'ROSCtoken.sol', 'RozelCoin.sol', 'RubusFundBlackToken.sol', 'S3DContract.sol', 'SafeDeposit.sol', 'SaleTokens.sol', 'Sample.sol', 'SamuraiQuest.sol', 'SatoshiFutures.sol', 'SATTToken.sol', 'SaveToken.sol', 'ScamCoin.sol', 'SDR.sol', 'SDR22.sol', 'SECoin.sol', 'SectorCoin.sol', 'SecureDeposit.sol', 'SecurityController.sol', 'SecurityLedger.sol', 'SecuritySale.sol', 'SecurityToken.sol', 'Seed.sol', 'SeedPreSale.sol', 'SeedRound.sol', 'SendMe.sol', 'Serpent.sol', 'SERVVIZIOToken.sol', 'SfomoToken.sol', 'SharedBank.sol', 'Shark.sol', 'Shaycoin.sol', 'ShiftCashIco.sol', 'ShiftCashToken.sol', 'ShintakuToken.sol', 'ShinyLegendaryPack.sol', 'ShinyLegendaryPackFour.sol', 'ShinyLegendaryPackThree.sol', 'ShinyLegendaryPackTwo.sol', 'ShinySquirrels.sol', 'Shmoo.sol', 'SicBo.sol', 'SignalsSociety.sol', 'SilentNotaryCrowdsale.sol', 'SilentNotaryToken.sol', 'SiliconValleyToken.sol', 'SilkToken.sol', 'SilverRaffle.sol', 'SimpleChildToken.sol', 'SimpleMultiSigWallet.sol', 'SIMPLE_PIGGY_BANK.sol', 'SingleMessage.sol', 'SIPCOIN.sol', 'SIPCToken.sol', 'SlammerTime.sol', 'SLCAdvancedToken.sol', 'SlidebitsToken.sol', 'SlognToken.sol', 'Slot.sol', 'SlotLottery.sol', 'SmartBillions.sol', 'SmartMMM.sol', 'SmartPayment.sol', 'SmatrOCrowdsale.sol', 'SMUToken.sol', 'SnailToken.sol', 'SoccerChampion.sol', 'SoccerGamblingV_QIU.sol', 'SOCWARECoin.sol', 'Solarex.sol', 'SontakuToken.sol', 'SOSCoin.sol', 'SpaceXToken.sol', 'SPARCPresale.sol', 'SparksterToken.sol', 'SpaToken.sol', 'SpectreSubscriberToken.sol', 'SpeedCashTokenContract.sol', 'SpinnerProcessor.sol', 'SplitPayment.sol', 'SplitStealContract.sol', 'SportifyCrowdsale.sol', 'SrcToken.sol', 'StaffFunds.sol', 'Stage1MEI.sol', 'StakeTreeMVP.sol', 'StakeTreeWithTokenization.sol', 'STANToken.sol', 'StarbasePresaleWallet.sol', 'Stars.sol', 'StcToken.sol', 'Story.sol', 'STQCrowdsale.sol', 'STQPreICO.sol', 'STQPreICO2.sol', 'STQPreICO3.sol', 'StrayFund.sol', 'StyrasCrowdsale.sol', 'StyrasToken.sol', 'StyrasVault.sol', 'SuperbContract.sol', 'SuperCarbonCoinToken.sol', 'SuperCountriesEth.sol', 'SuperFoMo3D.sol', 'SUPERIUM.sol', 'SuperNebulaChain.sol', 'SupportCoin.sol', 'SurfersBeach.sol', 'SweepsToken.sol', 'TakeoutController.sol', 'TaklimakanCrowdsale.sol', 'TaklimakanPreICO.sol', 'TCDC.sol', 'TeamTokens.sol', 'TeamVersus.sol', 'TeaToken.sol', 'TEGTY.sol', 'TenderToken.sol', 'Teris.sol', 'Terrus.sol', 'TESTAhihi.sol', 'testBank.sol', 'TESTERIUM.sol', 'TESTERIUM2.sol', 'TESTERIUM3.sol', 'TezaCrowdsale.sol', 'TheButton.sol', 'TheFlashToken.sol', 'THEFORTUNEFUND.sol', 'ThingsbookChain.sol', 'Thread.sol', 'THTokenSale.sol', 'TicketHolder.sol', 'TicketSale.sol', 'TimeCapsuleEvent.sol', 'TimeLocker.sol', 'TimestampScheduler.sol', 'TLIFE.sol', 'TokedoDaico.sol', 'TokenAGC.sol', 'TokenBBBasic.sol', 'TokenDistribution.sol', 'TokenGAC.sol', 'TokenGame.sol', 'TokenHNC.sol', 'TokenLayer.sol', 'TokenLogic.sol', 'TokenNWTC.sol', 'TokenRWC.sol', 'TokenSale.sol', 'TokenSaleManager.sol', 'TokenSGC.sol', 'TokenShares.sol', 'TokenSTC.sol', 'TokenSyndicate.sol', 'TokenTraderFactory.sol', 'TournamentPass.sol', 'TPIToken.sol', 'TraceTokenSale.sol', 'Tracker.sol', 'Tracto.sol', 'Tradesman.sol', 'TransactionRequestCore.sol', 'TranslatixToken.sol', 'Treasury.sol', 'TrezorMultiSig2of3.sol', 'TripCash.sol', 'TripleAlphaCrowdsale.sol', 'TripleAlphaToken.sol', 'TripPay.sol', 'TRIUM.sol', 'TrivialToken.sol', 'Troo.sol', 'TrueGoldCoinToken.sol', 'TrumpFullTermToken.sol', 'TrumpImpeachmentToken.sol', 'TrustZen.sol', 'TTOH.sol', 'TulipCore.sol', 'TurdCoin.sol', 'Ubiou.sol', 'Ublasti.sol', 'Ubricoin.sol', 'UCoinToken.sol', 'UET.sol', 'UHubToken.sol', 'UltimateCoin.sol', 'UnicornBreeding.sol', 'UnicornContract.sol', 'UnicoSeedCrowdsale.sol', 'UnitToken.sol', 'UnlimitedIPToken.sol', 'UPayToken.sol', 'UpgradeEventCompact.sol', 'UseChainToken.sol', 'UselessReserveBank.sol', 'UTBTokenTest.sol', 'UTCT.sol', 'UTEMIS.sol', 'UTU.sol', 'VAAToken.sol', 'VanHardwareResourcesChain.sol', 'Vault.sol', 'VBToken.sol', 'VCCToken.sol', 'VEGIGCrypto.sol', 'VentanaToken.sol', 'Vertex_Token.sol', 'VestedMultisigWallet.sol', 'VEU_TokenERC20.sol', 'ViberateBuyer.sol', 'ViberateCrowdsale.sol', 'ViewlyMainSale.sol', 'ViewlySeedSale.sol', 'Vineyard.sol', 'ViolaCrowdsale.sol', 'VITToken.sol', 'VOLOP.sol', 'VreoTokenSale.sol', 'VSCToken.sol', 'VuePayToken.sol', 'VuePayTokenSale.sol', 'WABnetwork.sol', 'WaboTokenCoin.sol', 'WalletFactory.sol', 'WalletWithEmergencyTransfer.sol', 'WanersiLinkToken.sol', 'WaraCoin.sol', 'WeiFangQiCoin.sol', 'Wforcer.sol', 'WhitelistSale.sol', 'WHOIS.sol', 'WHOISCrowdsale.sol', 'WineMarket.sol', 'WOLF.sol', 'WolfSale.sol', 'WordCoin.sol', 'WorkIt.sol', 'WorldCup2018.sol', 'WorldCupToken.sol', 'WorldCupWinner.sol', 'WorldOpctionChain.sol', 'WorldSafetySecurityToken.sol', 'WorldTrade.sol', 'Wrapper.sol', 'WXSLToken.sol', 'X2.sol', 'XC.sol', 'XCPlugin.sol', 'XYZToken.sol', 'YAMBYO.sol', 'YiTongCoin.sol', 'YoobaBatchTransfer.sol', 'YoobaEarlyInvest.sol', 'YoobaICO.sol', 'YOUQIANBI.sol', 'YourMomTokenCrowdsale.sol', 'ZegartToken.sol', 'ZenArt.sol', 'ZenswapDistribution_ZNTZLTU.sol', 'ZEROxRACER.sol', 'ZIBToken.sol', 'ZincAccessor.sol', 'ZIP.sol', 'ZipFlaxICO.sol', 'Zmbc.sol', 'ZPEcoin.sol', 'ZupplyToken.sol', 'ZUR.sol']
